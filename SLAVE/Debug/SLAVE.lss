
SLAVE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e78  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00001e78  00001eec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001884  00000000  00000000  00001f14  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000011a5  00000000  00000000  00003798  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  0000493d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004bed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006836  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007721  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000084d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008630  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000088bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000908b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <main>
      7a:	0c 94 3a 0f 	jmp	0x1e74	; 0x1e74 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 03 0f 	jmp	0x1e06	; 0x1e06 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e8       	ldi	r26, 0x80	; 128
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 03 0f 	jmp	0x1e06	; 0x1e06 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	80 e8       	ldi	r24, 0x80	; 128
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_voidSetPortDirection>:
#include"DIO_Private.h"

/*****************************************************************************/

void DIO_voidSetPortDirection(u8 Copy_u8portID,u8 Copy_u8PortDir )
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <DIO_voidSetPortDirection+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <DIO_voidSetPortDirection+0x8>
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	89 83       	std	Y+1, r24	; 0x01
     b44:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8portID)
     b46:	89 81       	ldd	r24, Y+1	; 0x01
     b48:	28 2f       	mov	r18, r24
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	3c 83       	std	Y+4, r19	; 0x04
     b4e:	2b 83       	std	Y+3, r18	; 0x03
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	9c 81       	ldd	r25, Y+4	; 0x04
     b54:	81 30       	cpi	r24, 0x01	; 1
     b56:	91 05       	cpc	r25, r1
     b58:	d1 f0       	breq	.+52     	; 0xb8e <DIO_voidSetPortDirection+0x58>
     b5a:	2b 81       	ldd	r18, Y+3	; 0x03
     b5c:	3c 81       	ldd	r19, Y+4	; 0x04
     b5e:	22 30       	cpi	r18, 0x02	; 2
     b60:	31 05       	cpc	r19, r1
     b62:	2c f4       	brge	.+10     	; 0xb6e <DIO_voidSetPortDirection+0x38>
     b64:	8b 81       	ldd	r24, Y+3	; 0x03
     b66:	9c 81       	ldd	r25, Y+4	; 0x04
     b68:	00 97       	sbiw	r24, 0x00	; 0
     b6a:	61 f0       	breq	.+24     	; 0xb84 <DIO_voidSetPortDirection+0x4e>
     b6c:	1e c0       	rjmp	.+60     	; 0xbaa <DIO_voidSetPortDirection+0x74>
     b6e:	2b 81       	ldd	r18, Y+3	; 0x03
     b70:	3c 81       	ldd	r19, Y+4	; 0x04
     b72:	22 30       	cpi	r18, 0x02	; 2
     b74:	31 05       	cpc	r19, r1
     b76:	81 f0       	breq	.+32     	; 0xb98 <DIO_voidSetPortDirection+0x62>
     b78:	8b 81       	ldd	r24, Y+3	; 0x03
     b7a:	9c 81       	ldd	r25, Y+4	; 0x04
     b7c:	83 30       	cpi	r24, 0x03	; 3
     b7e:	91 05       	cpc	r25, r1
     b80:	81 f0       	breq	.+32     	; 0xba2 <DIO_voidSetPortDirection+0x6c>
     b82:	13 c0       	rjmp	.+38     	; 0xbaa <DIO_voidSetPortDirection+0x74>
	{
	case PORTA_ID :   DDRA_REG= Copy_u8PortDir ; break ;
     b84:	ea e3       	ldi	r30, 0x3A	; 58
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	8a 81       	ldd	r24, Y+2	; 0x02
     b8a:	80 83       	st	Z, r24
     b8c:	0e c0       	rjmp	.+28     	; 0xbaa <DIO_voidSetPortDirection+0x74>
	case PORTB_ID :   DDRB_REG= Copy_u8PortDir ; break ;
     b8e:	e7 e3       	ldi	r30, 0x37	; 55
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	8a 81       	ldd	r24, Y+2	; 0x02
     b94:	80 83       	st	Z, r24
     b96:	09 c0       	rjmp	.+18     	; 0xbaa <DIO_voidSetPortDirection+0x74>
	case PORTC_ID :   DDRC_REG= Copy_u8PortDir ; break ;
     b98:	e4 e3       	ldi	r30, 0x34	; 52
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	8a 81       	ldd	r24, Y+2	; 0x02
     b9e:	80 83       	st	Z, r24
     ba0:	04 c0       	rjmp	.+8      	; 0xbaa <DIO_voidSetPortDirection+0x74>
	case PORTD_ID :   DDRD_REG= Copy_u8PortDir ; break ;
     ba2:	e1 e3       	ldi	r30, 0x31	; 49
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	8a 81       	ldd	r24, Y+2	; 0x02
     ba8:	80 83       	st	Z, r24

	}
}
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	cf 91       	pop	r28
     bb4:	df 91       	pop	r29
     bb6:	08 95       	ret

00000bb8 <DIO_voidSetPortValue>:
/*****************************************************************************/

void DIO_voidSetPortValue(u8 Copy_u8PortID,u8 Copy_u8PortVal )

{
     bb8:	df 93       	push	r29
     bba:	cf 93       	push	r28
     bbc:	00 d0       	rcall	.+0      	; 0xbbe <DIO_voidSetPortValue+0x6>
     bbe:	00 d0       	rcall	.+0      	; 0xbc0 <DIO_voidSetPortValue+0x8>
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	89 83       	std	Y+1, r24	; 0x01
     bc6:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_u8PortID)
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	28 2f       	mov	r18, r24
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	3c 83       	std	Y+4, r19	; 0x04
     bd0:	2b 83       	std	Y+3, r18	; 0x03
     bd2:	8b 81       	ldd	r24, Y+3	; 0x03
     bd4:	9c 81       	ldd	r25, Y+4	; 0x04
     bd6:	81 30       	cpi	r24, 0x01	; 1
     bd8:	91 05       	cpc	r25, r1
     bda:	d1 f0       	breq	.+52     	; 0xc10 <DIO_voidSetPortValue+0x58>
     bdc:	2b 81       	ldd	r18, Y+3	; 0x03
     bde:	3c 81       	ldd	r19, Y+4	; 0x04
     be0:	22 30       	cpi	r18, 0x02	; 2
     be2:	31 05       	cpc	r19, r1
     be4:	2c f4       	brge	.+10     	; 0xbf0 <DIO_voidSetPortValue+0x38>
     be6:	8b 81       	ldd	r24, Y+3	; 0x03
     be8:	9c 81       	ldd	r25, Y+4	; 0x04
     bea:	00 97       	sbiw	r24, 0x00	; 0
     bec:	61 f0       	breq	.+24     	; 0xc06 <DIO_voidSetPortValue+0x4e>
     bee:	1e c0       	rjmp	.+60     	; 0xc2c <DIO_voidSetPortValue+0x74>
     bf0:	2b 81       	ldd	r18, Y+3	; 0x03
     bf2:	3c 81       	ldd	r19, Y+4	; 0x04
     bf4:	22 30       	cpi	r18, 0x02	; 2
     bf6:	31 05       	cpc	r19, r1
     bf8:	81 f0       	breq	.+32     	; 0xc1a <DIO_voidSetPortValue+0x62>
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	9c 81       	ldd	r25, Y+4	; 0x04
     bfe:	83 30       	cpi	r24, 0x03	; 3
     c00:	91 05       	cpc	r25, r1
     c02:	81 f0       	breq	.+32     	; 0xc24 <DIO_voidSetPortValue+0x6c>
     c04:	13 c0       	rjmp	.+38     	; 0xc2c <DIO_voidSetPortValue+0x74>
	{

	case PORTA_ID :   PORTA_REG= Copy_u8PortVal ; break ;
     c06:	eb e3       	ldi	r30, 0x3B	; 59
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	8a 81       	ldd	r24, Y+2	; 0x02
     c0c:	80 83       	st	Z, r24
     c0e:	0e c0       	rjmp	.+28     	; 0xc2c <DIO_voidSetPortValue+0x74>
	case PORTB_ID :   PORTB_REG= Copy_u8PortVal ; break ;
     c10:	e8 e3       	ldi	r30, 0x38	; 56
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	8a 81       	ldd	r24, Y+2	; 0x02
     c16:	80 83       	st	Z, r24
     c18:	09 c0       	rjmp	.+18     	; 0xc2c <DIO_voidSetPortValue+0x74>
	case PORTC_ID :   PORTC_REG= Copy_u8PortVal ; break ;
     c1a:	e5 e3       	ldi	r30, 0x35	; 53
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	8a 81       	ldd	r24, Y+2	; 0x02
     c20:	80 83       	st	Z, r24
     c22:	04 c0       	rjmp	.+8      	; 0xc2c <DIO_voidSetPortValue+0x74>
	case PORTD_ID :   PORTD_REG= Copy_u8PortVal ; break ;
     c24:	e2 e3       	ldi	r30, 0x32	; 50
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	8a 81       	ldd	r24, Y+2	; 0x02
     c2a:	80 83       	st	Z, r24

	}
}
     c2c:	0f 90       	pop	r0
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	08 95       	ret

00000c3a <DIO_voidSetPinDirection>:

/*****************************************************************************/


void	DIO_voidSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinDir)
{
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
     c42:	27 97       	sbiw	r28, 0x07	; 7
     c44:	0f b6       	in	r0, 0x3f	; 63
     c46:	f8 94       	cli
     c48:	de bf       	out	0x3e, r29	; 62
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	cd bf       	out	0x3d, r28	; 61
     c4e:	89 83       	std	Y+1, r24	; 0x01
     c50:	6a 83       	std	Y+2, r22	; 0x02
     c52:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinID>=PIN_0 &&Copy_u8PinID<=PIN_7)
     c54:	8a 81       	ldd	r24, Y+2	; 0x02
     c56:	88 30       	cpi	r24, 0x08	; 8
     c58:	08 f0       	brcs	.+2      	; 0xc5c <DIO_voidSetPinDirection+0x22>
     c5a:	ea c0       	rjmp	.+468    	; 0xe30 <DIO_voidSetPinDirection+0x1f6>
	{
		if(Copy_u8PinDir==PIN_OUTPUT)//Output
     c5c:	8b 81       	ldd	r24, Y+3	; 0x03
     c5e:	81 30       	cpi	r24, 0x01	; 1
     c60:	09 f0       	breq	.+2      	; 0xc64 <DIO_voidSetPinDirection+0x2a>
     c62:	6f c0       	rjmp	.+222    	; 0xd42 <DIO_voidSetPinDirection+0x108>
		{
			switch(Copy_u8PortID)
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	28 2f       	mov	r18, r24
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	3f 83       	std	Y+7, r19	; 0x07
     c6c:	2e 83       	std	Y+6, r18	; 0x06
     c6e:	8e 81       	ldd	r24, Y+6	; 0x06
     c70:	9f 81       	ldd	r25, Y+7	; 0x07
     c72:	81 30       	cpi	r24, 0x01	; 1
     c74:	91 05       	cpc	r25, r1
     c76:	49 f1       	breq	.+82     	; 0xcca <DIO_voidSetPinDirection+0x90>
     c78:	2e 81       	ldd	r18, Y+6	; 0x06
     c7a:	3f 81       	ldd	r19, Y+7	; 0x07
     c7c:	22 30       	cpi	r18, 0x02	; 2
     c7e:	31 05       	cpc	r19, r1
     c80:	2c f4       	brge	.+10     	; 0xc8c <DIO_voidSetPinDirection+0x52>
     c82:	8e 81       	ldd	r24, Y+6	; 0x06
     c84:	9f 81       	ldd	r25, Y+7	; 0x07
     c86:	00 97       	sbiw	r24, 0x00	; 0
     c88:	61 f0       	breq	.+24     	; 0xca2 <DIO_voidSetPinDirection+0x68>
     c8a:	d2 c0       	rjmp	.+420    	; 0xe30 <DIO_voidSetPinDirection+0x1f6>
     c8c:	2e 81       	ldd	r18, Y+6	; 0x06
     c8e:	3f 81       	ldd	r19, Y+7	; 0x07
     c90:	22 30       	cpi	r18, 0x02	; 2
     c92:	31 05       	cpc	r19, r1
     c94:	71 f1       	breq	.+92     	; 0xcf2 <DIO_voidSetPinDirection+0xb8>
     c96:	8e 81       	ldd	r24, Y+6	; 0x06
     c98:	9f 81       	ldd	r25, Y+7	; 0x07
     c9a:	83 30       	cpi	r24, 0x03	; 3
     c9c:	91 05       	cpc	r25, r1
     c9e:	e9 f1       	breq	.+122    	; 0xd1a <DIO_voidSetPinDirection+0xe0>
     ca0:	c7 c0       	rjmp	.+398    	; 0xe30 <DIO_voidSetPinDirection+0x1f6>
			{
			case PORTA_ID:    SET_BIT(DDRA_REG,Copy_u8PinID); break;
     ca2:	aa e3       	ldi	r26, 0x3A	; 58
     ca4:	b0 e0       	ldi	r27, 0x00	; 0
     ca6:	ea e3       	ldi	r30, 0x3A	; 58
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	48 2f       	mov	r20, r24
     cae:	8a 81       	ldd	r24, Y+2	; 0x02
     cb0:	28 2f       	mov	r18, r24
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	02 2e       	mov	r0, r18
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <DIO_voidSetPinDirection+0x86>
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	0a 94       	dec	r0
     cc2:	e2 f7       	brpl	.-8      	; 0xcbc <DIO_voidSetPinDirection+0x82>
     cc4:	84 2b       	or	r24, r20
     cc6:	8c 93       	st	X, r24
     cc8:	b3 c0       	rjmp	.+358    	; 0xe30 <DIO_voidSetPinDirection+0x1f6>
			case PORTB_ID:    SET_BIT(DDRB_REG,Copy_u8PinID); break;
     cca:	a7 e3       	ldi	r26, 0x37	; 55
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e7 e3       	ldi	r30, 0x37	; 55
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	48 2f       	mov	r20, r24
     cd6:	8a 81       	ldd	r24, Y+2	; 0x02
     cd8:	28 2f       	mov	r18, r24
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	02 2e       	mov	r0, r18
     ce2:	02 c0       	rjmp	.+4      	; 0xce8 <DIO_voidSetPinDirection+0xae>
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	0a 94       	dec	r0
     cea:	e2 f7       	brpl	.-8      	; 0xce4 <DIO_voidSetPinDirection+0xaa>
     cec:	84 2b       	or	r24, r20
     cee:	8c 93       	st	X, r24
     cf0:	9f c0       	rjmp	.+318    	; 0xe30 <DIO_voidSetPinDirection+0x1f6>
			case PORTC_ID:    SET_BIT(DDRC_REG,Copy_u8PinID); break;
     cf2:	a4 e3       	ldi	r26, 0x34	; 52
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	e4 e3       	ldi	r30, 0x34	; 52
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	48 2f       	mov	r20, r24
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	28 2f       	mov	r18, r24
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	02 2e       	mov	r0, r18
     d0a:	02 c0       	rjmp	.+4      	; 0xd10 <DIO_voidSetPinDirection+0xd6>
     d0c:	88 0f       	add	r24, r24
     d0e:	99 1f       	adc	r25, r25
     d10:	0a 94       	dec	r0
     d12:	e2 f7       	brpl	.-8      	; 0xd0c <DIO_voidSetPinDirection+0xd2>
     d14:	84 2b       	or	r24, r20
     d16:	8c 93       	st	X, r24
     d18:	8b c0       	rjmp	.+278    	; 0xe30 <DIO_voidSetPinDirection+0x1f6>
			case PORTD_ID:    SET_BIT(DDRD_REG,Copy_u8PinID); break;
     d1a:	a1 e3       	ldi	r26, 0x31	; 49
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	e1 e3       	ldi	r30, 0x31	; 49
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	80 81       	ld	r24, Z
     d24:	48 2f       	mov	r20, r24
     d26:	8a 81       	ldd	r24, Y+2	; 0x02
     d28:	28 2f       	mov	r18, r24
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	02 2e       	mov	r0, r18
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <DIO_voidSetPinDirection+0xfe>
     d34:	88 0f       	add	r24, r24
     d36:	99 1f       	adc	r25, r25
     d38:	0a 94       	dec	r0
     d3a:	e2 f7       	brpl	.-8      	; 0xd34 <DIO_voidSetPinDirection+0xfa>
     d3c:	84 2b       	or	r24, r20
     d3e:	8c 93       	st	X, r24
     d40:	77 c0       	rjmp	.+238    	; 0xe30 <DIO_voidSetPinDirection+0x1f6>

			default:   break;

			}
		}
		else if(Copy_u8PinDir==PIN_INPUT)//Input
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	88 23       	and	r24, r24
     d46:	09 f0       	breq	.+2      	; 0xd4a <DIO_voidSetPinDirection+0x110>
     d48:	73 c0       	rjmp	.+230    	; 0xe30 <DIO_voidSetPinDirection+0x1f6>
		{
			switch(Copy_u8PortID)
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	3d 83       	std	Y+5, r19	; 0x05
     d52:	2c 83       	std	Y+4, r18	; 0x04
     d54:	8c 81       	ldd	r24, Y+4	; 0x04
     d56:	9d 81       	ldd	r25, Y+5	; 0x05
     d58:	81 30       	cpi	r24, 0x01	; 1
     d5a:	91 05       	cpc	r25, r1
     d5c:	59 f1       	breq	.+86     	; 0xdb4 <DIO_voidSetPinDirection+0x17a>
     d5e:	2c 81       	ldd	r18, Y+4	; 0x04
     d60:	3d 81       	ldd	r19, Y+5	; 0x05
     d62:	22 30       	cpi	r18, 0x02	; 2
     d64:	31 05       	cpc	r19, r1
     d66:	2c f4       	brge	.+10     	; 0xd72 <DIO_voidSetPinDirection+0x138>
     d68:	8c 81       	ldd	r24, Y+4	; 0x04
     d6a:	9d 81       	ldd	r25, Y+5	; 0x05
     d6c:	00 97       	sbiw	r24, 0x00	; 0
     d6e:	69 f0       	breq	.+26     	; 0xd8a <DIO_voidSetPinDirection+0x150>
     d70:	5f c0       	rjmp	.+190    	; 0xe30 <DIO_voidSetPinDirection+0x1f6>
     d72:	2c 81       	ldd	r18, Y+4	; 0x04
     d74:	3d 81       	ldd	r19, Y+5	; 0x05
     d76:	22 30       	cpi	r18, 0x02	; 2
     d78:	31 05       	cpc	r19, r1
     d7a:	89 f1       	breq	.+98     	; 0xdde <DIO_voidSetPinDirection+0x1a4>
     d7c:	8c 81       	ldd	r24, Y+4	; 0x04
     d7e:	9d 81       	ldd	r25, Y+5	; 0x05
     d80:	83 30       	cpi	r24, 0x03	; 3
     d82:	91 05       	cpc	r25, r1
     d84:	09 f4       	brne	.+2      	; 0xd88 <DIO_voidSetPinDirection+0x14e>
     d86:	40 c0       	rjmp	.+128    	; 0xe08 <DIO_voidSetPinDirection+0x1ce>
     d88:	53 c0       	rjmp	.+166    	; 0xe30 <DIO_voidSetPinDirection+0x1f6>
			{
			case PORTA_ID:   CLR_BIT(DDRA_REG,Copy_u8PinID); break;
     d8a:	aa e3       	ldi	r26, 0x3A	; 58
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	ea e3       	ldi	r30, 0x3A	; 58
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <DIO_voidSetPinDirection+0x16e>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <DIO_voidSetPinDirection+0x16a>
     dac:	80 95       	com	r24
     dae:	84 23       	and	r24, r20
     db0:	8c 93       	st	X, r24
     db2:	3e c0       	rjmp	.+124    	; 0xe30 <DIO_voidSetPinDirection+0x1f6>
			case PORTB_ID:   CLR_BIT(DDRB_REG,Copy_u8PinID); break;
     db4:	a7 e3       	ldi	r26, 0x37	; 55
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	e7 e3       	ldi	r30, 0x37	; 55
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	48 2f       	mov	r20, r24
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	02 2e       	mov	r0, r18
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <DIO_voidSetPinDirection+0x198>
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	0a 94       	dec	r0
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <DIO_voidSetPinDirection+0x194>
     dd6:	80 95       	com	r24
     dd8:	84 23       	and	r24, r20
     dda:	8c 93       	st	X, r24
     ddc:	29 c0       	rjmp	.+82     	; 0xe30 <DIO_voidSetPinDirection+0x1f6>
			case PORTC_ID:   CLR_BIT(DDRC_REG,Copy_u8PinID); break;
     dde:	a4 e3       	ldi	r26, 0x34	; 52
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e4 e3       	ldi	r30, 0x34	; 52
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	48 2f       	mov	r20, r24
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	02 2e       	mov	r0, r18
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <DIO_voidSetPinDirection+0x1c2>
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	0a 94       	dec	r0
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <DIO_voidSetPinDirection+0x1be>
     e00:	80 95       	com	r24
     e02:	84 23       	and	r24, r20
     e04:	8c 93       	st	X, r24
     e06:	14 c0       	rjmp	.+40     	; 0xe30 <DIO_voidSetPinDirection+0x1f6>
			case PORTD_ID:   CLR_BIT(DDRD_REG,Copy_u8PinID); break;
     e08:	a1 e3       	ldi	r26, 0x31	; 49
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e1 e3       	ldi	r30, 0x31	; 49
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	48 2f       	mov	r20, r24
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 2e       	mov	r0, r18
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <DIO_voidSetPinDirection+0x1ec>
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	0a 94       	dec	r0
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <DIO_voidSetPinDirection+0x1e8>
     e2a:	80 95       	com	r24
     e2c:	84 23       	and	r24, r20
     e2e:	8c 93       	st	X, r24
			default:   break;
			}
		}
	}

}
     e30:	27 96       	adiw	r28, 0x07	; 7
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	f8 94       	cli
     e36:	de bf       	out	0x3e, r29	; 62
     e38:	0f be       	out	0x3f, r0	; 63
     e3a:	cd bf       	out	0x3d, r28	; 61
     e3c:	cf 91       	pop	r28
     e3e:	df 91       	pop	r29
     e40:	08 95       	ret

00000e42 <DIO_voidSetPinValue>:
/*****************************************************************************/
void    DIO_voidSetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue)
{
     e42:	df 93       	push	r29
     e44:	cf 93       	push	r28
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
     e4a:	27 97       	sbiw	r28, 0x07	; 7
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	de bf       	out	0x3e, r29	; 62
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	cd bf       	out	0x3d, r28	; 61
     e56:	89 83       	std	Y+1, r24	; 0x01
     e58:	6a 83       	std	Y+2, r22	; 0x02
     e5a:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinID>=PIN_0&&Copy_u8PinID<=PIN_7)
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	88 30       	cpi	r24, 0x08	; 8
     e60:	08 f0       	brcs	.+2      	; 0xe64 <DIO_voidSetPinValue+0x22>
     e62:	ea c0       	rjmp	.+468    	; 0x1038 <DIO_voidSetPinValue+0x1f6>
	{
		if(Copy_u8PinValue==PIN_HIGH)//High
     e64:	8b 81       	ldd	r24, Y+3	; 0x03
     e66:	81 30       	cpi	r24, 0x01	; 1
     e68:	09 f0       	breq	.+2      	; 0xe6c <DIO_voidSetPinValue+0x2a>
     e6a:	6f c0       	rjmp	.+222    	; 0xf4a <DIO_voidSetPinValue+0x108>
		{

			switch(Copy_u8PortID)
     e6c:	89 81       	ldd	r24, Y+1	; 0x01
     e6e:	28 2f       	mov	r18, r24
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	3f 83       	std	Y+7, r19	; 0x07
     e74:	2e 83       	std	Y+6, r18	; 0x06
     e76:	8e 81       	ldd	r24, Y+6	; 0x06
     e78:	9f 81       	ldd	r25, Y+7	; 0x07
     e7a:	81 30       	cpi	r24, 0x01	; 1
     e7c:	91 05       	cpc	r25, r1
     e7e:	49 f1       	breq	.+82     	; 0xed2 <DIO_voidSetPinValue+0x90>
     e80:	2e 81       	ldd	r18, Y+6	; 0x06
     e82:	3f 81       	ldd	r19, Y+7	; 0x07
     e84:	22 30       	cpi	r18, 0x02	; 2
     e86:	31 05       	cpc	r19, r1
     e88:	2c f4       	brge	.+10     	; 0xe94 <DIO_voidSetPinValue+0x52>
     e8a:	8e 81       	ldd	r24, Y+6	; 0x06
     e8c:	9f 81       	ldd	r25, Y+7	; 0x07
     e8e:	00 97       	sbiw	r24, 0x00	; 0
     e90:	61 f0       	breq	.+24     	; 0xeaa <DIO_voidSetPinValue+0x68>
     e92:	d2 c0       	rjmp	.+420    	; 0x1038 <DIO_voidSetPinValue+0x1f6>
     e94:	2e 81       	ldd	r18, Y+6	; 0x06
     e96:	3f 81       	ldd	r19, Y+7	; 0x07
     e98:	22 30       	cpi	r18, 0x02	; 2
     e9a:	31 05       	cpc	r19, r1
     e9c:	71 f1       	breq	.+92     	; 0xefa <DIO_voidSetPinValue+0xb8>
     e9e:	8e 81       	ldd	r24, Y+6	; 0x06
     ea0:	9f 81       	ldd	r25, Y+7	; 0x07
     ea2:	83 30       	cpi	r24, 0x03	; 3
     ea4:	91 05       	cpc	r25, r1
     ea6:	e9 f1       	breq	.+122    	; 0xf22 <DIO_voidSetPinValue+0xe0>
     ea8:	c7 c0       	rjmp	.+398    	; 0x1038 <DIO_voidSetPinValue+0x1f6>
			{
			case PORTA_ID :    SET_BIT(PORTA_REG,Copy_u8PinID); break;
     eaa:	ab e3       	ldi	r26, 0x3B	; 59
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	eb e3       	ldi	r30, 0x3B	; 59
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	48 2f       	mov	r20, r24
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	02 2e       	mov	r0, r18
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <DIO_voidSetPinValue+0x86>
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	0a 94       	dec	r0
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <DIO_voidSetPinValue+0x82>
     ecc:	84 2b       	or	r24, r20
     ece:	8c 93       	st	X, r24
     ed0:	b3 c0       	rjmp	.+358    	; 0x1038 <DIO_voidSetPinValue+0x1f6>
			case PORTB_ID :    SET_BIT(PORTB_REG,Copy_u8PinID); break;
     ed2:	a8 e3       	ldi	r26, 0x38	; 56
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e8 e3       	ldi	r30, 0x38	; 56
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	48 2f       	mov	r20, r24
     ede:	8a 81       	ldd	r24, Y+2	; 0x02
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	02 2e       	mov	r0, r18
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <DIO_voidSetPinValue+0xae>
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	0a 94       	dec	r0
     ef2:	e2 f7       	brpl	.-8      	; 0xeec <DIO_voidSetPinValue+0xaa>
     ef4:	84 2b       	or	r24, r20
     ef6:	8c 93       	st	X, r24
     ef8:	9f c0       	rjmp	.+318    	; 0x1038 <DIO_voidSetPinValue+0x1f6>
			case PORTC_ID :    SET_BIT(PORTC_REG,Copy_u8PinID); break;
     efa:	a5 e3       	ldi	r26, 0x35	; 53
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	e5 e3       	ldi	r30, 0x35	; 53
     f00:	f0 e0       	ldi	r31, 0x00	; 0
     f02:	80 81       	ld	r24, Z
     f04:	48 2f       	mov	r20, r24
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	02 2e       	mov	r0, r18
     f12:	02 c0       	rjmp	.+4      	; 0xf18 <DIO_voidSetPinValue+0xd6>
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	0a 94       	dec	r0
     f1a:	e2 f7       	brpl	.-8      	; 0xf14 <DIO_voidSetPinValue+0xd2>
     f1c:	84 2b       	or	r24, r20
     f1e:	8c 93       	st	X, r24
     f20:	8b c0       	rjmp	.+278    	; 0x1038 <DIO_voidSetPinValue+0x1f6>
			case PORTD_ID :    SET_BIT(PORTD_REG,Copy_u8PinID); break;
     f22:	a2 e3       	ldi	r26, 0x32	; 50
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e2 e3       	ldi	r30, 0x32	; 50
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	48 2f       	mov	r20, r24
     f2e:	8a 81       	ldd	r24, Y+2	; 0x02
     f30:	28 2f       	mov	r18, r24
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	02 2e       	mov	r0, r18
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <DIO_voidSetPinValue+0xfe>
     f3c:	88 0f       	add	r24, r24
     f3e:	99 1f       	adc	r25, r25
     f40:	0a 94       	dec	r0
     f42:	e2 f7       	brpl	.-8      	; 0xf3c <DIO_voidSetPinValue+0xfa>
     f44:	84 2b       	or	r24, r20
     f46:	8c 93       	st	X, r24
     f48:	77 c0       	rjmp	.+238    	; 0x1038 <DIO_voidSetPinValue+0x1f6>

			}
		}
		else if(Copy_u8PinValue==PIN_LOW)//Low
     f4a:	8b 81       	ldd	r24, Y+3	; 0x03
     f4c:	88 23       	and	r24, r24
     f4e:	09 f0       	breq	.+2      	; 0xf52 <DIO_voidSetPinValue+0x110>
     f50:	73 c0       	rjmp	.+230    	; 0x1038 <DIO_voidSetPinValue+0x1f6>
		{
			switch(Copy_u8PortID)
     f52:	89 81       	ldd	r24, Y+1	; 0x01
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	3d 83       	std	Y+5, r19	; 0x05
     f5a:	2c 83       	std	Y+4, r18	; 0x04
     f5c:	8c 81       	ldd	r24, Y+4	; 0x04
     f5e:	9d 81       	ldd	r25, Y+5	; 0x05
     f60:	81 30       	cpi	r24, 0x01	; 1
     f62:	91 05       	cpc	r25, r1
     f64:	59 f1       	breq	.+86     	; 0xfbc <DIO_voidSetPinValue+0x17a>
     f66:	2c 81       	ldd	r18, Y+4	; 0x04
     f68:	3d 81       	ldd	r19, Y+5	; 0x05
     f6a:	22 30       	cpi	r18, 0x02	; 2
     f6c:	31 05       	cpc	r19, r1
     f6e:	2c f4       	brge	.+10     	; 0xf7a <DIO_voidSetPinValue+0x138>
     f70:	8c 81       	ldd	r24, Y+4	; 0x04
     f72:	9d 81       	ldd	r25, Y+5	; 0x05
     f74:	00 97       	sbiw	r24, 0x00	; 0
     f76:	69 f0       	breq	.+26     	; 0xf92 <DIO_voidSetPinValue+0x150>
     f78:	5f c0       	rjmp	.+190    	; 0x1038 <DIO_voidSetPinValue+0x1f6>
     f7a:	2c 81       	ldd	r18, Y+4	; 0x04
     f7c:	3d 81       	ldd	r19, Y+5	; 0x05
     f7e:	22 30       	cpi	r18, 0x02	; 2
     f80:	31 05       	cpc	r19, r1
     f82:	89 f1       	breq	.+98     	; 0xfe6 <DIO_voidSetPinValue+0x1a4>
     f84:	8c 81       	ldd	r24, Y+4	; 0x04
     f86:	9d 81       	ldd	r25, Y+5	; 0x05
     f88:	83 30       	cpi	r24, 0x03	; 3
     f8a:	91 05       	cpc	r25, r1
     f8c:	09 f4       	brne	.+2      	; 0xf90 <DIO_voidSetPinValue+0x14e>
     f8e:	40 c0       	rjmp	.+128    	; 0x1010 <DIO_voidSetPinValue+0x1ce>
     f90:	53 c0       	rjmp	.+166    	; 0x1038 <DIO_voidSetPinValue+0x1f6>
			{
			case PORTA_ID : CLR_BIT(PORTA_REG,Copy_u8PinID); break ;
     f92:	ab e3       	ldi	r26, 0x3B	; 59
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	eb e3       	ldi	r30, 0x3B	; 59
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	48 2f       	mov	r20, r24
     f9e:	8a 81       	ldd	r24, Y+2	; 0x02
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	02 2e       	mov	r0, r18
     faa:	02 c0       	rjmp	.+4      	; 0xfb0 <DIO_voidSetPinValue+0x16e>
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	0a 94       	dec	r0
     fb2:	e2 f7       	brpl	.-8      	; 0xfac <DIO_voidSetPinValue+0x16a>
     fb4:	80 95       	com	r24
     fb6:	84 23       	and	r24, r20
     fb8:	8c 93       	st	X, r24
     fba:	3e c0       	rjmp	.+124    	; 0x1038 <DIO_voidSetPinValue+0x1f6>
			case PORTB_ID : CLR_BIT(PORTB_REG,Copy_u8PinID); break ;
     fbc:	a8 e3       	ldi	r26, 0x38	; 56
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e8 e3       	ldi	r30, 0x38	; 56
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	48 2f       	mov	r20, r24
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	02 2e       	mov	r0, r18
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <DIO_voidSetPinValue+0x198>
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	0a 94       	dec	r0
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <DIO_voidSetPinValue+0x194>
     fde:	80 95       	com	r24
     fe0:	84 23       	and	r24, r20
     fe2:	8c 93       	st	X, r24
     fe4:	29 c0       	rjmp	.+82     	; 0x1038 <DIO_voidSetPinValue+0x1f6>
			case PORTC_ID : CLR_BIT(PORTC_REG,Copy_u8PinID) ;break ;
     fe6:	a5 e3       	ldi	r26, 0x35	; 53
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e5 e3       	ldi	r30, 0x35	; 53
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	48 2f       	mov	r20, r24
     ff2:	8a 81       	ldd	r24, Y+2	; 0x02
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	02 2e       	mov	r0, r18
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <DIO_voidSetPinValue+0x1c2>
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	0a 94       	dec	r0
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <DIO_voidSetPinValue+0x1be>
    1008:	80 95       	com	r24
    100a:	84 23       	and	r24, r20
    100c:	8c 93       	st	X, r24
    100e:	14 c0       	rjmp	.+40     	; 0x1038 <DIO_voidSetPinValue+0x1f6>
			case PORTD_ID : CLR_BIT(PORTD_REG,Copy_u8PinID) ;break ;
    1010:	a2 e3       	ldi	r26, 0x32	; 50
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e2 e3       	ldi	r30, 0x32	; 50
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	48 2f       	mov	r20, r24
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	02 2e       	mov	r0, r18
    1028:	02 c0       	rjmp	.+4      	; 0x102e <DIO_voidSetPinValue+0x1ec>
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	0a 94       	dec	r0
    1030:	e2 f7       	brpl	.-8      	; 0x102a <DIO_voidSetPinValue+0x1e8>
    1032:	80 95       	com	r24
    1034:	84 23       	and	r24, r20
    1036:	8c 93       	st	X, r24

			}
		}
	}
}
    1038:	27 96       	adiw	r28, 0x07	; 7
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	de bf       	out	0x3e, r29	; 62
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <DIO_u8GetBitValue>:
/*****************************************************************************/
u8 DIO_u8GetBitValue(u8 copy_u8PortID , u8 Copy_u8PinID )
{
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	00 d0       	rcall	.+0      	; 0x1050 <DIO_u8GetBitValue+0x6>
    1050:	00 d0       	rcall	.+0      	; 0x1052 <DIO_u8GetBitValue+0x8>
    1052:	0f 92       	push	r0
    1054:	cd b7       	in	r28, 0x3d	; 61
    1056:	de b7       	in	r29, 0x3e	; 62
    1058:	8a 83       	std	Y+2, r24	; 0x02
    105a:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_PinVal ;

	if( Copy_u8PinID>=PIN_0 && Copy_u8PinID<=PIN_7 )
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	88 30       	cpi	r24, 0x08	; 8
    1060:	08 f0       	brcs	.+2      	; 0x1064 <DIO_u8GetBitValue+0x1a>
    1062:	67 c0       	rjmp	.+206    	; 0x1132 <DIO_u8GetBitValue+0xe8>
	{
		switch(copy_u8PortID)
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	3d 83       	std	Y+5, r19	; 0x05
    106c:	2c 83       	std	Y+4, r18	; 0x04
    106e:	4c 81       	ldd	r20, Y+4	; 0x04
    1070:	5d 81       	ldd	r21, Y+5	; 0x05
    1072:	41 30       	cpi	r20, 0x01	; 1
    1074:	51 05       	cpc	r21, r1
    1076:	41 f1       	breq	.+80     	; 0x10c8 <DIO_u8GetBitValue+0x7e>
    1078:	8c 81       	ldd	r24, Y+4	; 0x04
    107a:	9d 81       	ldd	r25, Y+5	; 0x05
    107c:	82 30       	cpi	r24, 0x02	; 2
    107e:	91 05       	cpc	r25, r1
    1080:	34 f4       	brge	.+12     	; 0x108e <DIO_u8GetBitValue+0x44>
    1082:	2c 81       	ldd	r18, Y+4	; 0x04
    1084:	3d 81       	ldd	r19, Y+5	; 0x05
    1086:	21 15       	cp	r18, r1
    1088:	31 05       	cpc	r19, r1
    108a:	61 f0       	breq	.+24     	; 0x10a4 <DIO_u8GetBitValue+0x5a>
    108c:	52 c0       	rjmp	.+164    	; 0x1132 <DIO_u8GetBitValue+0xe8>
    108e:	4c 81       	ldd	r20, Y+4	; 0x04
    1090:	5d 81       	ldd	r21, Y+5	; 0x05
    1092:	42 30       	cpi	r20, 0x02	; 2
    1094:	51 05       	cpc	r21, r1
    1096:	51 f1       	breq	.+84     	; 0x10ec <DIO_u8GetBitValue+0xa2>
    1098:	8c 81       	ldd	r24, Y+4	; 0x04
    109a:	9d 81       	ldd	r25, Y+5	; 0x05
    109c:	83 30       	cpi	r24, 0x03	; 3
    109e:	91 05       	cpc	r25, r1
    10a0:	b9 f1       	breq	.+110    	; 0x1110 <DIO_u8GetBitValue+0xc6>
    10a2:	47 c0       	rjmp	.+142    	; 0x1132 <DIO_u8GetBitValue+0xe8>
		{

		case PORTA_ID : Local_PinVal=GET_BIT(PINA_REG,Copy_u8PinID)   ; break ;
    10a4:	e9 e3       	ldi	r30, 0x39	; 57
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	80 81       	ld	r24, Z
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	88 2f       	mov	r24, r24
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	a9 01       	movw	r20, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <DIO_u8GetBitValue+0x72>
    10b8:	55 95       	asr	r21
    10ba:	47 95       	ror	r20
    10bc:	8a 95       	dec	r24
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <DIO_u8GetBitValue+0x6e>
    10c0:	ca 01       	movw	r24, r20
    10c2:	81 70       	andi	r24, 0x01	; 1
    10c4:	89 83       	std	Y+1, r24	; 0x01
    10c6:	35 c0       	rjmp	.+106    	; 0x1132 <DIO_u8GetBitValue+0xe8>
		case PORTB_ID : Local_PinVal=GET_BIT(PINB_REG,Copy_u8PinID)   ; break ;
    10c8:	e6 e3       	ldi	r30, 0x36	; 54
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	88 2f       	mov	r24, r24
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	a9 01       	movw	r20, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <DIO_u8GetBitValue+0x96>
    10dc:	55 95       	asr	r21
    10de:	47 95       	ror	r20
    10e0:	8a 95       	dec	r24
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <DIO_u8GetBitValue+0x92>
    10e4:	ca 01       	movw	r24, r20
    10e6:	81 70       	andi	r24, 0x01	; 1
    10e8:	89 83       	std	Y+1, r24	; 0x01
    10ea:	23 c0       	rjmp	.+70     	; 0x1132 <DIO_u8GetBitValue+0xe8>
		case PORTC_ID : Local_PinVal=GET_BIT(PINC_REG,Copy_u8PinID)   ; break ;
    10ec:	e3 e3       	ldi	r30, 0x33	; 51
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	88 2f       	mov	r24, r24
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	a9 01       	movw	r20, r18
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <DIO_u8GetBitValue+0xba>
    1100:	55 95       	asr	r21
    1102:	47 95       	ror	r20
    1104:	8a 95       	dec	r24
    1106:	e2 f7       	brpl	.-8      	; 0x1100 <DIO_u8GetBitValue+0xb6>
    1108:	ca 01       	movw	r24, r20
    110a:	81 70       	andi	r24, 0x01	; 1
    110c:	89 83       	std	Y+1, r24	; 0x01
    110e:	11 c0       	rjmp	.+34     	; 0x1132 <DIO_u8GetBitValue+0xe8>
		case PORTD_ID : Local_PinVal=GET_BIT(PIND_REG,Copy_u8PinID)   ; break ;
    1110:	e0 e3       	ldi	r30, 0x30	; 48
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	88 2f       	mov	r24, r24
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	a9 01       	movw	r20, r18
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <DIO_u8GetBitValue+0xde>
    1124:	55 95       	asr	r21
    1126:	47 95       	ror	r20
    1128:	8a 95       	dec	r24
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <DIO_u8GetBitValue+0xda>
    112c:	ca 01       	movw	r24, r20
    112e:	81 70       	andi	r24, 0x01	; 1
    1130:	89 83       	std	Y+1, r24	; 0x01

		}
	}

	return Local_PinVal ;
    1132:	89 81       	ldd	r24, Y+1	; 0x01

}
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	cf 91       	pop	r28
    1140:	df 91       	pop	r29
    1142:	08 95       	ret

00001144 <DIO_u8GetPinValue>:
//
//	}
//
//
u8 DIO_u8GetPinValue(u8 copy_u8PortID , u8 copy_PinID)
{
    1144:	df 93       	push	r29
    1146:	cf 93       	push	r28
    1148:	00 d0       	rcall	.+0      	; 0x114a <DIO_u8GetPinValue+0x6>
    114a:	00 d0       	rcall	.+0      	; 0x114c <DIO_u8GetPinValue+0x8>
    114c:	0f 92       	push	r0
    114e:	cd b7       	in	r28, 0x3d	; 61
    1150:	de b7       	in	r29, 0x3e	; 62
    1152:	8a 83       	std	Y+2, r24	; 0x02
    1154:	6b 83       	std	Y+3, r22	; 0x03
    u8 value = 0;
    1156:	19 82       	std	Y+1, r1	; 0x01
    switch(copy_u8PortID)
    1158:	8a 81       	ldd	r24, Y+2	; 0x02
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	3d 83       	std	Y+5, r19	; 0x05
    1160:	2c 83       	std	Y+4, r18	; 0x04
    1162:	4c 81       	ldd	r20, Y+4	; 0x04
    1164:	5d 81       	ldd	r21, Y+5	; 0x05
    1166:	41 30       	cpi	r20, 0x01	; 1
    1168:	51 05       	cpc	r21, r1
    116a:	41 f1       	breq	.+80     	; 0x11bc <DIO_u8GetPinValue+0x78>
    116c:	8c 81       	ldd	r24, Y+4	; 0x04
    116e:	9d 81       	ldd	r25, Y+5	; 0x05
    1170:	82 30       	cpi	r24, 0x02	; 2
    1172:	91 05       	cpc	r25, r1
    1174:	34 f4       	brge	.+12     	; 0x1182 <DIO_u8GetPinValue+0x3e>
    1176:	2c 81       	ldd	r18, Y+4	; 0x04
    1178:	3d 81       	ldd	r19, Y+5	; 0x05
    117a:	21 15       	cp	r18, r1
    117c:	31 05       	cpc	r19, r1
    117e:	61 f0       	breq	.+24     	; 0x1198 <DIO_u8GetPinValue+0x54>
    1180:	52 c0       	rjmp	.+164    	; 0x1226 <DIO_u8GetPinValue+0xe2>
    1182:	4c 81       	ldd	r20, Y+4	; 0x04
    1184:	5d 81       	ldd	r21, Y+5	; 0x05
    1186:	42 30       	cpi	r20, 0x02	; 2
    1188:	51 05       	cpc	r21, r1
    118a:	51 f1       	breq	.+84     	; 0x11e0 <DIO_u8GetPinValue+0x9c>
    118c:	8c 81       	ldd	r24, Y+4	; 0x04
    118e:	9d 81       	ldd	r25, Y+5	; 0x05
    1190:	83 30       	cpi	r24, 0x03	; 3
    1192:	91 05       	cpc	r25, r1
    1194:	b9 f1       	breq	.+110    	; 0x1204 <DIO_u8GetPinValue+0xc0>
    1196:	47 c0       	rjmp	.+142    	; 0x1226 <DIO_u8GetPinValue+0xe2>
    {
        case PORTA_ID: value = GET_BIT(PINA_REG, copy_PinID); break;
    1198:	e9 e3       	ldi	r30, 0x39	; 57
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	88 2f       	mov	r24, r24
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	a9 01       	movw	r20, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <DIO_u8GetPinValue+0x6c>
    11ac:	55 95       	asr	r21
    11ae:	47 95       	ror	r20
    11b0:	8a 95       	dec	r24
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <DIO_u8GetPinValue+0x68>
    11b4:	ca 01       	movw	r24, r20
    11b6:	81 70       	andi	r24, 0x01	; 1
    11b8:	89 83       	std	Y+1, r24	; 0x01
    11ba:	35 c0       	rjmp	.+106    	; 0x1226 <DIO_u8GetPinValue+0xe2>
        case PORTB_ID: value = GET_BIT(PINB_REG, copy_PinID); break;
    11bc:	e6 e3       	ldi	r30, 0x36	; 54
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	88 2f       	mov	r24, r24
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	a9 01       	movw	r20, r18
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <DIO_u8GetPinValue+0x90>
    11d0:	55 95       	asr	r21
    11d2:	47 95       	ror	r20
    11d4:	8a 95       	dec	r24
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <DIO_u8GetPinValue+0x8c>
    11d8:	ca 01       	movw	r24, r20
    11da:	81 70       	andi	r24, 0x01	; 1
    11dc:	89 83       	std	Y+1, r24	; 0x01
    11de:	23 c0       	rjmp	.+70     	; 0x1226 <DIO_u8GetPinValue+0xe2>
        case PORTC_ID: value = GET_BIT(PINC_REG, copy_PinID); break;
    11e0:	e3 e3       	ldi	r30, 0x33	; 51
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	8b 81       	ldd	r24, Y+3	; 0x03
    11ec:	88 2f       	mov	r24, r24
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	a9 01       	movw	r20, r18
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <DIO_u8GetPinValue+0xb4>
    11f4:	55 95       	asr	r21
    11f6:	47 95       	ror	r20
    11f8:	8a 95       	dec	r24
    11fa:	e2 f7       	brpl	.-8      	; 0x11f4 <DIO_u8GetPinValue+0xb0>
    11fc:	ca 01       	movw	r24, r20
    11fe:	81 70       	andi	r24, 0x01	; 1
    1200:	89 83       	std	Y+1, r24	; 0x01
    1202:	11 c0       	rjmp	.+34     	; 0x1226 <DIO_u8GetPinValue+0xe2>
        case PORTD_ID: value = GET_BIT(PIND_REG, copy_PinID); break;
    1204:	e0 e3       	ldi	r30, 0x30	; 48
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	88 2f       	mov	r24, r24
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	a9 01       	movw	r20, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <DIO_u8GetPinValue+0xd8>
    1218:	55 95       	asr	r21
    121a:	47 95       	ror	r20
    121c:	8a 95       	dec	r24
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <DIO_u8GetPinValue+0xd4>
    1220:	ca 01       	movw	r24, r20
    1222:	81 70       	andi	r24, 0x01	; 1
    1224:	89 83       	std	Y+1, r24	; 0x01
    }

    return value;
    1226:	89 81       	ldd	r24, Y+1	; 0x01
}
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <DIO_voidToggelPin>:


/*****************************************************************************/
void DIO_voidToggelPin(u8 copy_u8PortID,u8 Copy_u8PinID)
{
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	00 d0       	rcall	.+0      	; 0x123e <DIO_voidToggelPin+0x6>
    123e:	00 d0       	rcall	.+0      	; 0x1240 <DIO_voidToggelPin+0x8>
    1240:	cd b7       	in	r28, 0x3d	; 61
    1242:	de b7       	in	r29, 0x3e	; 62
    1244:	89 83       	std	Y+1, r24	; 0x01
    1246:	6a 83       	std	Y+2, r22	; 0x02

	if( Copy_u8PinID>=PIN_0 && Copy_u8PinID<=PIN_7)
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	88 30       	cpi	r24, 0x08	; 8
    124c:	08 f0       	brcs	.+2      	; 0x1250 <DIO_voidToggelPin+0x18>
    124e:	6e c0       	rjmp	.+220    	; 0x132c <DIO_voidToggelPin+0xf4>
	{

		switch (copy_u8PortID)
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	3c 83       	std	Y+4, r19	; 0x04
    1258:	2b 83       	std	Y+3, r18	; 0x03
    125a:	8b 81       	ldd	r24, Y+3	; 0x03
    125c:	9c 81       	ldd	r25, Y+4	; 0x04
    125e:	81 30       	cpi	r24, 0x01	; 1
    1260:	91 05       	cpc	r25, r1
    1262:	49 f1       	breq	.+82     	; 0x12b6 <DIO_voidToggelPin+0x7e>
    1264:	2b 81       	ldd	r18, Y+3	; 0x03
    1266:	3c 81       	ldd	r19, Y+4	; 0x04
    1268:	22 30       	cpi	r18, 0x02	; 2
    126a:	31 05       	cpc	r19, r1
    126c:	2c f4       	brge	.+10     	; 0x1278 <DIO_voidToggelPin+0x40>
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	9c 81       	ldd	r25, Y+4	; 0x04
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	61 f0       	breq	.+24     	; 0x128e <DIO_voidToggelPin+0x56>
    1276:	5a c0       	rjmp	.+180    	; 0x132c <DIO_voidToggelPin+0xf4>
    1278:	2b 81       	ldd	r18, Y+3	; 0x03
    127a:	3c 81       	ldd	r19, Y+4	; 0x04
    127c:	22 30       	cpi	r18, 0x02	; 2
    127e:	31 05       	cpc	r19, r1
    1280:	71 f1       	breq	.+92     	; 0x12de <DIO_voidToggelPin+0xa6>
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	9c 81       	ldd	r25, Y+4	; 0x04
    1286:	83 30       	cpi	r24, 0x03	; 3
    1288:	91 05       	cpc	r25, r1
    128a:	e9 f1       	breq	.+122    	; 0x1306 <DIO_voidToggelPin+0xce>
    128c:	4f c0       	rjmp	.+158    	; 0x132c <DIO_voidToggelPin+0xf4>
		{
		case PORTA_ID :  TOG_BIT(PORTA_REG,Copy_u8PinID) ; break ;
    128e:	ab e3       	ldi	r26, 0x3B	; 59
    1290:	b0 e0       	ldi	r27, 0x00	; 0
    1292:	eb e3       	ldi	r30, 0x3B	; 59
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	80 81       	ld	r24, Z
    1298:	48 2f       	mov	r20, r24
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	28 2f       	mov	r18, r24
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	02 2e       	mov	r0, r18
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <DIO_voidToggelPin+0x74>
    12a8:	88 0f       	add	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	0a 94       	dec	r0
    12ae:	e2 f7       	brpl	.-8      	; 0x12a8 <DIO_voidToggelPin+0x70>
    12b0:	84 27       	eor	r24, r20
    12b2:	8c 93       	st	X, r24
    12b4:	3b c0       	rjmp	.+118    	; 0x132c <DIO_voidToggelPin+0xf4>
		case PORTB_ID :  TOG_BIT(PORTB_REG,Copy_u8PinID) ; break ;
    12b6:	a8 e3       	ldi	r26, 0x38	; 56
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	e8 e3       	ldi	r30, 0x38	; 56
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	48 2f       	mov	r20, r24
    12c2:	8a 81       	ldd	r24, Y+2	; 0x02
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	02 2e       	mov	r0, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <DIO_voidToggelPin+0x9c>
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	0a 94       	dec	r0
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <DIO_voidToggelPin+0x98>
    12d8:	84 27       	eor	r24, r20
    12da:	8c 93       	st	X, r24
    12dc:	27 c0       	rjmp	.+78     	; 0x132c <DIO_voidToggelPin+0xf4>
		case PORTC_ID :  TOG_BIT(PORTC_REG,Copy_u8PinID) ; break ;
    12de:	a5 e3       	ldi	r26, 0x35	; 53
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e5 e3       	ldi	r30, 0x35	; 53
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	48 2f       	mov	r20, r24
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	02 2e       	mov	r0, r18
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <DIO_voidToggelPin+0xc4>
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	0a 94       	dec	r0
    12fe:	e2 f7       	brpl	.-8      	; 0x12f8 <DIO_voidToggelPin+0xc0>
    1300:	84 27       	eor	r24, r20
    1302:	8c 93       	st	X, r24
    1304:	13 c0       	rjmp	.+38     	; 0x132c <DIO_voidToggelPin+0xf4>
		case PORTD_ID :  TOG_BIT(PORTD_REG,Copy_u8PinID) ; break ;
    1306:	a2 e3       	ldi	r26, 0x32	; 50
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	e2 e3       	ldi	r30, 0x32	; 50
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	48 2f       	mov	r20, r24
    1312:	8a 81       	ldd	r24, Y+2	; 0x02
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	02 2e       	mov	r0, r18
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <DIO_voidToggelPin+0xec>
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	0a 94       	dec	r0
    1326:	e2 f7       	brpl	.-8      	; 0x1320 <DIO_voidToggelPin+0xe8>
    1328:	84 27       	eor	r24, r20
    132a:	8c 93       	st	X, r24
		}

	}
}
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	08 95       	ret

0000133a <LCD_voidInit>:



/***********************************************************************************/
void LCD_voidInit(void)
{
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
    1342:	2e 97       	sbiw	r28, 0x0e	; 14
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	de bf       	out	0x3e, r29	; 62
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	cd bf       	out	0x3d, r28	; 61
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	a0 ef       	ldi	r26, 0xF0	; 240
    1354:	b1 e4       	ldi	r27, 0x41	; 65
    1356:	8b 87       	std	Y+11, r24	; 0x0b
    1358:	9c 87       	std	Y+12, r25	; 0x0c
    135a:	ad 87       	std	Y+13, r26	; 0x0d
    135c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    135e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1360:	7c 85       	ldd	r23, Y+12	; 0x0c
    1362:	8d 85       	ldd	r24, Y+13	; 0x0d
    1364:	9e 85       	ldd	r25, Y+14	; 0x0e
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	4a e7       	ldi	r20, 0x7A	; 122
    136c:	53 e4       	ldi	r21, 0x43	; 67
    136e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1372:	dc 01       	movw	r26, r24
    1374:	cb 01       	movw	r24, r22
    1376:	8f 83       	std	Y+7, r24	; 0x07
    1378:	98 87       	std	Y+8, r25	; 0x08
    137a:	a9 87       	std	Y+9, r26	; 0x09
    137c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    137e:	6f 81       	ldd	r22, Y+7	; 0x07
    1380:	78 85       	ldd	r23, Y+8	; 0x08
    1382:	89 85       	ldd	r24, Y+9	; 0x09
    1384:	9a 85       	ldd	r25, Y+10	; 0x0a
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	40 e8       	ldi	r20, 0x80	; 128
    138c:	5f e3       	ldi	r21, 0x3F	; 63
    138e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1392:	88 23       	and	r24, r24
    1394:	2c f4       	brge	.+10     	; 0x13a0 <LCD_voidInit+0x66>
		__ticks = 1;
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	9e 83       	std	Y+6, r25	; 0x06
    139c:	8d 83       	std	Y+5, r24	; 0x05
    139e:	3f c0       	rjmp	.+126    	; 0x141e <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    13a0:	6f 81       	ldd	r22, Y+7	; 0x07
    13a2:	78 85       	ldd	r23, Y+8	; 0x08
    13a4:	89 85       	ldd	r24, Y+9	; 0x09
    13a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	3f ef       	ldi	r19, 0xFF	; 255
    13ac:	4f e7       	ldi	r20, 0x7F	; 127
    13ae:	57 e4       	ldi	r21, 0x47	; 71
    13b0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13b4:	18 16       	cp	r1, r24
    13b6:	4c f5       	brge	.+82     	; 0x140a <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    13bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    13be:	9e 85       	ldd	r25, Y+14	; 0x0e
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	40 e2       	ldi	r20, 0x20	; 32
    13c6:	51 e4       	ldi	r21, 0x41	; 65
    13c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	bc 01       	movw	r22, r24
    13d2:	cd 01       	movw	r24, r26
    13d4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13d8:	dc 01       	movw	r26, r24
    13da:	cb 01       	movw	r24, r22
    13dc:	9e 83       	std	Y+6, r25	; 0x06
    13de:	8d 83       	std	Y+5, r24	; 0x05
    13e0:	0f c0       	rjmp	.+30     	; 0x1400 <LCD_voidInit+0xc6>
    13e2:	89 e1       	ldi	r24, 0x19	; 25
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	9c 83       	std	Y+4, r25	; 0x04
    13e8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	9c 81       	ldd	r25, Y+4	; 0x04
    13ee:	01 97       	sbiw	r24, 0x01	; 1
    13f0:	f1 f7       	brne	.-4      	; 0x13ee <LCD_voidInit+0xb4>
    13f2:	9c 83       	std	Y+4, r25	; 0x04
    13f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f6:	8d 81       	ldd	r24, Y+5	; 0x05
    13f8:	9e 81       	ldd	r25, Y+6	; 0x06
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	9e 83       	std	Y+6, r25	; 0x06
    13fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1400:	8d 81       	ldd	r24, Y+5	; 0x05
    1402:	9e 81       	ldd	r25, Y+6	; 0x06
    1404:	00 97       	sbiw	r24, 0x00	; 0
    1406:	69 f7       	brne	.-38     	; 0x13e2 <LCD_voidInit+0xa8>
    1408:	14 c0       	rjmp	.+40     	; 0x1432 <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    140a:	6f 81       	ldd	r22, Y+7	; 0x07
    140c:	78 85       	ldd	r23, Y+8	; 0x08
    140e:	89 85       	ldd	r24, Y+9	; 0x09
    1410:	9a 85       	ldd	r25, Y+10	; 0x0a
    1412:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	9e 83       	std	Y+6, r25	; 0x06
    141c:	8d 83       	std	Y+5, r24	; 0x05
    141e:	8d 81       	ldd	r24, Y+5	; 0x05
    1420:	9e 81       	ldd	r25, Y+6	; 0x06
    1422:	9a 83       	std	Y+2, r25	; 0x02
    1424:	89 83       	std	Y+1, r24	; 0x01
    1426:	89 81       	ldd	r24, Y+1	; 0x01
    1428:	9a 81       	ldd	r25, Y+2	; 0x02
    142a:	01 97       	sbiw	r24, 0x01	; 1
    142c:	f1 f7       	brne	.-4      	; 0x142a <LCD_voidInit+0xf0>
    142e:	9a 83       	std	Y+2, r25	; 0x02
    1430:	89 83       	std	Y+1, r24	; 0x01
	/* Delay 30ms to ensure the initialization of the LCD driver */
	_delay_ms(30);

	/* Set Control pins as output */
	DIO_voidSetPinDirection(RS_PORT,RS_PIN,PIN_OUTPUT);
    1432:	82 e0       	ldi	r24, 0x02	; 2
    1434:	66 e0       	ldi	r22, 0x06	; 6
    1436:	41 e0       	ldi	r20, 0x01	; 1
    1438:	0e 94 1d 06 	call	0xc3a	; 0xc3a <DIO_voidSetPinDirection>
	// DIO_voidSetPinDirection(RW_PORT,RW_PIN,PIN_OUTPUT);
	DIO_voidSetPinDirection(EN_PORT, EN_PIN,PIN_OUTPUT);
    143c:	82 e0       	ldi	r24, 0x02	; 2
    143e:	67 e0       	ldi	r22, 0x07	; 7
    1440:	41 e0       	ldi	r20, 0x01	; 1
    1442:	0e 94 1d 06 	call	0xc3a	; 0xc3a <DIO_voidSetPinDirection>

	/* Set Data Port Direction as output */
	DIO_voidSetPinDirection(D4_PORT,D4_PIN,PIN_OUTPUT);
    1446:	83 e0       	ldi	r24, 0x03	; 3
    1448:	62 e0       	ldi	r22, 0x02	; 2
    144a:	41 e0       	ldi	r20, 0x01	; 1
    144c:	0e 94 1d 06 	call	0xc3a	; 0xc3a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D5_PORT,D5_PIN,PIN_OUTPUT);
    1450:	83 e0       	ldi	r24, 0x03	; 3
    1452:	63 e0       	ldi	r22, 0x03	; 3
    1454:	41 e0       	ldi	r20, 0x01	; 1
    1456:	0e 94 1d 06 	call	0xc3a	; 0xc3a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D6_PORT,D6_PIN,PIN_OUTPUT);
    145a:	83 e0       	ldi	r24, 0x03	; 3
    145c:	64 e0       	ldi	r22, 0x04	; 4
    145e:	41 e0       	ldi	r20, 0x01	; 1
    1460:	0e 94 1d 06 	call	0xc3a	; 0xc3a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D7_PORT,D7_PIN,PIN_OUTPUT);
    1464:	83 e0       	ldi	r24, 0x03	; 3
    1466:	65 e0       	ldi	r22, 0x05	; 5
    1468:	41 e0       	ldi	r20, 0x01	; 1
    146a:	0e 94 1d 06 	call	0xc3a	; 0xc3a <DIO_voidSetPinDirection>

	/* Return Home */
	LCD_voidWriteCommand(RETURN_HOME );
    146e:	82 e0       	ldi	r24, 0x02	; 2
    1470:	0e 94 be 0b 	call	0x177c	; 0x177c <LCD_voidWriteCommand>

	/* Configure as 4-bit data mode*/
	LCD_voidWriteCommand(FUNCTION_SET_4BIT_2LINES_5X7_DOTS);
    1474:	88 e2       	ldi	r24, 0x28	; 40
    1476:	0e 94 be 0b 	call	0x177c	; 0x177c <LCD_voidWriteCommand>

	/*Display ON OFF Control */
	LCD_voidWriteCommand(DISPLAY_ON_CURSOR_OFF);
    147a:	8c e0       	ldi	r24, 0x0C	; 12
    147c:	0e 94 be 0b 	call	0x177c	; 0x177c <LCD_voidWriteCommand>

	/* Clear Display */
	LCD_voidWriteCommand(DISPLAY_CLEAR);
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	0e 94 be 0b 	call	0x177c	; 0x177c <LCD_voidWriteCommand>

	/*ENTRY MODE*/
	LCD_voidWriteCommand(ENTRY_MODE_SET);
    1486:	86 e0       	ldi	r24, 0x06	; 6
    1488:	0e 94 be 0b 	call	0x177c	; 0x177c <LCD_voidWriteCommand>

}
    148c:	2e 96       	adiw	r28, 0x0e	; 14
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <LCD_voidWriteBitsToSend>:
/***********************************************************************************/

static void LCD_voidWriteBitsToSend(u8 copy_u8Byte)
{
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	cd b7       	in	r28, 0x3d	; 61
    14a4:	de b7       	in	r29, 0x3e	; 62
    14a6:	6d 97       	sbiw	r28, 0x1d	; 29
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	f8 94       	cli
    14ac:	de bf       	out	0x3e, r29	; 62
    14ae:	0f be       	out	0x3f, r0	; 63
    14b0:	cd bf       	out	0x3d, r28	; 61
    14b2:	8d 8f       	std	Y+29, r24	; 0x1d



	/*prepare 4 bits MSB to send */
	DIO_voidSetPinValue(D7_PORT,D7_PIN, GET_BIT(copy_u8Byte,PIN_7) );
    14b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14b6:	98 2f       	mov	r25, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	99 27       	eor	r25, r25
    14bc:	99 1f       	adc	r25, r25
    14be:	83 e0       	ldi	r24, 0x03	; 3
    14c0:	65 e0       	ldi	r22, 0x05	; 5
    14c2:	49 2f       	mov	r20, r25
    14c4:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D6_PORT,D6_PIN, GET_BIT(copy_u8Byte,PIN_6) );
    14c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14ca:	82 95       	swap	r24
    14cc:	86 95       	lsr	r24
    14ce:	86 95       	lsr	r24
    14d0:	83 70       	andi	r24, 0x03	; 3
    14d2:	98 2f       	mov	r25, r24
    14d4:	91 70       	andi	r25, 0x01	; 1
    14d6:	83 e0       	ldi	r24, 0x03	; 3
    14d8:	64 e0       	ldi	r22, 0x04	; 4
    14da:	49 2f       	mov	r20, r25
    14dc:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D5_PORT,D5_PIN, GET_BIT(copy_u8Byte,PIN_5) );
    14e0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14e2:	82 95       	swap	r24
    14e4:	86 95       	lsr	r24
    14e6:	87 70       	andi	r24, 0x07	; 7
    14e8:	98 2f       	mov	r25, r24
    14ea:	91 70       	andi	r25, 0x01	; 1
    14ec:	83 e0       	ldi	r24, 0x03	; 3
    14ee:	63 e0       	ldi	r22, 0x03	; 3
    14f0:	49 2f       	mov	r20, r25
    14f2:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D4_PORT,D4_PIN, GET_BIT(copy_u8Byte,PIN_4) );
    14f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14f8:	82 95       	swap	r24
    14fa:	8f 70       	andi	r24, 0x0F	; 15
    14fc:	98 2f       	mov	r25, r24
    14fe:	91 70       	andi	r25, 0x01	; 1
    1500:	83 e0       	ldi	r24, 0x03	; 3
    1502:	62 e0       	ldi	r22, 0x02	; 2
    1504:	49 2f       	mov	r20, r25
    1506:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_voidSetPinValue>

	/* open EN--> make it high --- then after 2m close EN -->make it low*/
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_HIGH);
    150a:	82 e0       	ldi	r24, 0x02	; 2
    150c:	67 e0       	ldi	r22, 0x07	; 7
    150e:	41 e0       	ldi	r20, 0x01	; 1
    1510:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_voidSetPinValue>
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	a0 e0       	ldi	r26, 0x00	; 0
    151a:	b0 e4       	ldi	r27, 0x40	; 64
    151c:	89 8f       	std	Y+25, r24	; 0x19
    151e:	9a 8f       	std	Y+26, r25	; 0x1a
    1520:	ab 8f       	std	Y+27, r26	; 0x1b
    1522:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1524:	69 8d       	ldd	r22, Y+25	; 0x19
    1526:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1528:	8b 8d       	ldd	r24, Y+27	; 0x1b
    152a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	4a e7       	ldi	r20, 0x7A	; 122
    1532:	53 e4       	ldi	r21, 0x43	; 67
    1534:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	8d 8b       	std	Y+21, r24	; 0x15
    153e:	9e 8b       	std	Y+22, r25	; 0x16
    1540:	af 8b       	std	Y+23, r26	; 0x17
    1542:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1544:	6d 89       	ldd	r22, Y+21	; 0x15
    1546:	7e 89       	ldd	r23, Y+22	; 0x16
    1548:	8f 89       	ldd	r24, Y+23	; 0x17
    154a:	98 8d       	ldd	r25, Y+24	; 0x18
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	40 e8       	ldi	r20, 0x80	; 128
    1552:	5f e3       	ldi	r21, 0x3F	; 63
    1554:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1558:	88 23       	and	r24, r24
    155a:	2c f4       	brge	.+10     	; 0x1566 <LCD_voidWriteBitsToSend+0xc8>
		__ticks = 1;
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	9c 8b       	std	Y+20, r25	; 0x14
    1562:	8b 8b       	std	Y+19, r24	; 0x13
    1564:	3f c0       	rjmp	.+126    	; 0x15e4 <LCD_voidWriteBitsToSend+0x146>
	else if (__tmp > 65535)
    1566:	6d 89       	ldd	r22, Y+21	; 0x15
    1568:	7e 89       	ldd	r23, Y+22	; 0x16
    156a:	8f 89       	ldd	r24, Y+23	; 0x17
    156c:	98 8d       	ldd	r25, Y+24	; 0x18
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	3f ef       	ldi	r19, 0xFF	; 255
    1572:	4f e7       	ldi	r20, 0x7F	; 127
    1574:	57 e4       	ldi	r21, 0x47	; 71
    1576:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    157a:	18 16       	cp	r1, r24
    157c:	4c f5       	brge	.+82     	; 0x15d0 <LCD_voidWriteBitsToSend+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    157e:	69 8d       	ldd	r22, Y+25	; 0x19
    1580:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1582:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1584:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	40 e2       	ldi	r20, 0x20	; 32
    158c:	51 e4       	ldi	r21, 0x41	; 65
    158e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	bc 01       	movw	r22, r24
    1598:	cd 01       	movw	r24, r26
    159a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	9c 8b       	std	Y+20, r25	; 0x14
    15a4:	8b 8b       	std	Y+19, r24	; 0x13
    15a6:	0f c0       	rjmp	.+30     	; 0x15c6 <LCD_voidWriteBitsToSend+0x128>
    15a8:	89 e1       	ldi	r24, 0x19	; 25
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	9a 8b       	std	Y+18, r25	; 0x12
    15ae:	89 8b       	std	Y+17, r24	; 0x11
    15b0:	89 89       	ldd	r24, Y+17	; 0x11
    15b2:	9a 89       	ldd	r25, Y+18	; 0x12
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	f1 f7       	brne	.-4      	; 0x15b4 <LCD_voidWriteBitsToSend+0x116>
    15b8:	9a 8b       	std	Y+18, r25	; 0x12
    15ba:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15bc:	8b 89       	ldd	r24, Y+19	; 0x13
    15be:	9c 89       	ldd	r25, Y+20	; 0x14
    15c0:	01 97       	sbiw	r24, 0x01	; 1
    15c2:	9c 8b       	std	Y+20, r25	; 0x14
    15c4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c6:	8b 89       	ldd	r24, Y+19	; 0x13
    15c8:	9c 89       	ldd	r25, Y+20	; 0x14
    15ca:	00 97       	sbiw	r24, 0x00	; 0
    15cc:	69 f7       	brne	.-38     	; 0x15a8 <LCD_voidWriteBitsToSend+0x10a>
    15ce:	14 c0       	rjmp	.+40     	; 0x15f8 <LCD_voidWriteBitsToSend+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d0:	6d 89       	ldd	r22, Y+21	; 0x15
    15d2:	7e 89       	ldd	r23, Y+22	; 0x16
    15d4:	8f 89       	ldd	r24, Y+23	; 0x17
    15d6:	98 8d       	ldd	r25, Y+24	; 0x18
    15d8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	9c 8b       	std	Y+20, r25	; 0x14
    15e2:	8b 8b       	std	Y+19, r24	; 0x13
    15e4:	8b 89       	ldd	r24, Y+19	; 0x13
    15e6:	9c 89       	ldd	r25, Y+20	; 0x14
    15e8:	98 8b       	std	Y+16, r25	; 0x10
    15ea:	8f 87       	std	Y+15, r24	; 0x0f
    15ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    15ee:	98 89       	ldd	r25, Y+16	; 0x10
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	f1 f7       	brne	.-4      	; 0x15f0 <LCD_voidWriteBitsToSend+0x152>
    15f4:	98 8b       	std	Y+16, r25	; 0x10
    15f6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_LOW);
    15f8:	82 e0       	ldi	r24, 0x02	; 2
    15fa:	67 e0       	ldi	r22, 0x07	; 7
    15fc:	40 e0       	ldi	r20, 0x00	; 0
    15fe:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_voidSetPinValue>


	/*prepare 4 bits LSB to send */
	DIO_voidSetPinValue(D7_PORT,D7_PIN, GET_BIT(copy_u8Byte,PIN_3) );
    1602:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1604:	86 95       	lsr	r24
    1606:	86 95       	lsr	r24
    1608:	86 95       	lsr	r24
    160a:	98 2f       	mov	r25, r24
    160c:	91 70       	andi	r25, 0x01	; 1
    160e:	83 e0       	ldi	r24, 0x03	; 3
    1610:	65 e0       	ldi	r22, 0x05	; 5
    1612:	49 2f       	mov	r20, r25
    1614:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D6_PORT,D6_PIN, GET_BIT(copy_u8Byte,PIN_2) );
    1618:	8d 8d       	ldd	r24, Y+29	; 0x1d
    161a:	86 95       	lsr	r24
    161c:	86 95       	lsr	r24
    161e:	98 2f       	mov	r25, r24
    1620:	91 70       	andi	r25, 0x01	; 1
    1622:	83 e0       	ldi	r24, 0x03	; 3
    1624:	64 e0       	ldi	r22, 0x04	; 4
    1626:	49 2f       	mov	r20, r25
    1628:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D5_PORT,D5_PIN, GET_BIT(copy_u8Byte,PIN_1) );
    162c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    162e:	86 95       	lsr	r24
    1630:	98 2f       	mov	r25, r24
    1632:	91 70       	andi	r25, 0x01	; 1
    1634:	83 e0       	ldi	r24, 0x03	; 3
    1636:	63 e0       	ldi	r22, 0x03	; 3
    1638:	49 2f       	mov	r20, r25
    163a:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D4_PORT,D4_PIN, GET_BIT(copy_u8Byte,PIN_0) );
    163e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1640:	98 2f       	mov	r25, r24
    1642:	91 70       	andi	r25, 0x01	; 1
    1644:	83 e0       	ldi	r24, 0x03	; 3
    1646:	62 e0       	ldi	r22, 0x02	; 2
    1648:	49 2f       	mov	r20, r25
    164a:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_voidSetPinValue>

	/* open EN--> make it high --- then after 2m -- close EN -->make it low*/
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_HIGH);
    164e:	82 e0       	ldi	r24, 0x02	; 2
    1650:	67 e0       	ldi	r22, 0x07	; 7
    1652:	41 e0       	ldi	r20, 0x01	; 1
    1654:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_voidSetPinValue>
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	a0 e0       	ldi	r26, 0x00	; 0
    165e:	b0 e4       	ldi	r27, 0x40	; 64
    1660:	8b 87       	std	Y+11, r24	; 0x0b
    1662:	9c 87       	std	Y+12, r25	; 0x0c
    1664:	ad 87       	std	Y+13, r26	; 0x0d
    1666:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1668:	6b 85       	ldd	r22, Y+11	; 0x0b
    166a:	7c 85       	ldd	r23, Y+12	; 0x0c
    166c:	8d 85       	ldd	r24, Y+13	; 0x0d
    166e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	4a e7       	ldi	r20, 0x7A	; 122
    1676:	53 e4       	ldi	r21, 0x43	; 67
    1678:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	8f 83       	std	Y+7, r24	; 0x07
    1682:	98 87       	std	Y+8, r25	; 0x08
    1684:	a9 87       	std	Y+9, r26	; 0x09
    1686:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1688:	6f 81       	ldd	r22, Y+7	; 0x07
    168a:	78 85       	ldd	r23, Y+8	; 0x08
    168c:	89 85       	ldd	r24, Y+9	; 0x09
    168e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1690:	20 e0       	ldi	r18, 0x00	; 0
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	40 e8       	ldi	r20, 0x80	; 128
    1696:	5f e3       	ldi	r21, 0x3F	; 63
    1698:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    169c:	88 23       	and	r24, r24
    169e:	2c f4       	brge	.+10     	; 0x16aa <LCD_voidWriteBitsToSend+0x20c>
		__ticks = 1;
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	9e 83       	std	Y+6, r25	; 0x06
    16a6:	8d 83       	std	Y+5, r24	; 0x05
    16a8:	3f c0       	rjmp	.+126    	; 0x1728 <LCD_voidWriteBitsToSend+0x28a>
	else if (__tmp > 65535)
    16aa:	6f 81       	ldd	r22, Y+7	; 0x07
    16ac:	78 85       	ldd	r23, Y+8	; 0x08
    16ae:	89 85       	ldd	r24, Y+9	; 0x09
    16b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	3f ef       	ldi	r19, 0xFF	; 255
    16b6:	4f e7       	ldi	r20, 0x7F	; 127
    16b8:	57 e4       	ldi	r21, 0x47	; 71
    16ba:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16be:	18 16       	cp	r1, r24
    16c0:	4c f5       	brge	.+82     	; 0x1714 <LCD_voidWriteBitsToSend+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    16c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    16c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	40 e2       	ldi	r20, 0x20	; 32
    16d0:	51 e4       	ldi	r21, 0x41	; 65
    16d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16d6:	dc 01       	movw	r26, r24
    16d8:	cb 01       	movw	r24, r22
    16da:	bc 01       	movw	r22, r24
    16dc:	cd 01       	movw	r24, r26
    16de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16e2:	dc 01       	movw	r26, r24
    16e4:	cb 01       	movw	r24, r22
    16e6:	9e 83       	std	Y+6, r25	; 0x06
    16e8:	8d 83       	std	Y+5, r24	; 0x05
    16ea:	0f c0       	rjmp	.+30     	; 0x170a <LCD_voidWriteBitsToSend+0x26c>
    16ec:	89 e1       	ldi	r24, 0x19	; 25
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	9c 83       	std	Y+4, r25	; 0x04
    16f2:	8b 83       	std	Y+3, r24	; 0x03
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	9c 81       	ldd	r25, Y+4	; 0x04
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	f1 f7       	brne	.-4      	; 0x16f8 <LCD_voidWriteBitsToSend+0x25a>
    16fc:	9c 83       	std	Y+4, r25	; 0x04
    16fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1700:	8d 81       	ldd	r24, Y+5	; 0x05
    1702:	9e 81       	ldd	r25, Y+6	; 0x06
    1704:	01 97       	sbiw	r24, 0x01	; 1
    1706:	9e 83       	std	Y+6, r25	; 0x06
    1708:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    170a:	8d 81       	ldd	r24, Y+5	; 0x05
    170c:	9e 81       	ldd	r25, Y+6	; 0x06
    170e:	00 97       	sbiw	r24, 0x00	; 0
    1710:	69 f7       	brne	.-38     	; 0x16ec <LCD_voidWriteBitsToSend+0x24e>
    1712:	14 c0       	rjmp	.+40     	; 0x173c <LCD_voidWriteBitsToSend+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1714:	6f 81       	ldd	r22, Y+7	; 0x07
    1716:	78 85       	ldd	r23, Y+8	; 0x08
    1718:	89 85       	ldd	r24, Y+9	; 0x09
    171a:	9a 85       	ldd	r25, Y+10	; 0x0a
    171c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1720:	dc 01       	movw	r26, r24
    1722:	cb 01       	movw	r24, r22
    1724:	9e 83       	std	Y+6, r25	; 0x06
    1726:	8d 83       	std	Y+5, r24	; 0x05
    1728:	8d 81       	ldd	r24, Y+5	; 0x05
    172a:	9e 81       	ldd	r25, Y+6	; 0x06
    172c:	9a 83       	std	Y+2, r25	; 0x02
    172e:	89 83       	std	Y+1, r24	; 0x01
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	9a 81       	ldd	r25, Y+2	; 0x02
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	f1 f7       	brne	.-4      	; 0x1734 <LCD_voidWriteBitsToSend+0x296>
    1738:	9a 83       	std	Y+2, r25	; 0x02
    173a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_LOW);
    173c:	82 e0       	ldi	r24, 0x02	; 2
    173e:	67 e0       	ldi	r22, 0x07	; 7
    1740:	40 e0       	ldi	r20, 0x00	; 0
    1742:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_voidSetPinValue>




}
    1746:	6d 96       	adiw	r28, 0x1d	; 29
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	f8 94       	cli
    174c:	de bf       	out	0x3e, r29	; 62
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	cd bf       	out	0x3d, r28	; 61
    1752:	cf 91       	pop	r28
    1754:	df 91       	pop	r29
    1756:	08 95       	ret

00001758 <LCD_voidWriteData>:



/***********************************************************************************/
void LCD_voidWriteData(u8 copy_u8data)
{
    1758:	df 93       	push	r29
    175a:	cf 93       	push	r28
    175c:	0f 92       	push	r0
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
    1762:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS to HIGH */
	DIO_voidSetPinValue(RS_PORT,RS_PIN,PIN_HIGH);
    1764:	82 e0       	ldi	r24, 0x02	; 2
    1766:	66 e0       	ldi	r22, 0x06	; 6
    1768:	41 e0       	ldi	r20, 0x01	; 1
    176a:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_voidSetPinValue>

	LCD_voidWriteBitsToSend(copy_u8data);
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	0e 94 4f 0a 	call	0x149e	; 0x149e <LCD_voidWriteBitsToSend>
}
    1774:	0f 90       	pop	r0
    1776:	cf 91       	pop	r28
    1778:	df 91       	pop	r29
    177a:	08 95       	ret

0000177c <LCD_voidWriteCommand>:


/***********************************************************************************/

void LCD_voidWriteCommand(u8 copy_u8Command)
{
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	0f 92       	push	r0
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
    1786:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS to low */
	DIO_voidSetPinValue(RS_PORT,RS_PIN,PIN_LOW);
    1788:	82 e0       	ldi	r24, 0x02	; 2
    178a:	66 e0       	ldi	r22, 0x06	; 6
    178c:	40 e0       	ldi	r20, 0x00	; 0
    178e:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_voidSetPinValue>


	LCD_voidWriteBitsToSend(copy_u8Command);
    1792:	89 81       	ldd	r24, Y+1	; 0x01
    1794:	0e 94 4f 0a 	call	0x149e	; 0x149e <LCD_voidWriteBitsToSend>
}
    1798:	0f 90       	pop	r0
    179a:	cf 91       	pop	r28
    179c:	df 91       	pop	r29
    179e:	08 95       	ret

000017a0 <LCD_voidWriteString>:
/***********************************************************************************/



void LCD_voidWriteString(u8 * copy_str)
{
    17a0:	df 93       	push	r29
    17a2:	cf 93       	push	r28
    17a4:	00 d0       	rcall	.+0      	; 0x17a6 <LCD_voidWriteString+0x6>
    17a6:	00 d0       	rcall	.+0      	; 0x17a8 <LCD_voidWriteString+0x8>
    17a8:	cd b7       	in	r28, 0x3d	; 61
    17aa:	de b7       	in	r29, 0x3e	; 62
    17ac:	9c 83       	std	Y+4, r25	; 0x04
    17ae:	8b 83       	std	Y+3, r24	; 0x03

	u16 i= ZERO;
    17b0:	1a 82       	std	Y+2, r1	; 0x02
    17b2:	19 82       	std	Y+1, r1	; 0x01
    17b4:	0f c0       	rjmp	.+30     	; 0x17d4 <LCD_voidWriteString+0x34>
	while(copy_str[i] != '\0')
	{
		LCD_voidWriteData(copy_str[i]);
    17b6:	2b 81       	ldd	r18, Y+3	; 0x03
    17b8:	3c 81       	ldd	r19, Y+4	; 0x04
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	9a 81       	ldd	r25, Y+2	; 0x02
    17be:	f9 01       	movw	r30, r18
    17c0:	e8 0f       	add	r30, r24
    17c2:	f9 1f       	adc	r31, r25
    17c4:	80 81       	ld	r24, Z
    17c6:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LCD_voidWriteData>
		i++;
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	9a 81       	ldd	r25, Y+2	; 0x02
    17ce:	01 96       	adiw	r24, 0x01	; 1
    17d0:	9a 83       	std	Y+2, r25	; 0x02
    17d2:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidWriteString(u8 * copy_str)
{

	u16 i= ZERO;
	while(copy_str[i] != '\0')
    17d4:	2b 81       	ldd	r18, Y+3	; 0x03
    17d6:	3c 81       	ldd	r19, Y+4	; 0x04
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	9a 81       	ldd	r25, Y+2	; 0x02
    17dc:	f9 01       	movw	r30, r18
    17de:	e8 0f       	add	r30, r24
    17e0:	f9 1f       	adc	r31, r25
    17e2:	80 81       	ld	r24, Z
    17e4:	88 23       	and	r24, r24
    17e6:	39 f7       	brne	.-50     	; 0x17b6 <LCD_voidWriteString+0x16>
	{
		LCD_voidWriteData(copy_str[i]);
		i++;
	}
}
    17e8:	0f 90       	pop	r0
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	08 95       	ret

000017f6 <LCD_voidGoToXY>:


/***********************************************************************************/
void LCD_voidGoToXY(u8 copy_u8row,u8 copy_u8col)
{
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
    17fe:	27 97       	sbiw	r28, 0x07	; 7
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	f8 94       	cli
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	cd bf       	out	0x3d, r28	; 61
    180a:	8e 83       	std	Y+6, r24	; 0x06
    180c:	6f 83       	std	Y+7, r22	; 0x07
	 * 0x40 --> address row 1
	 * 0x14 --> address row 2
	 * 0x54 --> address row 3
	 * copy_u8col --> col num
	 * */
	u8 rows_address[4]={0x00,0x40,0x14,0x54};
    180e:	1a 82       	std	Y+2, r1	; 0x02
    1810:	80 e4       	ldi	r24, 0x40	; 64
    1812:	8b 83       	std	Y+3, r24	; 0x03
    1814:	84 e1       	ldi	r24, 0x14	; 20
    1816:	8c 83       	std	Y+4, r24	; 0x04
    1818:	84 e5       	ldi	r24, 0x54	; 84
    181a:	8d 83       	std	Y+5, r24	; 0x05

	u8 local_address=( rows_address[copy_u8row]  + copy_u8col ) + SET_DDRAM_ADDRESS ;
    181c:	8e 81       	ldd	r24, Y+6	; 0x06
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	ce 01       	movw	r24, r28
    1824:	02 96       	adiw	r24, 0x02	; 2
    1826:	fc 01       	movw	r30, r24
    1828:	e2 0f       	add	r30, r18
    182a:	f3 1f       	adc	r31, r19
    182c:	90 81       	ld	r25, Z
    182e:	8f 81       	ldd	r24, Y+7	; 0x07
    1830:	89 0f       	add	r24, r25
    1832:	80 58       	subi	r24, 0x80	; 128
    1834:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidWriteCommand(local_address) ;
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	0e 94 be 0b 	call	0x177c	; 0x177c <LCD_voidWriteCommand>

}
    183c:	27 96       	adiw	r28, 0x07	; 7
    183e:	0f b6       	in	r0, 0x3f	; 63
    1840:	f8 94       	cli
    1842:	de bf       	out	0x3e, r29	; 62
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	cd bf       	out	0x3d, r28	; 61
    1848:	cf 91       	pop	r28
    184a:	df 91       	pop	r29
    184c:	08 95       	ret

0000184e <LCD_voidClear>:
}
 */
/***********************************************************************************/

void LCD_voidClear(void)
{
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
	LCD_voidWriteCommand( DISPLAY_CLEAR);
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	0e 94 be 0b 	call	0x177c	; 0x177c <LCD_voidWriteCommand>

}
    185c:	cf 91       	pop	r28
    185e:	df 91       	pop	r29
    1860:	08 95       	ret

00001862 <LCD_voidWriteNumber>:

/***********************************************************************************/

void LCD_voidWriteNumber( u32 Copy_u8num )

{
    1862:	0f 93       	push	r16
    1864:	1f 93       	push	r17
    1866:	df 93       	push	r29
    1868:	cf 93       	push	r28
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	63 97       	sbiw	r28, 0x13	; 19
    1870:	0f b6       	in	r0, 0x3f	; 63
    1872:	f8 94       	cli
    1874:	de bf       	out	0x3e, r29	; 62
    1876:	0f be       	out	0x3f, r0	; 63
    1878:	cd bf       	out	0x3d, r28	; 61
    187a:	68 8b       	std	Y+16, r22	; 0x10
    187c:	79 8b       	std	Y+17, r23	; 0x11
    187e:	8a 8b       	std	Y+18, r24	; 0x12
    1880:	9b 8b       	std	Y+19, r25	; 0x13
	u32 LOCAL_NUMBER=Copy_u8num ;
    1882:	88 89       	ldd	r24, Y+16	; 0x10
    1884:	99 89       	ldd	r25, Y+17	; 0x11
    1886:	aa 89       	ldd	r26, Y+18	; 0x12
    1888:	bb 89       	ldd	r27, Y+19	; 0x13
    188a:	8a 83       	std	Y+2, r24	; 0x02
    188c:	9b 83       	std	Y+3, r25	; 0x03
    188e:	ac 83       	std	Y+4, r26	; 0x04
    1890:	bd 83       	std	Y+5, r27	; 0x05
	u8 LOCAL_ARR[10]   ;
	u8 i=ZERO ;
    1892:	19 82       	std	Y+1, r1	; 0x01


	do
	{
		LOCAL_ARR[i]= ( (LOCAL_NUMBER%10)+'0' );
    1894:	89 81       	ldd	r24, Y+1	; 0x01
    1896:	08 2f       	mov	r16, r24
    1898:	10 e0       	ldi	r17, 0x00	; 0
    189a:	8a 81       	ldd	r24, Y+2	; 0x02
    189c:	9b 81       	ldd	r25, Y+3	; 0x03
    189e:	ac 81       	ldd	r26, Y+4	; 0x04
    18a0:	bd 81       	ldd	r27, Y+5	; 0x05
    18a2:	2a e0       	ldi	r18, 0x0A	; 10
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	40 e0       	ldi	r20, 0x00	; 0
    18a8:	50 e0       	ldi	r21, 0x00	; 0
    18aa:	bc 01       	movw	r22, r24
    18ac:	cd 01       	movw	r24, r26
    18ae:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <__udivmodsi4>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	28 2f       	mov	r18, r24
    18b8:	20 5d       	subi	r18, 0xD0	; 208
    18ba:	ce 01       	movw	r24, r28
    18bc:	06 96       	adiw	r24, 0x06	; 6
    18be:	fc 01       	movw	r30, r24
    18c0:	e0 0f       	add	r30, r16
    18c2:	f1 1f       	adc	r31, r17
    18c4:	20 83       	st	Z, r18
		LOCAL_NUMBER=LOCAL_NUMBER/10 ;
    18c6:	8a 81       	ldd	r24, Y+2	; 0x02
    18c8:	9b 81       	ldd	r25, Y+3	; 0x03
    18ca:	ac 81       	ldd	r26, Y+4	; 0x04
    18cc:	bd 81       	ldd	r27, Y+5	; 0x05
    18ce:	2a e0       	ldi	r18, 0x0A	; 10
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	40 e0       	ldi	r20, 0x00	; 0
    18d4:	50 e0       	ldi	r21, 0x00	; 0
    18d6:	bc 01       	movw	r22, r24
    18d8:	cd 01       	movw	r24, r26
    18da:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <__udivmodsi4>
    18de:	da 01       	movw	r26, r20
    18e0:	c9 01       	movw	r24, r18
    18e2:	8a 83       	std	Y+2, r24	; 0x02
    18e4:	9b 83       	std	Y+3, r25	; 0x03
    18e6:	ac 83       	std	Y+4, r26	; 0x04
    18e8:	bd 83       	std	Y+5, r27	; 0x05
		i++ ;
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	8f 5f       	subi	r24, 0xFF	; 255
    18ee:	89 83       	std	Y+1, r24	; 0x01
	}
	while(LOCAL_NUMBER!=ZERO);
    18f0:	8a 81       	ldd	r24, Y+2	; 0x02
    18f2:	9b 81       	ldd	r25, Y+3	; 0x03
    18f4:	ac 81       	ldd	r26, Y+4	; 0x04
    18f6:	bd 81       	ldd	r27, Y+5	; 0x05
    18f8:	00 97       	sbiw	r24, 0x00	; 0
    18fa:	a1 05       	cpc	r26, r1
    18fc:	b1 05       	cpc	r27, r1
    18fe:	51 f6       	brne	.-108    	; 0x1894 <LCD_voidWriteNumber+0x32>
    1900:	11 c0       	rjmp	.+34     	; 0x1924 <LCD_voidWriteNumber+0xc2>


	for(;i>0;i--)
	{
		LCD_voidWriteData(LOCAL_ARR[i-ONE]);
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	88 2f       	mov	r24, r24
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	9c 01       	movw	r18, r24
    190a:	21 50       	subi	r18, 0x01	; 1
    190c:	30 40       	sbci	r19, 0x00	; 0
    190e:	ce 01       	movw	r24, r28
    1910:	06 96       	adiw	r24, 0x06	; 6
    1912:	fc 01       	movw	r30, r24
    1914:	e2 0f       	add	r30, r18
    1916:	f3 1f       	adc	r31, r19
    1918:	80 81       	ld	r24, Z
    191a:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LCD_voidWriteData>
		i++ ;
	}
	while(LOCAL_NUMBER!=ZERO);


	for(;i>0;i--)
    191e:	89 81       	ldd	r24, Y+1	; 0x01
    1920:	81 50       	subi	r24, 0x01	; 1
    1922:	89 83       	std	Y+1, r24	; 0x01
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	88 23       	and	r24, r24
    1928:	61 f7       	brne	.-40     	; 0x1902 <LCD_voidWriteNumber+0xa0>
		LCD_voidWriteData(LOCAL_ARR[i-ONE]);
	}



}
    192a:	63 96       	adiw	r28, 0x13	; 19
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	de bf       	out	0x3e, r29	; 62
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	cd bf       	out	0x3d, r28	; 61
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	1f 91       	pop	r17
    193c:	0f 91       	pop	r16
    193e:	08 95       	ret

00001940 <LCD_voidWriteSpecialCharToCGRAM>:

/***********************************************************************************/

void LCD_voidWriteSpecialCharToCGRAM(u8 *copy_u8data , u8 copy_u8ByteNum )

{
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	00 d0       	rcall	.+0      	; 0x1946 <LCD_voidWriteSpecialCharToCGRAM+0x6>
    1946:	00 d0       	rcall	.+0      	; 0x1948 <LCD_voidWriteSpecialCharToCGRAM+0x8>
    1948:	0f 92       	push	r0
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	9c 83       	std	Y+4, r25	; 0x04
    1950:	8b 83       	std	Y+3, r24	; 0x03
    1952:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8CGramAddrss ;
	u8 counter=ZERO ;
    1954:	19 82       	std	Y+1, r1	; 0x01

	Local_u8CGramAddrss = ( (copy_u8ByteNum * EIGHT)+SET_CGRAM_ADDRESS ) ;
    1956:	8d 81       	ldd	r24, Y+5	; 0x05
    1958:	88 2f       	mov	r24, r24
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	08 96       	adiw	r24, 0x08	; 8
    195e:	88 0f       	add	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	88 0f       	add	r24, r24
    1968:	99 1f       	adc	r25, r25
    196a:	8a 83       	std	Y+2, r24	; 0x02

	LCD_voidWriteCommand( Local_u8CGramAddrss  ) ;
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	0e 94 be 0b 	call	0x177c	; 0x177c <LCD_voidWriteCommand>


	for(counter=ZERO;counter<EIGHT;counter++)
    1972:	19 82       	std	Y+1, r1	; 0x01
    1974:	0e c0       	rjmp	.+28     	; 0x1992 <LCD_voidWriteSpecialCharToCGRAM+0x52>
	{
		LCD_voidWriteData(copy_u8data[counter]);
    1976:	89 81       	ldd	r24, Y+1	; 0x01
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	9c 81       	ldd	r25, Y+4	; 0x04
    1980:	fc 01       	movw	r30, r24
    1982:	e2 0f       	add	r30, r18
    1984:	f3 1f       	adc	r31, r19
    1986:	80 81       	ld	r24, Z
    1988:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LCD_voidWriteData>
	Local_u8CGramAddrss = ( (copy_u8ByteNum * EIGHT)+SET_CGRAM_ADDRESS ) ;

	LCD_voidWriteCommand( Local_u8CGramAddrss  ) ;


	for(counter=ZERO;counter<EIGHT;counter++)
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	8f 5f       	subi	r24, 0xFF	; 255
    1990:	89 83       	std	Y+1, r24	; 0x01
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	88 30       	cpi	r24, 0x08	; 8
    1996:	78 f3       	brcs	.-34     	; 0x1976 <LCD_voidWriteSpecialCharToCGRAM+0x36>
	{
		LCD_voidWriteData(copy_u8data[counter]);
	}

}
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	cf 91       	pop	r28
    19a4:	df 91       	pop	r29
    19a6:	08 95       	ret

000019a8 <LCD_voidDisplaySpecialChar>:

/***********************************************************************************/

void LCD_voidDisplaySpecialChar(u8 copy_u8ByteNum )
{
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	0f 92       	push	r0
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidWriteData(copy_u8ByteNum);
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
    19b6:	0e 94 ac 0b 	call	0x1758	; 0x1758 <LCD_voidWriteData>

}
    19ba:	0f 90       	pop	r0
    19bc:	cf 91       	pop	r28
    19be:	df 91       	pop	r29
    19c0:	08 95       	ret

000019c2 <M_TWI_void_Init>:


/*------------------------------------------------------------------------*/

void M_TWI_void_Init(void)
{
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62

	//TWAR_REG = (SLAVE_ADDRESS << 1) | GENERAL_CALL;

#elif TWI_MODE   ==   TWI_SLAVE_MODE
	/* set SLAVE_ADDRESS and if GENERAL_CALL on  */
	TWAR_REG = (SLAVE_ADDRESS << 1) | GENERAL_CALL;
    19ca:	e2 e2       	ldi	r30, 0x22	; 34
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	83 e0       	ldi	r24, 0x03	; 3
    19d0:	80 83       	st	Z, r24

#endif


	/*EN ACK*/
	SET_BIT(TWCR_REG,TWCR_TWEA);
    19d2:	a6 e5       	ldi	r26, 0x56	; 86
    19d4:	b0 e0       	ldi	r27, 0x00	; 0
    19d6:	e6 e5       	ldi	r30, 0x56	; 86
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	80 81       	ld	r24, Z
    19dc:	80 64       	ori	r24, 0x40	; 64
    19de:	8c 93       	st	X, r24

	/*EN TWI */
	SET_BIT(TWCR_REG,TWCR_TWEN);
    19e0:	a6 e5       	ldi	r26, 0x56	; 86
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e6 e5       	ldi	r30, 0x56	; 86
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	84 60       	ori	r24, 0x04	; 4
    19ec:	8c 93       	st	X, r24
}
    19ee:	cf 91       	pop	r28
    19f0:	df 91       	pop	r29
    19f2:	08 95       	ret

000019f4 <M_TWI_u8_StartCondition>:
/*------------------------------------------------------------------------*/



TWI_ERROR_STATUS M_TWI_u8_StartCondition(void)
{
    19f4:	df 93       	push	r29
    19f6:	cf 93       	push	r28
    19f8:	0f 92       	push	r0
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
	TWI_ERROR_STATUS local_error =NO_ERROR ;
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	89 83       	std	Y+1, r24	; 0x01


	/* Start Condition */

	SET_BIT(TWCR_REG,TWCR_TWSTA);
    1a02:	a6 e5       	ldi	r26, 0x56	; 86
    1a04:	b0 e0       	ldi	r27, 0x00	; 0
    1a06:	e6 e5       	ldi	r30, 0x56	; 86
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	80 81       	ld	r24, Z
    1a0c:	80 62       	ori	r24, 0x20	; 32
    1a0e:	8c 93       	st	X, r24

	/* to clear the flag */
	SET_BIT(TWCR_REG,TWCR_TWINT);
    1a10:	a6 e5       	ldi	r26, 0x56	; 86
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	e6 e5       	ldi	r30, 0x56	; 86
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	80 68       	ori	r24, 0x80	; 128
    1a1c:	8c 93       	st	X, r24


	while(GET_BIT(TWCR_REG,TWCR_TWINT) == 0);
    1a1e:	e6 e5       	ldi	r30, 0x56	; 86
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	88 23       	and	r24, r24
    1a26:	dc f7       	brge	.-10     	; 0x1a1e <M_TWI_u8_StartCondition+0x2a>

	if((TWSR_REG & 0xF8) != TWI_START_COND_ACK)
    1a28:	e1 e2       	ldi	r30, 0x21	; 33
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	88 2f       	mov	r24, r24
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	88 7f       	andi	r24, 0xF8	; 248
    1a34:	90 70       	andi	r25, 0x00	; 0
    1a36:	88 30       	cpi	r24, 0x08	; 8
    1a38:	91 05       	cpc	r25, r1
    1a3a:	11 f0       	breq	.+4      	; 0x1a40 <M_TWI_u8_StartCondition+0x4c>
	{
		local_error=START_ERROR;
    1a3c:	82 e0       	ldi	r24, 0x02	; 2
    1a3e:	89 83       	std	Y+1, r24	; 0x01
	{

	}


	return  local_error ;
    1a40:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a42:	0f 90       	pop	r0
    1a44:	cf 91       	pop	r28
    1a46:	df 91       	pop	r29
    1a48:	08 95       	ret

00001a4a <M_TWI_void_StopCondition>:

/***************************************************************************/

void M_TWI_void_StopCondition(void)

{
    1a4a:	df 93       	push	r29
    1a4c:	cf 93       	push	r28
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62

	/* Stop Condition */
	SET_BIT(TWCR_REG,TWCR_TWSTO);
    1a52:	a6 e5       	ldi	r26, 0x56	; 86
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e6 e5       	ldi	r30, 0x56	; 86
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	80 61       	ori	r24, 0x10	; 16
    1a5e:	8c 93       	st	X, r24

	/* to clear the flag */
	SET_BIT(TWCR_REG,TWCR_TWINT);
    1a60:	a6 e5       	ldi	r26, 0x56	; 86
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e6 e5       	ldi	r30, 0x56	; 86
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	80 68       	ori	r24, 0x80	; 128
    1a6c:	8c 93       	st	X, r24

}
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	08 95       	ret

00001a74 <M_TWI_u8_RepeatedStart>:

/***************************************************************************/

TWI_ERROR_STATUS M_TWI_u8_RepeatedStart(void)
{
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	0f 92       	push	r0
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
	TWI_ERROR_STATUS local_error =NO_ERROR ;
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	89 83       	std	Y+1, r24	; 0x01


	/* Start Condition */
	SET_BIT(TWCR_REG,TWCR_TWSTA);
    1a82:	a6 e5       	ldi	r26, 0x56	; 86
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	e6 e5       	ldi	r30, 0x56	; 86
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	80 81       	ld	r24, Z
    1a8c:	80 62       	ori	r24, 0x20	; 32
    1a8e:	8c 93       	st	X, r24


	/* to clear the flag */
	SET_BIT(TWCR_REG,TWCR_TWINT);
    1a90:	a6 e5       	ldi	r26, 0x56	; 86
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e6 e5       	ldi	r30, 0x56	; 86
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	80 68       	ori	r24, 0x80	; 128
    1a9c:	8c 93       	st	X, r24


	while(GET_BIT(TWCR_REG,TWCR_TWINT) == 0);
    1a9e:	e6 e5       	ldi	r30, 0x56	; 86
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	88 23       	and	r24, r24
    1aa6:	dc f7       	brge	.-10     	; 0x1a9e <M_TWI_u8_RepeatedStart+0x2a>


	if((TWSR_REG & 0xF8) != TWI_REPEATED_START_COND_ACK)
    1aa8:	e1 e2       	ldi	r30, 0x21	; 33
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	88 2f       	mov	r24, r24
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	88 7f       	andi	r24, 0xF8	; 248
    1ab4:	90 70       	andi	r25, 0x00	; 0
    1ab6:	80 31       	cpi	r24, 0x10	; 16
    1ab8:	91 05       	cpc	r25, r1
    1aba:	11 f0       	breq	.+4      	; 0x1ac0 <M_TWI_u8_RepeatedStart+0x4c>
	{
		local_error=REPEATED_STSRT_ERROR;
    1abc:	83 e0       	ldi	r24, 0x03	; 3
    1abe:	89 83       	std	Y+1, r24	; 0x01
	{

	}


	return  local_error ;
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ac2:	0f 90       	pop	r0
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	08 95       	ret

00001aca <M_TWI_u8_SendSlaveAddressWrite>:
/***************************************************************************/



TWI_ERROR_STATUS M_TWI_u8_SendSlaveAddressWrite(u8 Copy_u8Address)
{
    1aca:	df 93       	push	r29
    1acc:	cf 93       	push	r28
    1ace:	00 d0       	rcall	.+0      	; 0x1ad0 <M_TWI_u8_SendSlaveAddressWrite+0x6>
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
    1ad4:	8a 83       	std	Y+2, r24	; 0x02

	TWI_ERROR_STATUS local_error = NO_ERROR ;
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	89 83       	std	Y+1, r24	; 0x01


	TWDR_REG = (Copy_u8Address << 1);
    1ada:	e3 e2       	ldi	r30, 0x23	; 35
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	88 0f       	add	r24, r24
    1ae2:	80 83       	st	Z, r24
	CLR_BIT(TWDR_REG,0);
    1ae4:	a3 e2       	ldi	r26, 0x23	; 35
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	e3 e2       	ldi	r30, 0x23	; 35
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	8e 7f       	andi	r24, 0xFE	; 254
    1af0:	8c 93       	st	X, r24



	/* Clear Start condition */
	CLR_BIT(TWCR_REG,TWCR_TWSTA);
    1af2:	a6 e5       	ldi	r26, 0x56	; 86
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	e6 e5       	ldi	r30, 0x56	; 86
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	8f 7d       	andi	r24, 0xDF	; 223
    1afe:	8c 93       	st	X, r24

	/* to clear the flag */
	SET_BIT(TWCR_REG,TWCR_TWINT);
    1b00:	a6 e5       	ldi	r26, 0x56	; 86
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e6 e5       	ldi	r30, 0x56	; 86
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	80 68       	ori	r24, 0x80	; 128
    1b0c:	8c 93       	st	X, r24

	while(GET_BIT(TWCR_REG,TWCR_TWINT) == 0);
    1b0e:	e6 e5       	ldi	r30, 0x56	; 86
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	80 81       	ld	r24, Z
    1b14:	88 23       	and	r24, r24
    1b16:	dc f7       	brge	.-10     	; 0x1b0e <M_TWI_u8_SendSlaveAddressWrite+0x44>


	if((TWSR_REG & 0xF8) != TWI_SEND_SLAVE_ADD_WRITE_ACK)
    1b18:	e1 e2       	ldi	r30, 0x21	; 33
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	80 81       	ld	r24, Z
    1b1e:	88 2f       	mov	r24, r24
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	88 7f       	andi	r24, 0xF8	; 248
    1b24:	90 70       	andi	r25, 0x00	; 0
    1b26:	88 31       	cpi	r24, 0x18	; 24
    1b28:	91 05       	cpc	r25, r1
    1b2a:	11 f0       	breq	.+4      	; 0x1b30 <M_TWI_u8_SendSlaveAddressWrite+0x66>
	{
		local_error=SLAVE_ADDRESS_WRITE_ERROR;
    1b2c:	84 e0       	ldi	r24, 0x04	; 4
    1b2e:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	return  local_error ;
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	cf 91       	pop	r28
    1b38:	df 91       	pop	r29
    1b3a:	08 95       	ret

00001b3c <M_TWI_u8_SendSlaveAddressRead>:

/***************************************************************************/

TWI_ERROR_STATUS M_TWI_u8_SendSlaveAddressRead(u8 Copy_u8Address)
{
    1b3c:	df 93       	push	r29
    1b3e:	cf 93       	push	r28
    1b40:	00 d0       	rcall	.+0      	; 0x1b42 <M_TWI_u8_SendSlaveAddressRead+0x6>
    1b42:	cd b7       	in	r28, 0x3d	; 61
    1b44:	de b7       	in	r29, 0x3e	; 62
    1b46:	8a 83       	std	Y+2, r24	; 0x02

	TWI_ERROR_STATUS local_error =NO_ERROR ;
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	89 83       	std	Y+1, r24	; 0x01


	TWDR_REG = ( (Copy_u8Address << 1) | 1);
    1b4c:	e3 e2       	ldi	r30, 0x23	; 35
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	8a 81       	ldd	r24, Y+2	; 0x02
    1b52:	88 2f       	mov	r24, r24
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	88 0f       	add	r24, r24
    1b58:	99 1f       	adc	r25, r25
    1b5a:	81 60       	ori	r24, 0x01	; 1
    1b5c:	80 83       	st	Z, r24

	/* Clear Start condition */
	CLR_BIT(TWCR_REG,TWCR_TWSTA);
    1b5e:	a6 e5       	ldi	r26, 0x56	; 86
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	e6 e5       	ldi	r30, 0x56	; 86
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	8f 7d       	andi	r24, 0xDF	; 223
    1b6a:	8c 93       	st	X, r24


	SET_BIT(TWCR_REG,TWCR_TWINT);   /* to clear the flag */
    1b6c:	a6 e5       	ldi	r26, 0x56	; 86
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	e6 e5       	ldi	r30, 0x56	; 86
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	80 68       	ori	r24, 0x80	; 128
    1b78:	8c 93       	st	X, r24


	while(GET_BIT(TWCR_REG,TWCR_TWINT) == 0);
    1b7a:	e6 e5       	ldi	r30, 0x56	; 86
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	88 23       	and	r24, r24
    1b82:	dc f7       	brge	.-10     	; 0x1b7a <M_TWI_u8_SendSlaveAddressRead+0x3e>

	if((TWSR_REG & 0xF8) != TWI_SEND_SLAVE_ADD_READ_ACK)
    1b84:	e1 e2       	ldi	r30, 0x21	; 33
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	88 2f       	mov	r24, r24
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	88 7f       	andi	r24, 0xF8	; 248
    1b90:	90 70       	andi	r25, 0x00	; 0
    1b92:	80 34       	cpi	r24, 0x40	; 64
    1b94:	91 05       	cpc	r25, r1
    1b96:	11 f0       	breq	.+4      	; 0x1b9c <M_TWI_u8_SendSlaveAddressRead+0x60>
	{
		local_error=SLAVE_ADDRESS_READ_ERROR;
    1b98:	85 e0       	ldi	r24, 0x05	; 5
    1b9a:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	return  local_error ;
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b9e:	0f 90       	pop	r0
    1ba0:	0f 90       	pop	r0
    1ba2:	cf 91       	pop	r28
    1ba4:	df 91       	pop	r29
    1ba6:	08 95       	ret

00001ba8 <M_TWI_u8_SendByte>:



/***************************************************************************/
TWI_ERROR_STATUS M_TWI_u8_SendByte(u8 Copy_u8Data)
{
    1ba8:	df 93       	push	r29
    1baa:	cf 93       	push	r28
    1bac:	00 d0       	rcall	.+0      	; 0x1bae <M_TWI_u8_SendByte+0x6>
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
    1bb2:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ERROR_STATUS local_error =NO_ERROR ;
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	89 83       	std	Y+1, r24	; 0x01

	TWDR_REG = Copy_u8Data;
    1bb8:	e3 e2       	ldi	r30, 0x23	; 35
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	80 83       	st	Z, r24
	/* Clear Start condition */
	//CLR_BIT(TWCR_REG,TWCR_TWSTA);


	SET_BIT(TWCR_REG,TWCR_TWINT);   /* to clear the flag */
    1bc0:	a6 e5       	ldi	r26, 0x56	; 86
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	e6 e5       	ldi	r30, 0x56	; 86
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	80 81       	ld	r24, Z
    1bca:	80 68       	ori	r24, 0x80	; 128
    1bcc:	8c 93       	st	X, r24

	while(GET_BIT(TWCR_REG,TWCR_TWINT) == 0);
    1bce:	e6 e5       	ldi	r30, 0x56	; 86
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	88 23       	and	r24, r24
    1bd6:	dc f7       	brge	.-10     	; 0x1bce <M_TWI_u8_SendByte+0x26>

	if((TWSR_REG & 0xF8) != TWI_SEND_BYTE_ACK)
    1bd8:	e1 e2       	ldi	r30, 0x21	; 33
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	88 2f       	mov	r24, r24
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	88 7f       	andi	r24, 0xF8	; 248
    1be4:	90 70       	andi	r25, 0x00	; 0
    1be6:	88 32       	cpi	r24, 0x28	; 40
    1be8:	91 05       	cpc	r25, r1
    1bea:	11 f0       	breq	.+4      	; 0x1bf0 <M_TWI_u8_SendByte+0x48>
	{
		local_error=SEND_BYTE_ERROR;
    1bec:	86 e0       	ldi	r24, 0x06	; 6
    1bee:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	return  local_error ;
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01

}
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	cf 91       	pop	r28
    1bf8:	df 91       	pop	r29
    1bfa:	08 95       	ret

00001bfc <M_TWI_u8_ReadByte>:

/***************************************************************************/

TWI_ERROR_STATUS  M_TWI_u8_ReadByte(u8 *TWI_DATA)
{
    1bfc:	df 93       	push	r29
    1bfe:	cf 93       	push	r28
    1c00:	00 d0       	rcall	.+0      	; 0x1c02 <M_TWI_u8_ReadByte+0x6>
    1c02:	0f 92       	push	r0
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
    1c08:	9b 83       	std	Y+3, r25	; 0x03
    1c0a:	8a 83       	std	Y+2, r24	; 0x02

	TWI_ERROR_STATUS local_error =NO_ERROR ;
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	89 83       	std	Y+1, r24	; 0x01

	SET_BIT(TWCR_REG, TWCR_TWEA);
    1c10:	a6 e5       	ldi	r26, 0x56	; 86
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	e6 e5       	ldi	r30, 0x56	; 86
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	80 64       	ori	r24, 0x40	; 64
    1c1c:	8c 93       	st	X, r24

	SET_BIT(TWCR_REG,TWCR_TWINT);   /* to clear the flag */
    1c1e:	a6 e5       	ldi	r26, 0x56	; 86
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	e6 e5       	ldi	r30, 0x56	; 86
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	80 68       	ori	r24, 0x80	; 128
    1c2a:	8c 93       	st	X, r24

	while(GET_BIT(TWCR_REG,TWCR_TWINT) == 0);
    1c2c:	e6 e5       	ldi	r30, 0x56	; 86
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	88 23       	and	r24, r24
    1c34:	dc f7       	brge	.-10     	; 0x1c2c <M_TWI_u8_ReadByte+0x30>

	if((TWSR_REG & 0xF8) != TWI_READ_BYTE_ACK)
    1c36:	e1 e2       	ldi	r30, 0x21	; 33
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	88 2f       	mov	r24, r24
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	88 7f       	andi	r24, 0xF8	; 248
    1c42:	90 70       	andi	r25, 0x00	; 0
    1c44:	80 35       	cpi	r24, 0x50	; 80
    1c46:	91 05       	cpc	r25, r1
    1c48:	19 f0       	breq	.+6      	; 0x1c50 <M_TWI_u8_ReadByte+0x54>
	{
		local_error=READ_BYTE_ERROR;
    1c4a:	87 e0       	ldi	r24, 0x07	; 7
    1c4c:	89 83       	std	Y+1, r24	; 0x01
    1c4e:	06 c0       	rjmp	.+12     	; 0x1c5c <M_TWI_u8_ReadByte+0x60>
	}
	else
	{
		*TWI_DATA = TWDR_REG;
    1c50:	e3 e2       	ldi	r30, 0x23	; 35
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	ea 81       	ldd	r30, Y+2	; 0x02
    1c58:	fb 81       	ldd	r31, Y+3	; 0x03
    1c5a:	80 83       	st	Z, r24
	}


	*TWI_DATA = TWDR_REG;
    1c5c:	e3 e2       	ldi	r30, 0x23	; 35
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	ea 81       	ldd	r30, Y+2	; 0x02
    1c64:	fb 81       	ldd	r31, Y+3	; 0x03
    1c66:	80 83       	st	Z, r24

	return  local_error ;
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	08 95       	ret

00001c76 <main>:
#include "TWI_int.h"
#include "LCD_interface.h"


int main(void)
{
    1c76:	df 93       	push	r29
    1c78:	cf 93       	push	r28
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	2f 97       	sbiw	r28, 0x0f	; 15
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	de bf       	out	0x3e, r29	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	cd bf       	out	0x3d, r28	; 61
	u8 data;
	M_TWI_void_Init();
    1c8a:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <M_TWI_void_Init>
	DIO_voidSetPinDirection(PORTA_ID,PIN_0,PIN_OUTPUT);
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	60 e0       	ldi	r22, 0x00	; 0
    1c92:	41 e0       	ldi	r20, 0x01	; 1
    1c94:	0e 94 1d 06 	call	0xc3a	; 0xc3a <DIO_voidSetPinDirection>

	LCD_voidInit();
    1c98:	0e 94 9d 09 	call	0x133a	; 0x133a <LCD_voidInit>

	LCD_voidWriteString((u8 *) "Welcome...");
    1c9c:	80 e6       	ldi	r24, 0x60	; 96
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <LCD_voidWriteString>
    1ca4:	80 e0       	ldi	r24, 0x00	; 0
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	aa ef       	ldi	r26, 0xFA	; 250
    1caa:	b4 e4       	ldi	r27, 0x44	; 68
    1cac:	8b 87       	std	Y+11, r24	; 0x0b
    1cae:	9c 87       	std	Y+12, r25	; 0x0c
    1cb0:	ad 87       	std	Y+13, r26	; 0x0d
    1cb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	4a e7       	ldi	r20, 0x7A	; 122
    1cc2:	53 e4       	ldi	r21, 0x43	; 67
    1cc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	8f 83       	std	Y+7, r24	; 0x07
    1cce:	98 87       	std	Y+8, r25	; 0x08
    1cd0:	a9 87       	std	Y+9, r26	; 0x09
    1cd2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd6:	78 85       	ldd	r23, Y+8	; 0x08
    1cd8:	89 85       	ldd	r24, Y+9	; 0x09
    1cda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	40 e8       	ldi	r20, 0x80	; 128
    1ce2:	5f e3       	ldi	r21, 0x3F	; 63
    1ce4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ce8:	88 23       	and	r24, r24
    1cea:	2c f4       	brge	.+10     	; 0x1cf6 <main+0x80>
		__ticks = 1;
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	9e 83       	std	Y+6, r25	; 0x06
    1cf2:	8d 83       	std	Y+5, r24	; 0x05
    1cf4:	3f c0       	rjmp	.+126    	; 0x1d74 <main+0xfe>
	else if (__tmp > 65535)
    1cf6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf8:	78 85       	ldd	r23, Y+8	; 0x08
    1cfa:	89 85       	ldd	r24, Y+9	; 0x09
    1cfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	3f ef       	ldi	r19, 0xFF	; 255
    1d02:	4f e7       	ldi	r20, 0x7F	; 127
    1d04:	57 e4       	ldi	r21, 0x47	; 71
    1d06:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d0a:	18 16       	cp	r1, r24
    1d0c:	4c f5       	brge	.+82     	; 0x1d60 <main+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	40 e2       	ldi	r20, 0x20	; 32
    1d1c:	51 e4       	ldi	r21, 0x41	; 65
    1d1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	bc 01       	movw	r22, r24
    1d28:	cd 01       	movw	r24, r26
    1d2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	9e 83       	std	Y+6, r25	; 0x06
    1d34:	8d 83       	std	Y+5, r24	; 0x05
    1d36:	0f c0       	rjmp	.+30     	; 0x1d56 <main+0xe0>
    1d38:	89 e1       	ldi	r24, 0x19	; 25
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	9c 83       	std	Y+4, r25	; 0x04
    1d3e:	8b 83       	std	Y+3, r24	; 0x03
    1d40:	8b 81       	ldd	r24, Y+3	; 0x03
    1d42:	9c 81       	ldd	r25, Y+4	; 0x04
    1d44:	01 97       	sbiw	r24, 0x01	; 1
    1d46:	f1 f7       	brne	.-4      	; 0x1d44 <main+0xce>
    1d48:	9c 83       	std	Y+4, r25	; 0x04
    1d4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d50:	01 97       	sbiw	r24, 0x01	; 1
    1d52:	9e 83       	std	Y+6, r25	; 0x06
    1d54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d56:	8d 81       	ldd	r24, Y+5	; 0x05
    1d58:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5a:	00 97       	sbiw	r24, 0x00	; 0
    1d5c:	69 f7       	brne	.-38     	; 0x1d38 <main+0xc2>
    1d5e:	14 c0       	rjmp	.+40     	; 0x1d88 <main+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d60:	6f 81       	ldd	r22, Y+7	; 0x07
    1d62:	78 85       	ldd	r23, Y+8	; 0x08
    1d64:	89 85       	ldd	r24, Y+9	; 0x09
    1d66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	9e 83       	std	Y+6, r25	; 0x06
    1d72:	8d 83       	std	Y+5, r24	; 0x05
    1d74:	8d 81       	ldd	r24, Y+5	; 0x05
    1d76:	9e 81       	ldd	r25, Y+6	; 0x06
    1d78:	9a 83       	std	Y+2, r25	; 0x02
    1d7a:	89 83       	std	Y+1, r24	; 0x01
    1d7c:	89 81       	ldd	r24, Y+1	; 0x01
    1d7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d80:	01 97       	sbiw	r24, 0x01	; 1
    1d82:	f1 f7       	brne	.-4      	; 0x1d80 <main+0x10a>
    1d84:	9a 83       	std	Y+2, r25	; 0x02
    1d86:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	LCD_voidClear();
    1d88:	0e 94 27 0c 	call	0x184e	; 0x184e <LCD_voidClear>


	while(1)
	{
		M_TWI_u8_ReadByte(&data);
    1d8c:	ce 01       	movw	r24, r28
    1d8e:	0f 96       	adiw	r24, 0x0f	; 15
    1d90:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <M_TWI_u8_ReadByte>
		if(data==2)
    1d94:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d96:	82 30       	cpi	r24, 0x02	; 2
    1d98:	51 f4       	brne	.+20     	; 0x1dae <main+0x138>
		{
			DIO_voidSetPinValue(PORTA_ID,PIN_0,PIN_HIGH);
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
    1d9c:	60 e0       	ldi	r22, 0x00	; 0
    1d9e:	41 e0       	ldi	r20, 0x01	; 1
    1da0:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_voidSetPinValue>
			LCD_voidWriteString((u8 *)"LED IS ON");
    1da4:	8b e6       	ldi	r24, 0x6B	; 107
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <LCD_voidWriteString>
    1dac:	ef cf       	rjmp	.-34     	; 0x1d8c <main+0x116>
		}
		else
		{
			DIO_voidSetPinValue(PORTA_ID,PIN_0,PIN_LOW);
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	60 e0       	ldi	r22, 0x00	; 0
    1db2:	40 e0       	ldi	r20, 0x00	; 0
    1db4:	0e 94 21 07 	call	0xe42	; 0xe42 <DIO_voidSetPinValue>
			LCD_voidWriteString((u8 *)"LED IS OFF");
    1db8:	85 e7       	ldi	r24, 0x75	; 117
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <LCD_voidWriteString>
    1dc0:	e5 cf       	rjmp	.-54     	; 0x1d8c <main+0x116>

00001dc2 <__udivmodsi4>:
    1dc2:	a1 e2       	ldi	r26, 0x21	; 33
    1dc4:	1a 2e       	mov	r1, r26
    1dc6:	aa 1b       	sub	r26, r26
    1dc8:	bb 1b       	sub	r27, r27
    1dca:	fd 01       	movw	r30, r26
    1dcc:	0d c0       	rjmp	.+26     	; 0x1de8 <__udivmodsi4_ep>

00001dce <__udivmodsi4_loop>:
    1dce:	aa 1f       	adc	r26, r26
    1dd0:	bb 1f       	adc	r27, r27
    1dd2:	ee 1f       	adc	r30, r30
    1dd4:	ff 1f       	adc	r31, r31
    1dd6:	a2 17       	cp	r26, r18
    1dd8:	b3 07       	cpc	r27, r19
    1dda:	e4 07       	cpc	r30, r20
    1ddc:	f5 07       	cpc	r31, r21
    1dde:	20 f0       	brcs	.+8      	; 0x1de8 <__udivmodsi4_ep>
    1de0:	a2 1b       	sub	r26, r18
    1de2:	b3 0b       	sbc	r27, r19
    1de4:	e4 0b       	sbc	r30, r20
    1de6:	f5 0b       	sbc	r31, r21

00001de8 <__udivmodsi4_ep>:
    1de8:	66 1f       	adc	r22, r22
    1dea:	77 1f       	adc	r23, r23
    1dec:	88 1f       	adc	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	1a 94       	dec	r1
    1df2:	69 f7       	brne	.-38     	; 0x1dce <__udivmodsi4_loop>
    1df4:	60 95       	com	r22
    1df6:	70 95       	com	r23
    1df8:	80 95       	com	r24
    1dfa:	90 95       	com	r25
    1dfc:	9b 01       	movw	r18, r22
    1dfe:	ac 01       	movw	r20, r24
    1e00:	bd 01       	movw	r22, r26
    1e02:	cf 01       	movw	r24, r30
    1e04:	08 95       	ret

00001e06 <__prologue_saves__>:
    1e06:	2f 92       	push	r2
    1e08:	3f 92       	push	r3
    1e0a:	4f 92       	push	r4
    1e0c:	5f 92       	push	r5
    1e0e:	6f 92       	push	r6
    1e10:	7f 92       	push	r7
    1e12:	8f 92       	push	r8
    1e14:	9f 92       	push	r9
    1e16:	af 92       	push	r10
    1e18:	bf 92       	push	r11
    1e1a:	cf 92       	push	r12
    1e1c:	df 92       	push	r13
    1e1e:	ef 92       	push	r14
    1e20:	ff 92       	push	r15
    1e22:	0f 93       	push	r16
    1e24:	1f 93       	push	r17
    1e26:	cf 93       	push	r28
    1e28:	df 93       	push	r29
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	ca 1b       	sub	r28, r26
    1e30:	db 0b       	sbc	r29, r27
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	de bf       	out	0x3e, r29	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	cd bf       	out	0x3d, r28	; 61
    1e3c:	09 94       	ijmp

00001e3e <__epilogue_restores__>:
    1e3e:	2a 88       	ldd	r2, Y+18	; 0x12
    1e40:	39 88       	ldd	r3, Y+17	; 0x11
    1e42:	48 88       	ldd	r4, Y+16	; 0x10
    1e44:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e46:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e48:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e4a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e4c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e4e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e50:	b9 84       	ldd	r11, Y+9	; 0x09
    1e52:	c8 84       	ldd	r12, Y+8	; 0x08
    1e54:	df 80       	ldd	r13, Y+7	; 0x07
    1e56:	ee 80       	ldd	r14, Y+6	; 0x06
    1e58:	fd 80       	ldd	r15, Y+5	; 0x05
    1e5a:	0c 81       	ldd	r16, Y+4	; 0x04
    1e5c:	1b 81       	ldd	r17, Y+3	; 0x03
    1e5e:	aa 81       	ldd	r26, Y+2	; 0x02
    1e60:	b9 81       	ldd	r27, Y+1	; 0x01
    1e62:	ce 0f       	add	r28, r30
    1e64:	d1 1d       	adc	r29, r1
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	f8 94       	cli
    1e6a:	de bf       	out	0x3e, r29	; 62
    1e6c:	0f be       	out	0x3f, r0	; 63
    1e6e:	cd bf       	out	0x3d, r28	; 61
    1e70:	ed 01       	movw	r28, r26
    1e72:	08 95       	ret

00001e74 <_exit>:
    1e74:	f8 94       	cli

00001e76 <__stop_program>:
    1e76:	ff cf       	rjmp	.-2      	; 0x1e76 <__stop_program>
