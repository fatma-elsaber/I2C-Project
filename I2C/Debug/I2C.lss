
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001fb8  0000204c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800068  00800068  00002054  2**0
                  ALLOC
  3 .stab         00001d94  00000000  00000000  00002054  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015c1  00000000  00000000  00003de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000053a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000054e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005659  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000072a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000818d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000909c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009329  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009af7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 68 0d 	jmp	0x1ad0	; 0x1ad0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ac 36       	cpi	r26, 0x6C	; 108
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e8 eb       	ldi	r30, 0xB8	; 184
      78:	ff e1       	ldi	r31, 0x1F	; 31
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <main>
      8a:	0c 94 da 0f 	jmp	0x1fb4	; 0x1fb4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a3 0f 	jmp	0x1f46	; 0x1f46 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 af 0f 	jmp	0x1f5e	; 0x1f5e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 cb 0f 	jmp	0x1f96	; 0x1f96 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 af 0f 	jmp	0x1f5e	; 0x1f5e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 cb 0f 	jmp	0x1f96	; 0x1f96 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a3 0f 	jmp	0x1f46	; 0x1f46 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 af 0f 	jmp	0x1f5e	; 0x1f5e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 cb 0f 	jmp	0x1f96	; 0x1f96 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 af 0f 	jmp	0x1f5e	; 0x1f5e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 cb 0f 	jmp	0x1f96	; 0x1f96 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 af 0f 	jmp	0x1f5e	; 0x1f5e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 cb 0f 	jmp	0x1f96	; 0x1f96 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b3 0f 	jmp	0x1f66	; 0x1f66 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 cf 0f 	jmp	0x1f9e	; 0x1f9e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_voidSetPortDirection>:
#include"DIO_Private.h"

/*****************************************************************************/

void DIO_voidSetPortDirection(u8 Copy_u8portID,u8 Copy_u8PortDir )
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <DIO_voidSetPortDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <DIO_voidSetPortDirection+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	89 83       	std	Y+1, r24	; 0x01
     b54:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8portID)
     b56:	89 81       	ldd	r24, Y+1	; 0x01
     b58:	28 2f       	mov	r18, r24
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	3c 83       	std	Y+4, r19	; 0x04
     b5e:	2b 83       	std	Y+3, r18	; 0x03
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	9c 81       	ldd	r25, Y+4	; 0x04
     b64:	81 30       	cpi	r24, 0x01	; 1
     b66:	91 05       	cpc	r25, r1
     b68:	d1 f0       	breq	.+52     	; 0xb9e <DIO_voidSetPortDirection+0x58>
     b6a:	2b 81       	ldd	r18, Y+3	; 0x03
     b6c:	3c 81       	ldd	r19, Y+4	; 0x04
     b6e:	22 30       	cpi	r18, 0x02	; 2
     b70:	31 05       	cpc	r19, r1
     b72:	2c f4       	brge	.+10     	; 0xb7e <DIO_voidSetPortDirection+0x38>
     b74:	8b 81       	ldd	r24, Y+3	; 0x03
     b76:	9c 81       	ldd	r25, Y+4	; 0x04
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	61 f0       	breq	.+24     	; 0xb94 <DIO_voidSetPortDirection+0x4e>
     b7c:	1e c0       	rjmp	.+60     	; 0xbba <DIO_voidSetPortDirection+0x74>
     b7e:	2b 81       	ldd	r18, Y+3	; 0x03
     b80:	3c 81       	ldd	r19, Y+4	; 0x04
     b82:	22 30       	cpi	r18, 0x02	; 2
     b84:	31 05       	cpc	r19, r1
     b86:	81 f0       	breq	.+32     	; 0xba8 <DIO_voidSetPortDirection+0x62>
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	9c 81       	ldd	r25, Y+4	; 0x04
     b8c:	83 30       	cpi	r24, 0x03	; 3
     b8e:	91 05       	cpc	r25, r1
     b90:	81 f0       	breq	.+32     	; 0xbb2 <DIO_voidSetPortDirection+0x6c>
     b92:	13 c0       	rjmp	.+38     	; 0xbba <DIO_voidSetPortDirection+0x74>
	{
	case PORTA_ID :   DDRA_REG= Copy_u8PortDir ; break ;
     b94:	ea e3       	ldi	r30, 0x3A	; 58
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	8a 81       	ldd	r24, Y+2	; 0x02
     b9a:	80 83       	st	Z, r24
     b9c:	0e c0       	rjmp	.+28     	; 0xbba <DIO_voidSetPortDirection+0x74>
	case PORTB_ID :   DDRB_REG= Copy_u8PortDir ; break ;
     b9e:	e7 e3       	ldi	r30, 0x37	; 55
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	8a 81       	ldd	r24, Y+2	; 0x02
     ba4:	80 83       	st	Z, r24
     ba6:	09 c0       	rjmp	.+18     	; 0xbba <DIO_voidSetPortDirection+0x74>
	case PORTC_ID :   DDRC_REG= Copy_u8PortDir ; break ;
     ba8:	e4 e3       	ldi	r30, 0x34	; 52
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	8a 81       	ldd	r24, Y+2	; 0x02
     bae:	80 83       	st	Z, r24
     bb0:	04 c0       	rjmp	.+8      	; 0xbba <DIO_voidSetPortDirection+0x74>
	case PORTD_ID :   DDRD_REG= Copy_u8PortDir ; break ;
     bb2:	e1 e3       	ldi	r30, 0x31	; 49
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	8a 81       	ldd	r24, Y+2	; 0x02
     bb8:	80 83       	st	Z, r24

	}
}
     bba:	0f 90       	pop	r0
     bbc:	0f 90       	pop	r0
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	cf 91       	pop	r28
     bc4:	df 91       	pop	r29
     bc6:	08 95       	ret

00000bc8 <DIO_voidSetPortValue>:
/*****************************************************************************/

void DIO_voidSetPortValue(u8 Copy_u8PortID,u8 Copy_u8PortVal )

{
     bc8:	df 93       	push	r29
     bca:	cf 93       	push	r28
     bcc:	00 d0       	rcall	.+0      	; 0xbce <DIO_voidSetPortValue+0x6>
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <DIO_voidSetPortValue+0x8>
     bd0:	cd b7       	in	r28, 0x3d	; 61
     bd2:	de b7       	in	r29, 0x3e	; 62
     bd4:	89 83       	std	Y+1, r24	; 0x01
     bd6:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_u8PortID)
     bd8:	89 81       	ldd	r24, Y+1	; 0x01
     bda:	28 2f       	mov	r18, r24
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	3c 83       	std	Y+4, r19	; 0x04
     be0:	2b 83       	std	Y+3, r18	; 0x03
     be2:	8b 81       	ldd	r24, Y+3	; 0x03
     be4:	9c 81       	ldd	r25, Y+4	; 0x04
     be6:	81 30       	cpi	r24, 0x01	; 1
     be8:	91 05       	cpc	r25, r1
     bea:	d1 f0       	breq	.+52     	; 0xc20 <DIO_voidSetPortValue+0x58>
     bec:	2b 81       	ldd	r18, Y+3	; 0x03
     bee:	3c 81       	ldd	r19, Y+4	; 0x04
     bf0:	22 30       	cpi	r18, 0x02	; 2
     bf2:	31 05       	cpc	r19, r1
     bf4:	2c f4       	brge	.+10     	; 0xc00 <DIO_voidSetPortValue+0x38>
     bf6:	8b 81       	ldd	r24, Y+3	; 0x03
     bf8:	9c 81       	ldd	r25, Y+4	; 0x04
     bfa:	00 97       	sbiw	r24, 0x00	; 0
     bfc:	61 f0       	breq	.+24     	; 0xc16 <DIO_voidSetPortValue+0x4e>
     bfe:	1e c0       	rjmp	.+60     	; 0xc3c <DIO_voidSetPortValue+0x74>
     c00:	2b 81       	ldd	r18, Y+3	; 0x03
     c02:	3c 81       	ldd	r19, Y+4	; 0x04
     c04:	22 30       	cpi	r18, 0x02	; 2
     c06:	31 05       	cpc	r19, r1
     c08:	81 f0       	breq	.+32     	; 0xc2a <DIO_voidSetPortValue+0x62>
     c0a:	8b 81       	ldd	r24, Y+3	; 0x03
     c0c:	9c 81       	ldd	r25, Y+4	; 0x04
     c0e:	83 30       	cpi	r24, 0x03	; 3
     c10:	91 05       	cpc	r25, r1
     c12:	81 f0       	breq	.+32     	; 0xc34 <DIO_voidSetPortValue+0x6c>
     c14:	13 c0       	rjmp	.+38     	; 0xc3c <DIO_voidSetPortValue+0x74>
	{

	case PORTA_ID :   PORTA_REG= Copy_u8PortVal ; break ;
     c16:	eb e3       	ldi	r30, 0x3B	; 59
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	8a 81       	ldd	r24, Y+2	; 0x02
     c1c:	80 83       	st	Z, r24
     c1e:	0e c0       	rjmp	.+28     	; 0xc3c <DIO_voidSetPortValue+0x74>
	case PORTB_ID :   PORTB_REG= Copy_u8PortVal ; break ;
     c20:	e8 e3       	ldi	r30, 0x38	; 56
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	8a 81       	ldd	r24, Y+2	; 0x02
     c26:	80 83       	st	Z, r24
     c28:	09 c0       	rjmp	.+18     	; 0xc3c <DIO_voidSetPortValue+0x74>
	case PORTC_ID :   PORTC_REG= Copy_u8PortVal ; break ;
     c2a:	e5 e3       	ldi	r30, 0x35	; 53
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	8a 81       	ldd	r24, Y+2	; 0x02
     c30:	80 83       	st	Z, r24
     c32:	04 c0       	rjmp	.+8      	; 0xc3c <DIO_voidSetPortValue+0x74>
	case PORTD_ID :   PORTD_REG= Copy_u8PortVal ; break ;
     c34:	e2 e3       	ldi	r30, 0x32	; 50
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	8a 81       	ldd	r24, Y+2	; 0x02
     c3a:	80 83       	st	Z, r24

	}
}
     c3c:	0f 90       	pop	r0
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	cf 91       	pop	r28
     c46:	df 91       	pop	r29
     c48:	08 95       	ret

00000c4a <DIO_voidSetPinDirection>:

/*****************************************************************************/


void	DIO_voidSetPinDirection(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinDir)
{
     c4a:	df 93       	push	r29
     c4c:	cf 93       	push	r28
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
     c52:	27 97       	sbiw	r28, 0x07	; 7
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	f8 94       	cli
     c58:	de bf       	out	0x3e, r29	; 62
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	cd bf       	out	0x3d, r28	; 61
     c5e:	89 83       	std	Y+1, r24	; 0x01
     c60:	6a 83       	std	Y+2, r22	; 0x02
     c62:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinID>=PIN_0 &&Copy_u8PinID<=PIN_7)
     c64:	8a 81       	ldd	r24, Y+2	; 0x02
     c66:	88 30       	cpi	r24, 0x08	; 8
     c68:	08 f0       	brcs	.+2      	; 0xc6c <DIO_voidSetPinDirection+0x22>
     c6a:	ea c0       	rjmp	.+468    	; 0xe40 <DIO_voidSetPinDirection+0x1f6>
	{
		if(Copy_u8PinDir==PIN_OUTPUT)//Output
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	81 30       	cpi	r24, 0x01	; 1
     c70:	09 f0       	breq	.+2      	; 0xc74 <DIO_voidSetPinDirection+0x2a>
     c72:	6f c0       	rjmp	.+222    	; 0xd52 <DIO_voidSetPinDirection+0x108>
		{
			switch(Copy_u8PortID)
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	28 2f       	mov	r18, r24
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	3f 83       	std	Y+7, r19	; 0x07
     c7c:	2e 83       	std	Y+6, r18	; 0x06
     c7e:	8e 81       	ldd	r24, Y+6	; 0x06
     c80:	9f 81       	ldd	r25, Y+7	; 0x07
     c82:	81 30       	cpi	r24, 0x01	; 1
     c84:	91 05       	cpc	r25, r1
     c86:	49 f1       	breq	.+82     	; 0xcda <DIO_voidSetPinDirection+0x90>
     c88:	2e 81       	ldd	r18, Y+6	; 0x06
     c8a:	3f 81       	ldd	r19, Y+7	; 0x07
     c8c:	22 30       	cpi	r18, 0x02	; 2
     c8e:	31 05       	cpc	r19, r1
     c90:	2c f4       	brge	.+10     	; 0xc9c <DIO_voidSetPinDirection+0x52>
     c92:	8e 81       	ldd	r24, Y+6	; 0x06
     c94:	9f 81       	ldd	r25, Y+7	; 0x07
     c96:	00 97       	sbiw	r24, 0x00	; 0
     c98:	61 f0       	breq	.+24     	; 0xcb2 <DIO_voidSetPinDirection+0x68>
     c9a:	d2 c0       	rjmp	.+420    	; 0xe40 <DIO_voidSetPinDirection+0x1f6>
     c9c:	2e 81       	ldd	r18, Y+6	; 0x06
     c9e:	3f 81       	ldd	r19, Y+7	; 0x07
     ca0:	22 30       	cpi	r18, 0x02	; 2
     ca2:	31 05       	cpc	r19, r1
     ca4:	71 f1       	breq	.+92     	; 0xd02 <DIO_voidSetPinDirection+0xb8>
     ca6:	8e 81       	ldd	r24, Y+6	; 0x06
     ca8:	9f 81       	ldd	r25, Y+7	; 0x07
     caa:	83 30       	cpi	r24, 0x03	; 3
     cac:	91 05       	cpc	r25, r1
     cae:	e9 f1       	breq	.+122    	; 0xd2a <DIO_voidSetPinDirection+0xe0>
     cb0:	c7 c0       	rjmp	.+398    	; 0xe40 <DIO_voidSetPinDirection+0x1f6>
			{
			case PORTA_ID:    SET_BIT(DDRA_REG,Copy_u8PinID); break;
     cb2:	aa e3       	ldi	r26, 0x3A	; 58
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	ea e3       	ldi	r30, 0x3A	; 58
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	48 2f       	mov	r20, r24
     cbe:	8a 81       	ldd	r24, Y+2	; 0x02
     cc0:	28 2f       	mov	r18, r24
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	02 2e       	mov	r0, r18
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <DIO_voidSetPinDirection+0x86>
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	0a 94       	dec	r0
     cd2:	e2 f7       	brpl	.-8      	; 0xccc <DIO_voidSetPinDirection+0x82>
     cd4:	84 2b       	or	r24, r20
     cd6:	8c 93       	st	X, r24
     cd8:	b3 c0       	rjmp	.+358    	; 0xe40 <DIO_voidSetPinDirection+0x1f6>
			case PORTB_ID:    SET_BIT(DDRB_REG,Copy_u8PinID); break;
     cda:	a7 e3       	ldi	r26, 0x37	; 55
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e7 e3       	ldi	r30, 0x37	; 55
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	48 2f       	mov	r20, r24
     ce6:	8a 81       	ldd	r24, Y+2	; 0x02
     ce8:	28 2f       	mov	r18, r24
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	02 2e       	mov	r0, r18
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <DIO_voidSetPinDirection+0xae>
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	0a 94       	dec	r0
     cfa:	e2 f7       	brpl	.-8      	; 0xcf4 <DIO_voidSetPinDirection+0xaa>
     cfc:	84 2b       	or	r24, r20
     cfe:	8c 93       	st	X, r24
     d00:	9f c0       	rjmp	.+318    	; 0xe40 <DIO_voidSetPinDirection+0x1f6>
			case PORTC_ID:    SET_BIT(DDRC_REG,Copy_u8PinID); break;
     d02:	a4 e3       	ldi	r26, 0x34	; 52
     d04:	b0 e0       	ldi	r27, 0x00	; 0
     d06:	e4 e3       	ldi	r30, 0x34	; 52
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	48 2f       	mov	r20, r24
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	28 2f       	mov	r18, r24
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	02 2e       	mov	r0, r18
     d1a:	02 c0       	rjmp	.+4      	; 0xd20 <DIO_voidSetPinDirection+0xd6>
     d1c:	88 0f       	add	r24, r24
     d1e:	99 1f       	adc	r25, r25
     d20:	0a 94       	dec	r0
     d22:	e2 f7       	brpl	.-8      	; 0xd1c <DIO_voidSetPinDirection+0xd2>
     d24:	84 2b       	or	r24, r20
     d26:	8c 93       	st	X, r24
     d28:	8b c0       	rjmp	.+278    	; 0xe40 <DIO_voidSetPinDirection+0x1f6>
			case PORTD_ID:    SET_BIT(DDRD_REG,Copy_u8PinID); break;
     d2a:	a1 e3       	ldi	r26, 0x31	; 49
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e1 e3       	ldi	r30, 0x31	; 49
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	48 2f       	mov	r20, r24
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	28 2f       	mov	r18, r24
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	02 2e       	mov	r0, r18
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <DIO_voidSetPinDirection+0xfe>
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	0a 94       	dec	r0
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <DIO_voidSetPinDirection+0xfa>
     d4c:	84 2b       	or	r24, r20
     d4e:	8c 93       	st	X, r24
     d50:	77 c0       	rjmp	.+238    	; 0xe40 <DIO_voidSetPinDirection+0x1f6>

			default:   break;

			}
		}
		else if(Copy_u8PinDir==PIN_INPUT)//Input
     d52:	8b 81       	ldd	r24, Y+3	; 0x03
     d54:	88 23       	and	r24, r24
     d56:	09 f0       	breq	.+2      	; 0xd5a <DIO_voidSetPinDirection+0x110>
     d58:	73 c0       	rjmp	.+230    	; 0xe40 <DIO_voidSetPinDirection+0x1f6>
		{
			switch(Copy_u8PortID)
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	28 2f       	mov	r18, r24
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	3d 83       	std	Y+5, r19	; 0x05
     d62:	2c 83       	std	Y+4, r18	; 0x04
     d64:	8c 81       	ldd	r24, Y+4	; 0x04
     d66:	9d 81       	ldd	r25, Y+5	; 0x05
     d68:	81 30       	cpi	r24, 0x01	; 1
     d6a:	91 05       	cpc	r25, r1
     d6c:	59 f1       	breq	.+86     	; 0xdc4 <DIO_voidSetPinDirection+0x17a>
     d6e:	2c 81       	ldd	r18, Y+4	; 0x04
     d70:	3d 81       	ldd	r19, Y+5	; 0x05
     d72:	22 30       	cpi	r18, 0x02	; 2
     d74:	31 05       	cpc	r19, r1
     d76:	2c f4       	brge	.+10     	; 0xd82 <DIO_voidSetPinDirection+0x138>
     d78:	8c 81       	ldd	r24, Y+4	; 0x04
     d7a:	9d 81       	ldd	r25, Y+5	; 0x05
     d7c:	00 97       	sbiw	r24, 0x00	; 0
     d7e:	69 f0       	breq	.+26     	; 0xd9a <DIO_voidSetPinDirection+0x150>
     d80:	5f c0       	rjmp	.+190    	; 0xe40 <DIO_voidSetPinDirection+0x1f6>
     d82:	2c 81       	ldd	r18, Y+4	; 0x04
     d84:	3d 81       	ldd	r19, Y+5	; 0x05
     d86:	22 30       	cpi	r18, 0x02	; 2
     d88:	31 05       	cpc	r19, r1
     d8a:	89 f1       	breq	.+98     	; 0xdee <DIO_voidSetPinDirection+0x1a4>
     d8c:	8c 81       	ldd	r24, Y+4	; 0x04
     d8e:	9d 81       	ldd	r25, Y+5	; 0x05
     d90:	83 30       	cpi	r24, 0x03	; 3
     d92:	91 05       	cpc	r25, r1
     d94:	09 f4       	brne	.+2      	; 0xd98 <DIO_voidSetPinDirection+0x14e>
     d96:	40 c0       	rjmp	.+128    	; 0xe18 <DIO_voidSetPinDirection+0x1ce>
     d98:	53 c0       	rjmp	.+166    	; 0xe40 <DIO_voidSetPinDirection+0x1f6>
			{
			case PORTA_ID:   CLR_BIT(DDRA_REG,Copy_u8PinID); break;
     d9a:	aa e3       	ldi	r26, 0x3A	; 58
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	ea e3       	ldi	r30, 0x3A	; 58
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	48 2f       	mov	r20, r24
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	02 2e       	mov	r0, r18
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <DIO_voidSetPinDirection+0x16e>
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	0a 94       	dec	r0
     dba:	e2 f7       	brpl	.-8      	; 0xdb4 <DIO_voidSetPinDirection+0x16a>
     dbc:	80 95       	com	r24
     dbe:	84 23       	and	r24, r20
     dc0:	8c 93       	st	X, r24
     dc2:	3e c0       	rjmp	.+124    	; 0xe40 <DIO_voidSetPinDirection+0x1f6>
			case PORTB_ID:   CLR_BIT(DDRB_REG,Copy_u8PinID); break;
     dc4:	a7 e3       	ldi	r26, 0x37	; 55
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e7 e3       	ldi	r30, 0x37	; 55
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	48 2f       	mov	r20, r24
     dd0:	8a 81       	ldd	r24, Y+2	; 0x02
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	02 2e       	mov	r0, r18
     ddc:	02 c0       	rjmp	.+4      	; 0xde2 <DIO_voidSetPinDirection+0x198>
     dde:	88 0f       	add	r24, r24
     de0:	99 1f       	adc	r25, r25
     de2:	0a 94       	dec	r0
     de4:	e2 f7       	brpl	.-8      	; 0xdde <DIO_voidSetPinDirection+0x194>
     de6:	80 95       	com	r24
     de8:	84 23       	and	r24, r20
     dea:	8c 93       	st	X, r24
     dec:	29 c0       	rjmp	.+82     	; 0xe40 <DIO_voidSetPinDirection+0x1f6>
			case PORTC_ID:   CLR_BIT(DDRC_REG,Copy_u8PinID); break;
     dee:	a4 e3       	ldi	r26, 0x34	; 52
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	e4 e3       	ldi	r30, 0x34	; 52
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	80 81       	ld	r24, Z
     df8:	48 2f       	mov	r20, r24
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	28 2f       	mov	r18, r24
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	02 2e       	mov	r0, r18
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <DIO_voidSetPinDirection+0x1c2>
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	0a 94       	dec	r0
     e0e:	e2 f7       	brpl	.-8      	; 0xe08 <DIO_voidSetPinDirection+0x1be>
     e10:	80 95       	com	r24
     e12:	84 23       	and	r24, r20
     e14:	8c 93       	st	X, r24
     e16:	14 c0       	rjmp	.+40     	; 0xe40 <DIO_voidSetPinDirection+0x1f6>
			case PORTD_ID:   CLR_BIT(DDRD_REG,Copy_u8PinID); break;
     e18:	a1 e3       	ldi	r26, 0x31	; 49
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	e1 e3       	ldi	r30, 0x31	; 49
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	48 2f       	mov	r20, r24
     e24:	8a 81       	ldd	r24, Y+2	; 0x02
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	02 2e       	mov	r0, r18
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <DIO_voidSetPinDirection+0x1ec>
     e32:	88 0f       	add	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	0a 94       	dec	r0
     e38:	e2 f7       	brpl	.-8      	; 0xe32 <DIO_voidSetPinDirection+0x1e8>
     e3a:	80 95       	com	r24
     e3c:	84 23       	and	r24, r20
     e3e:	8c 93       	st	X, r24
			default:   break;
			}
		}
	}

}
     e40:	27 96       	adiw	r28, 0x07	; 7
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	f8 94       	cli
     e46:	de bf       	out	0x3e, r29	; 62
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	cd bf       	out	0x3d, r28	; 61
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <DIO_voidSetPinValue>:
/*****************************************************************************/
void    DIO_voidSetPinValue(u8 Copy_u8PortID,u8 Copy_u8PinID,u8 Copy_u8PinValue)
{
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	cd b7       	in	r28, 0x3d	; 61
     e58:	de b7       	in	r29, 0x3e	; 62
     e5a:	27 97       	sbiw	r28, 0x07	; 7
     e5c:	0f b6       	in	r0, 0x3f	; 63
     e5e:	f8 94       	cli
     e60:	de bf       	out	0x3e, r29	; 62
     e62:	0f be       	out	0x3f, r0	; 63
     e64:	cd bf       	out	0x3d, r28	; 61
     e66:	89 83       	std	Y+1, r24	; 0x01
     e68:	6a 83       	std	Y+2, r22	; 0x02
     e6a:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinID>=PIN_0&&Copy_u8PinID<=PIN_7)
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	88 30       	cpi	r24, 0x08	; 8
     e70:	08 f0       	brcs	.+2      	; 0xe74 <DIO_voidSetPinValue+0x22>
     e72:	ea c0       	rjmp	.+468    	; 0x1048 <DIO_voidSetPinValue+0x1f6>
	{
		if(Copy_u8PinValue==PIN_HIGH)//High
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	81 30       	cpi	r24, 0x01	; 1
     e78:	09 f0       	breq	.+2      	; 0xe7c <DIO_voidSetPinValue+0x2a>
     e7a:	6f c0       	rjmp	.+222    	; 0xf5a <DIO_voidSetPinValue+0x108>
		{

			switch(Copy_u8PortID)
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	3f 83       	std	Y+7, r19	; 0x07
     e84:	2e 83       	std	Y+6, r18	; 0x06
     e86:	8e 81       	ldd	r24, Y+6	; 0x06
     e88:	9f 81       	ldd	r25, Y+7	; 0x07
     e8a:	81 30       	cpi	r24, 0x01	; 1
     e8c:	91 05       	cpc	r25, r1
     e8e:	49 f1       	breq	.+82     	; 0xee2 <DIO_voidSetPinValue+0x90>
     e90:	2e 81       	ldd	r18, Y+6	; 0x06
     e92:	3f 81       	ldd	r19, Y+7	; 0x07
     e94:	22 30       	cpi	r18, 0x02	; 2
     e96:	31 05       	cpc	r19, r1
     e98:	2c f4       	brge	.+10     	; 0xea4 <DIO_voidSetPinValue+0x52>
     e9a:	8e 81       	ldd	r24, Y+6	; 0x06
     e9c:	9f 81       	ldd	r25, Y+7	; 0x07
     e9e:	00 97       	sbiw	r24, 0x00	; 0
     ea0:	61 f0       	breq	.+24     	; 0xeba <DIO_voidSetPinValue+0x68>
     ea2:	d2 c0       	rjmp	.+420    	; 0x1048 <DIO_voidSetPinValue+0x1f6>
     ea4:	2e 81       	ldd	r18, Y+6	; 0x06
     ea6:	3f 81       	ldd	r19, Y+7	; 0x07
     ea8:	22 30       	cpi	r18, 0x02	; 2
     eaa:	31 05       	cpc	r19, r1
     eac:	71 f1       	breq	.+92     	; 0xf0a <DIO_voidSetPinValue+0xb8>
     eae:	8e 81       	ldd	r24, Y+6	; 0x06
     eb0:	9f 81       	ldd	r25, Y+7	; 0x07
     eb2:	83 30       	cpi	r24, 0x03	; 3
     eb4:	91 05       	cpc	r25, r1
     eb6:	e9 f1       	breq	.+122    	; 0xf32 <DIO_voidSetPinValue+0xe0>
     eb8:	c7 c0       	rjmp	.+398    	; 0x1048 <DIO_voidSetPinValue+0x1f6>
			{
			case PORTA_ID :    SET_BIT(PORTA_REG,Copy_u8PinID); break;
     eba:	ab e3       	ldi	r26, 0x3B	; 59
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	eb e3       	ldi	r30, 0x3B	; 59
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <DIO_voidSetPinValue+0x86>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <DIO_voidSetPinValue+0x82>
     edc:	84 2b       	or	r24, r20
     ede:	8c 93       	st	X, r24
     ee0:	b3 c0       	rjmp	.+358    	; 0x1048 <DIO_voidSetPinValue+0x1f6>
			case PORTB_ID :    SET_BIT(PORTB_REG,Copy_u8PinID); break;
     ee2:	a8 e3       	ldi	r26, 0x38	; 56
     ee4:	b0 e0       	ldi	r27, 0x00	; 0
     ee6:	e8 e3       	ldi	r30, 0x38	; 56
     ee8:	f0 e0       	ldi	r31, 0x00	; 0
     eea:	80 81       	ld	r24, Z
     eec:	48 2f       	mov	r20, r24
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	81 e0       	ldi	r24, 0x01	; 1
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	02 2e       	mov	r0, r18
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <DIO_voidSetPinValue+0xae>
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <DIO_voidSetPinValue+0xaa>
     f04:	84 2b       	or	r24, r20
     f06:	8c 93       	st	X, r24
     f08:	9f c0       	rjmp	.+318    	; 0x1048 <DIO_voidSetPinValue+0x1f6>
			case PORTC_ID :    SET_BIT(PORTC_REG,Copy_u8PinID); break;
     f0a:	a5 e3       	ldi	r26, 0x35	; 53
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e5 e3       	ldi	r30, 0x35	; 53
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	48 2f       	mov	r20, r24
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 2e       	mov	r0, r18
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <DIO_voidSetPinValue+0xd6>
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	0a 94       	dec	r0
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <DIO_voidSetPinValue+0xd2>
     f2c:	84 2b       	or	r24, r20
     f2e:	8c 93       	st	X, r24
     f30:	8b c0       	rjmp	.+278    	; 0x1048 <DIO_voidSetPinValue+0x1f6>
			case PORTD_ID :    SET_BIT(PORTD_REG,Copy_u8PinID); break;
     f32:	a2 e3       	ldi	r26, 0x32	; 50
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e2 e3       	ldi	r30, 0x32	; 50
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	80 81       	ld	r24, Z
     f3c:	48 2f       	mov	r20, r24
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	02 2e       	mov	r0, r18
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <DIO_voidSetPinValue+0xfe>
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	0a 94       	dec	r0
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <DIO_voidSetPinValue+0xfa>
     f54:	84 2b       	or	r24, r20
     f56:	8c 93       	st	X, r24
     f58:	77 c0       	rjmp	.+238    	; 0x1048 <DIO_voidSetPinValue+0x1f6>

			}
		}
		else if(Copy_u8PinValue==PIN_LOW)//Low
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	88 23       	and	r24, r24
     f5e:	09 f0       	breq	.+2      	; 0xf62 <DIO_voidSetPinValue+0x110>
     f60:	73 c0       	rjmp	.+230    	; 0x1048 <DIO_voidSetPinValue+0x1f6>
		{
			switch(Copy_u8PortID)
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	3d 83       	std	Y+5, r19	; 0x05
     f6a:	2c 83       	std	Y+4, r18	; 0x04
     f6c:	8c 81       	ldd	r24, Y+4	; 0x04
     f6e:	9d 81       	ldd	r25, Y+5	; 0x05
     f70:	81 30       	cpi	r24, 0x01	; 1
     f72:	91 05       	cpc	r25, r1
     f74:	59 f1       	breq	.+86     	; 0xfcc <DIO_voidSetPinValue+0x17a>
     f76:	2c 81       	ldd	r18, Y+4	; 0x04
     f78:	3d 81       	ldd	r19, Y+5	; 0x05
     f7a:	22 30       	cpi	r18, 0x02	; 2
     f7c:	31 05       	cpc	r19, r1
     f7e:	2c f4       	brge	.+10     	; 0xf8a <DIO_voidSetPinValue+0x138>
     f80:	8c 81       	ldd	r24, Y+4	; 0x04
     f82:	9d 81       	ldd	r25, Y+5	; 0x05
     f84:	00 97       	sbiw	r24, 0x00	; 0
     f86:	69 f0       	breq	.+26     	; 0xfa2 <DIO_voidSetPinValue+0x150>
     f88:	5f c0       	rjmp	.+190    	; 0x1048 <DIO_voidSetPinValue+0x1f6>
     f8a:	2c 81       	ldd	r18, Y+4	; 0x04
     f8c:	3d 81       	ldd	r19, Y+5	; 0x05
     f8e:	22 30       	cpi	r18, 0x02	; 2
     f90:	31 05       	cpc	r19, r1
     f92:	89 f1       	breq	.+98     	; 0xff6 <DIO_voidSetPinValue+0x1a4>
     f94:	8c 81       	ldd	r24, Y+4	; 0x04
     f96:	9d 81       	ldd	r25, Y+5	; 0x05
     f98:	83 30       	cpi	r24, 0x03	; 3
     f9a:	91 05       	cpc	r25, r1
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <DIO_voidSetPinValue+0x14e>
     f9e:	40 c0       	rjmp	.+128    	; 0x1020 <DIO_voidSetPinValue+0x1ce>
     fa0:	53 c0       	rjmp	.+166    	; 0x1048 <DIO_voidSetPinValue+0x1f6>
			{
			case PORTA_ID : CLR_BIT(PORTA_REG,Copy_u8PinID); break ;
     fa2:	ab e3       	ldi	r26, 0x3B	; 59
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	eb e3       	ldi	r30, 0x3B	; 59
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	48 2f       	mov	r20, r24
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	02 2e       	mov	r0, r18
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <DIO_voidSetPinValue+0x16e>
     fbc:	88 0f       	add	r24, r24
     fbe:	99 1f       	adc	r25, r25
     fc0:	0a 94       	dec	r0
     fc2:	e2 f7       	brpl	.-8      	; 0xfbc <DIO_voidSetPinValue+0x16a>
     fc4:	80 95       	com	r24
     fc6:	84 23       	and	r24, r20
     fc8:	8c 93       	st	X, r24
     fca:	3e c0       	rjmp	.+124    	; 0x1048 <DIO_voidSetPinValue+0x1f6>
			case PORTB_ID : CLR_BIT(PORTB_REG,Copy_u8PinID); break ;
     fcc:	a8 e3       	ldi	r26, 0x38	; 56
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e8 e3       	ldi	r30, 0x38	; 56
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	48 2f       	mov	r20, r24
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	02 2e       	mov	r0, r18
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <DIO_voidSetPinValue+0x198>
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	0a 94       	dec	r0
     fec:	e2 f7       	brpl	.-8      	; 0xfe6 <DIO_voidSetPinValue+0x194>
     fee:	80 95       	com	r24
     ff0:	84 23       	and	r24, r20
     ff2:	8c 93       	st	X, r24
     ff4:	29 c0       	rjmp	.+82     	; 0x1048 <DIO_voidSetPinValue+0x1f6>
			case PORTC_ID : CLR_BIT(PORTC_REG,Copy_u8PinID) ;break ;
     ff6:	a5 e3       	ldi	r26, 0x35	; 53
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e5 e3       	ldi	r30, 0x35	; 53
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_voidSetPinValue+0x1c2>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_voidSetPinValue+0x1be>
    1018:	80 95       	com	r24
    101a:	84 23       	and	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	14 c0       	rjmp	.+40     	; 0x1048 <DIO_voidSetPinValue+0x1f6>
			case PORTD_ID : CLR_BIT(PORTD_REG,Copy_u8PinID) ;break ;
    1020:	a2 e3       	ldi	r26, 0x32	; 50
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e2 e3       	ldi	r30, 0x32	; 50
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	48 2f       	mov	r20, r24
    102c:	8a 81       	ldd	r24, Y+2	; 0x02
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	02 2e       	mov	r0, r18
    1038:	02 c0       	rjmp	.+4      	; 0x103e <DIO_voidSetPinValue+0x1ec>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	0a 94       	dec	r0
    1040:	e2 f7       	brpl	.-8      	; 0x103a <DIO_voidSetPinValue+0x1e8>
    1042:	80 95       	com	r24
    1044:	84 23       	and	r24, r20
    1046:	8c 93       	st	X, r24

			}
		}
	}
}
    1048:	27 96       	adiw	r28, 0x07	; 7
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	f8 94       	cli
    104e:	de bf       	out	0x3e, r29	; 62
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	cd bf       	out	0x3d, r28	; 61
    1054:	cf 91       	pop	r28
    1056:	df 91       	pop	r29
    1058:	08 95       	ret

0000105a <DIO_u8GetBitValue>:
/*****************************************************************************/
u8 DIO_u8GetBitValue(u8 copy_u8PortID , u8 Copy_u8PinID )
{
    105a:	df 93       	push	r29
    105c:	cf 93       	push	r28
    105e:	00 d0       	rcall	.+0      	; 0x1060 <DIO_u8GetBitValue+0x6>
    1060:	00 d0       	rcall	.+0      	; 0x1062 <DIO_u8GetBitValue+0x8>
    1062:	0f 92       	push	r0
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	8a 83       	std	Y+2, r24	; 0x02
    106a:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_PinVal ;

	if( Copy_u8PinID>=PIN_0 && Copy_u8PinID<=PIN_7 )
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	88 30       	cpi	r24, 0x08	; 8
    1070:	08 f0       	brcs	.+2      	; 0x1074 <DIO_u8GetBitValue+0x1a>
    1072:	67 c0       	rjmp	.+206    	; 0x1142 <DIO_u8GetBitValue+0xe8>
	{
		switch(copy_u8PortID)
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	3d 83       	std	Y+5, r19	; 0x05
    107c:	2c 83       	std	Y+4, r18	; 0x04
    107e:	4c 81       	ldd	r20, Y+4	; 0x04
    1080:	5d 81       	ldd	r21, Y+5	; 0x05
    1082:	41 30       	cpi	r20, 0x01	; 1
    1084:	51 05       	cpc	r21, r1
    1086:	41 f1       	breq	.+80     	; 0x10d8 <DIO_u8GetBitValue+0x7e>
    1088:	8c 81       	ldd	r24, Y+4	; 0x04
    108a:	9d 81       	ldd	r25, Y+5	; 0x05
    108c:	82 30       	cpi	r24, 0x02	; 2
    108e:	91 05       	cpc	r25, r1
    1090:	34 f4       	brge	.+12     	; 0x109e <DIO_u8GetBitValue+0x44>
    1092:	2c 81       	ldd	r18, Y+4	; 0x04
    1094:	3d 81       	ldd	r19, Y+5	; 0x05
    1096:	21 15       	cp	r18, r1
    1098:	31 05       	cpc	r19, r1
    109a:	61 f0       	breq	.+24     	; 0x10b4 <DIO_u8GetBitValue+0x5a>
    109c:	52 c0       	rjmp	.+164    	; 0x1142 <DIO_u8GetBitValue+0xe8>
    109e:	4c 81       	ldd	r20, Y+4	; 0x04
    10a0:	5d 81       	ldd	r21, Y+5	; 0x05
    10a2:	42 30       	cpi	r20, 0x02	; 2
    10a4:	51 05       	cpc	r21, r1
    10a6:	51 f1       	breq	.+84     	; 0x10fc <DIO_u8GetBitValue+0xa2>
    10a8:	8c 81       	ldd	r24, Y+4	; 0x04
    10aa:	9d 81       	ldd	r25, Y+5	; 0x05
    10ac:	83 30       	cpi	r24, 0x03	; 3
    10ae:	91 05       	cpc	r25, r1
    10b0:	b9 f1       	breq	.+110    	; 0x1120 <DIO_u8GetBitValue+0xc6>
    10b2:	47 c0       	rjmp	.+142    	; 0x1142 <DIO_u8GetBitValue+0xe8>
		{

		case PORTA_ID : Local_PinVal=GET_BIT(PINA_REG,Copy_u8PinID)   ; break ;
    10b4:	e9 e3       	ldi	r30, 0x39	; 57
    10b6:	f0 e0       	ldi	r31, 0x00	; 0
    10b8:	80 81       	ld	r24, Z
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	88 2f       	mov	r24, r24
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	a9 01       	movw	r20, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <DIO_u8GetBitValue+0x72>
    10c8:	55 95       	asr	r21
    10ca:	47 95       	ror	r20
    10cc:	8a 95       	dec	r24
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <DIO_u8GetBitValue+0x6e>
    10d0:	ca 01       	movw	r24, r20
    10d2:	81 70       	andi	r24, 0x01	; 1
    10d4:	89 83       	std	Y+1, r24	; 0x01
    10d6:	35 c0       	rjmp	.+106    	; 0x1142 <DIO_u8GetBitValue+0xe8>
		case PORTB_ID : Local_PinVal=GET_BIT(PINB_REG,Copy_u8PinID)   ; break ;
    10d8:	e6 e3       	ldi	r30, 0x36	; 54
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	88 2f       	mov	r24, r24
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	a9 01       	movw	r20, r18
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <DIO_u8GetBitValue+0x96>
    10ec:	55 95       	asr	r21
    10ee:	47 95       	ror	r20
    10f0:	8a 95       	dec	r24
    10f2:	e2 f7       	brpl	.-8      	; 0x10ec <DIO_u8GetBitValue+0x92>
    10f4:	ca 01       	movw	r24, r20
    10f6:	81 70       	andi	r24, 0x01	; 1
    10f8:	89 83       	std	Y+1, r24	; 0x01
    10fa:	23 c0       	rjmp	.+70     	; 0x1142 <DIO_u8GetBitValue+0xe8>
		case PORTC_ID : Local_PinVal=GET_BIT(PINC_REG,Copy_u8PinID)   ; break ;
    10fc:	e3 e3       	ldi	r30, 0x33	; 51
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	88 2f       	mov	r24, r24
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	a9 01       	movw	r20, r18
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <DIO_u8GetBitValue+0xba>
    1110:	55 95       	asr	r21
    1112:	47 95       	ror	r20
    1114:	8a 95       	dec	r24
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <DIO_u8GetBitValue+0xb6>
    1118:	ca 01       	movw	r24, r20
    111a:	81 70       	andi	r24, 0x01	; 1
    111c:	89 83       	std	Y+1, r24	; 0x01
    111e:	11 c0       	rjmp	.+34     	; 0x1142 <DIO_u8GetBitValue+0xe8>
		case PORTD_ID : Local_PinVal=GET_BIT(PIND_REG,Copy_u8PinID)   ; break ;
    1120:	e0 e3       	ldi	r30, 0x30	; 48
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	88 2f       	mov	r24, r24
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	a9 01       	movw	r20, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <DIO_u8GetBitValue+0xde>
    1134:	55 95       	asr	r21
    1136:	47 95       	ror	r20
    1138:	8a 95       	dec	r24
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <DIO_u8GetBitValue+0xda>
    113c:	ca 01       	movw	r24, r20
    113e:	81 70       	andi	r24, 0x01	; 1
    1140:	89 83       	std	Y+1, r24	; 0x01

		}
	}

	return Local_PinVal ;
    1142:	89 81       	ldd	r24, Y+1	; 0x01

}
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	cf 91       	pop	r28
    1150:	df 91       	pop	r29
    1152:	08 95       	ret

00001154 <DIO_u8GetPinValue>:
//
//	}
//
//
u8 DIO_u8GetPinValue(u8 copy_u8PortID , u8 copy_PinID)
{
    1154:	df 93       	push	r29
    1156:	cf 93       	push	r28
    1158:	00 d0       	rcall	.+0      	; 0x115a <DIO_u8GetPinValue+0x6>
    115a:	00 d0       	rcall	.+0      	; 0x115c <DIO_u8GetPinValue+0x8>
    115c:	0f 92       	push	r0
    115e:	cd b7       	in	r28, 0x3d	; 61
    1160:	de b7       	in	r29, 0x3e	; 62
    1162:	8a 83       	std	Y+2, r24	; 0x02
    1164:	6b 83       	std	Y+3, r22	; 0x03
    u8 value = 0;
    1166:	19 82       	std	Y+1, r1	; 0x01
    switch(copy_u8PortID)
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	3d 83       	std	Y+5, r19	; 0x05
    1170:	2c 83       	std	Y+4, r18	; 0x04
    1172:	4c 81       	ldd	r20, Y+4	; 0x04
    1174:	5d 81       	ldd	r21, Y+5	; 0x05
    1176:	41 30       	cpi	r20, 0x01	; 1
    1178:	51 05       	cpc	r21, r1
    117a:	41 f1       	breq	.+80     	; 0x11cc <DIO_u8GetPinValue+0x78>
    117c:	8c 81       	ldd	r24, Y+4	; 0x04
    117e:	9d 81       	ldd	r25, Y+5	; 0x05
    1180:	82 30       	cpi	r24, 0x02	; 2
    1182:	91 05       	cpc	r25, r1
    1184:	34 f4       	brge	.+12     	; 0x1192 <DIO_u8GetPinValue+0x3e>
    1186:	2c 81       	ldd	r18, Y+4	; 0x04
    1188:	3d 81       	ldd	r19, Y+5	; 0x05
    118a:	21 15       	cp	r18, r1
    118c:	31 05       	cpc	r19, r1
    118e:	61 f0       	breq	.+24     	; 0x11a8 <DIO_u8GetPinValue+0x54>
    1190:	52 c0       	rjmp	.+164    	; 0x1236 <DIO_u8GetPinValue+0xe2>
    1192:	4c 81       	ldd	r20, Y+4	; 0x04
    1194:	5d 81       	ldd	r21, Y+5	; 0x05
    1196:	42 30       	cpi	r20, 0x02	; 2
    1198:	51 05       	cpc	r21, r1
    119a:	51 f1       	breq	.+84     	; 0x11f0 <DIO_u8GetPinValue+0x9c>
    119c:	8c 81       	ldd	r24, Y+4	; 0x04
    119e:	9d 81       	ldd	r25, Y+5	; 0x05
    11a0:	83 30       	cpi	r24, 0x03	; 3
    11a2:	91 05       	cpc	r25, r1
    11a4:	b9 f1       	breq	.+110    	; 0x1214 <DIO_u8GetPinValue+0xc0>
    11a6:	47 c0       	rjmp	.+142    	; 0x1236 <DIO_u8GetPinValue+0xe2>
    {
        case PORTA_ID: value = GET_BIT(PINA_REG, copy_PinID); break;
    11a8:	e9 e3       	ldi	r30, 0x39	; 57
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	88 2f       	mov	r24, r24
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	a9 01       	movw	r20, r18
    11ba:	02 c0       	rjmp	.+4      	; 0x11c0 <DIO_u8GetPinValue+0x6c>
    11bc:	55 95       	asr	r21
    11be:	47 95       	ror	r20
    11c0:	8a 95       	dec	r24
    11c2:	e2 f7       	brpl	.-8      	; 0x11bc <DIO_u8GetPinValue+0x68>
    11c4:	ca 01       	movw	r24, r20
    11c6:	81 70       	andi	r24, 0x01	; 1
    11c8:	89 83       	std	Y+1, r24	; 0x01
    11ca:	35 c0       	rjmp	.+106    	; 0x1236 <DIO_u8GetPinValue+0xe2>
        case PORTB_ID: value = GET_BIT(PINB_REG, copy_PinID); break;
    11cc:	e6 e3       	ldi	r30, 0x36	; 54
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	88 2f       	mov	r24, r24
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	a9 01       	movw	r20, r18
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <DIO_u8GetPinValue+0x90>
    11e0:	55 95       	asr	r21
    11e2:	47 95       	ror	r20
    11e4:	8a 95       	dec	r24
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <DIO_u8GetPinValue+0x8c>
    11e8:	ca 01       	movw	r24, r20
    11ea:	81 70       	andi	r24, 0x01	; 1
    11ec:	89 83       	std	Y+1, r24	; 0x01
    11ee:	23 c0       	rjmp	.+70     	; 0x1236 <DIO_u8GetPinValue+0xe2>
        case PORTC_ID: value = GET_BIT(PINC_REG, copy_PinID); break;
    11f0:	e3 e3       	ldi	r30, 0x33	; 51
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	88 2f       	mov	r24, r24
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	a9 01       	movw	r20, r18
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <DIO_u8GetPinValue+0xb4>
    1204:	55 95       	asr	r21
    1206:	47 95       	ror	r20
    1208:	8a 95       	dec	r24
    120a:	e2 f7       	brpl	.-8      	; 0x1204 <DIO_u8GetPinValue+0xb0>
    120c:	ca 01       	movw	r24, r20
    120e:	81 70       	andi	r24, 0x01	; 1
    1210:	89 83       	std	Y+1, r24	; 0x01
    1212:	11 c0       	rjmp	.+34     	; 0x1236 <DIO_u8GetPinValue+0xe2>
        case PORTD_ID: value = GET_BIT(PIND_REG, copy_PinID); break;
    1214:	e0 e3       	ldi	r30, 0x30	; 48
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	88 2f       	mov	r24, r24
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	a9 01       	movw	r20, r18
    1226:	02 c0       	rjmp	.+4      	; 0x122c <DIO_u8GetPinValue+0xd8>
    1228:	55 95       	asr	r21
    122a:	47 95       	ror	r20
    122c:	8a 95       	dec	r24
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <DIO_u8GetPinValue+0xd4>
    1230:	ca 01       	movw	r24, r20
    1232:	81 70       	andi	r24, 0x01	; 1
    1234:	89 83       	std	Y+1, r24	; 0x01
    }

    return value;
    1236:	89 81       	ldd	r24, Y+1	; 0x01
}
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	cf 91       	pop	r28
    1244:	df 91       	pop	r29
    1246:	08 95       	ret

00001248 <DIO_voidToggelPin>:


/*****************************************************************************/
void DIO_voidToggelPin(u8 copy_u8PortID,u8 Copy_u8PinID)
{
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	00 d0       	rcall	.+0      	; 0x124e <DIO_voidToggelPin+0x6>
    124e:	00 d0       	rcall	.+0      	; 0x1250 <DIO_voidToggelPin+0x8>
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
    1254:	89 83       	std	Y+1, r24	; 0x01
    1256:	6a 83       	std	Y+2, r22	; 0x02

	if( Copy_u8PinID>=PIN_0 && Copy_u8PinID<=PIN_7)
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	88 30       	cpi	r24, 0x08	; 8
    125c:	08 f0       	brcs	.+2      	; 0x1260 <DIO_voidToggelPin+0x18>
    125e:	6e c0       	rjmp	.+220    	; 0x133c <DIO_voidToggelPin+0xf4>
	{

		switch (copy_u8PortID)
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	3c 83       	std	Y+4, r19	; 0x04
    1268:	2b 83       	std	Y+3, r18	; 0x03
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	9c 81       	ldd	r25, Y+4	; 0x04
    126e:	81 30       	cpi	r24, 0x01	; 1
    1270:	91 05       	cpc	r25, r1
    1272:	49 f1       	breq	.+82     	; 0x12c6 <DIO_voidToggelPin+0x7e>
    1274:	2b 81       	ldd	r18, Y+3	; 0x03
    1276:	3c 81       	ldd	r19, Y+4	; 0x04
    1278:	22 30       	cpi	r18, 0x02	; 2
    127a:	31 05       	cpc	r19, r1
    127c:	2c f4       	brge	.+10     	; 0x1288 <DIO_voidToggelPin+0x40>
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	9c 81       	ldd	r25, Y+4	; 0x04
    1282:	00 97       	sbiw	r24, 0x00	; 0
    1284:	61 f0       	breq	.+24     	; 0x129e <DIO_voidToggelPin+0x56>
    1286:	5a c0       	rjmp	.+180    	; 0x133c <DIO_voidToggelPin+0xf4>
    1288:	2b 81       	ldd	r18, Y+3	; 0x03
    128a:	3c 81       	ldd	r19, Y+4	; 0x04
    128c:	22 30       	cpi	r18, 0x02	; 2
    128e:	31 05       	cpc	r19, r1
    1290:	71 f1       	breq	.+92     	; 0x12ee <DIO_voidToggelPin+0xa6>
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	9c 81       	ldd	r25, Y+4	; 0x04
    1296:	83 30       	cpi	r24, 0x03	; 3
    1298:	91 05       	cpc	r25, r1
    129a:	e9 f1       	breq	.+122    	; 0x1316 <DIO_voidToggelPin+0xce>
    129c:	4f c0       	rjmp	.+158    	; 0x133c <DIO_voidToggelPin+0xf4>
		{
		case PORTA_ID :  TOG_BIT(PORTA_REG,Copy_u8PinID) ; break ;
    129e:	ab e3       	ldi	r26, 0x3B	; 59
    12a0:	b0 e0       	ldi	r27, 0x00	; 0
    12a2:	eb e3       	ldi	r30, 0x3B	; 59
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	48 2f       	mov	r20, r24
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	02 2e       	mov	r0, r18
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <DIO_voidToggelPin+0x74>
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	0a 94       	dec	r0
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <DIO_voidToggelPin+0x70>
    12c0:	84 27       	eor	r24, r20
    12c2:	8c 93       	st	X, r24
    12c4:	3b c0       	rjmp	.+118    	; 0x133c <DIO_voidToggelPin+0xf4>
		case PORTB_ID :  TOG_BIT(PORTB_REG,Copy_u8PinID) ; break ;
    12c6:	a8 e3       	ldi	r26, 0x38	; 56
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e8 e3       	ldi	r30, 0x38	; 56
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	48 2f       	mov	r20, r24
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	02 2e       	mov	r0, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <DIO_voidToggelPin+0x9c>
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	0a 94       	dec	r0
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <DIO_voidToggelPin+0x98>
    12e8:	84 27       	eor	r24, r20
    12ea:	8c 93       	st	X, r24
    12ec:	27 c0       	rjmp	.+78     	; 0x133c <DIO_voidToggelPin+0xf4>
		case PORTC_ID :  TOG_BIT(PORTC_REG,Copy_u8PinID) ; break ;
    12ee:	a5 e3       	ldi	r26, 0x35	; 53
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	e5 e3       	ldi	r30, 0x35	; 53
    12f4:	f0 e0       	ldi	r31, 0x00	; 0
    12f6:	80 81       	ld	r24, Z
    12f8:	48 2f       	mov	r20, r24
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	28 2f       	mov	r18, r24
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	02 2e       	mov	r0, r18
    1306:	02 c0       	rjmp	.+4      	; 0x130c <DIO_voidToggelPin+0xc4>
    1308:	88 0f       	add	r24, r24
    130a:	99 1f       	adc	r25, r25
    130c:	0a 94       	dec	r0
    130e:	e2 f7       	brpl	.-8      	; 0x1308 <DIO_voidToggelPin+0xc0>
    1310:	84 27       	eor	r24, r20
    1312:	8c 93       	st	X, r24
    1314:	13 c0       	rjmp	.+38     	; 0x133c <DIO_voidToggelPin+0xf4>
		case PORTD_ID :  TOG_BIT(PORTD_REG,Copy_u8PinID) ; break ;
    1316:	a2 e3       	ldi	r26, 0x32	; 50
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e2 e3       	ldi	r30, 0x32	; 50
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	48 2f       	mov	r20, r24
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	02 2e       	mov	r0, r18
    132e:	02 c0       	rjmp	.+4      	; 0x1334 <DIO_voidToggelPin+0xec>
    1330:	88 0f       	add	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	0a 94       	dec	r0
    1336:	e2 f7       	brpl	.-8      	; 0x1330 <DIO_voidToggelPin+0xe8>
    1338:	84 27       	eor	r24, r20
    133a:	8c 93       	st	X, r24
		}

	}
}
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	cf 91       	pop	r28
    1346:	df 91       	pop	r29
    1348:	08 95       	ret

0000134a <GIE_Enable>:
#include "GIE_Interface.h"
#include "GIE_private.h"


void GIE_Enable(void)
{
    134a:	df 93       	push	r29
    134c:	cf 93       	push	r28
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
     SET_BIT(GIE_SREG,I_bit);
    1352:	af e5       	ldi	r26, 0x5F	; 95
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	ef e5       	ldi	r30, 0x5F	; 95
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	80 68       	ori	r24, 0x80	; 128
    135e:	8c 93       	st	X, r24

}
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <GIE_Disable>:

void GIE_Disable(void)
{
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
 CLR_BIT(GIE_SREG,I_bit);
    136e:	af e5       	ldi	r26, 0x5F	; 95
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	ef e5       	ldi	r30, 0x5F	; 95
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	8f 77       	andi	r24, 0x7F	; 127
    137a:	8c 93       	st	X, r24

}
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	08 95       	ret

00001382 <LCD_voidInit>:



/***********************************************************************************/
void LCD_voidInit(void)
{
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	2e 97       	sbiw	r28, 0x0e	; 14
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	de bf       	out	0x3e, r29	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	cd bf       	out	0x3d, r28	; 61
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	a0 ef       	ldi	r26, 0xF0	; 240
    139c:	b1 e4       	ldi	r27, 0x41	; 65
    139e:	8b 87       	std	Y+11, r24	; 0x0b
    13a0:	9c 87       	std	Y+12, r25	; 0x0c
    13a2:	ad 87       	std	Y+13, r26	; 0x0d
    13a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	4a e7       	ldi	r20, 0x7A	; 122
    13b4:	53 e4       	ldi	r21, 0x43	; 67
    13b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ba:	dc 01       	movw	r26, r24
    13bc:	cb 01       	movw	r24, r22
    13be:	8f 83       	std	Y+7, r24	; 0x07
    13c0:	98 87       	std	Y+8, r25	; 0x08
    13c2:	a9 87       	std	Y+9, r26	; 0x09
    13c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13c6:	6f 81       	ldd	r22, Y+7	; 0x07
    13c8:	78 85       	ldd	r23, Y+8	; 0x08
    13ca:	89 85       	ldd	r24, Y+9	; 0x09
    13cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	40 e8       	ldi	r20, 0x80	; 128
    13d4:	5f e3       	ldi	r21, 0x3F	; 63
    13d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13da:	88 23       	and	r24, r24
    13dc:	2c f4       	brge	.+10     	; 0x13e8 <LCD_voidInit+0x66>
		__ticks = 1;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	9e 83       	std	Y+6, r25	; 0x06
    13e4:	8d 83       	std	Y+5, r24	; 0x05
    13e6:	3f c0       	rjmp	.+126    	; 0x1466 <LCD_voidInit+0xe4>
	else if (__tmp > 65535)
    13e8:	6f 81       	ldd	r22, Y+7	; 0x07
    13ea:	78 85       	ldd	r23, Y+8	; 0x08
    13ec:	89 85       	ldd	r24, Y+9	; 0x09
    13ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	3f ef       	ldi	r19, 0xFF	; 255
    13f4:	4f e7       	ldi	r20, 0x7F	; 127
    13f6:	57 e4       	ldi	r21, 0x47	; 71
    13f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13fc:	18 16       	cp	r1, r24
    13fe:	4c f5       	brge	.+82     	; 0x1452 <LCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1400:	6b 85       	ldd	r22, Y+11	; 0x0b
    1402:	7c 85       	ldd	r23, Y+12	; 0x0c
    1404:	8d 85       	ldd	r24, Y+13	; 0x0d
    1406:	9e 85       	ldd	r25, Y+14	; 0x0e
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	40 e2       	ldi	r20, 0x20	; 32
    140e:	51 e4       	ldi	r21, 0x41	; 65
    1410:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	bc 01       	movw	r22, r24
    141a:	cd 01       	movw	r24, r26
    141c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	9e 83       	std	Y+6, r25	; 0x06
    1426:	8d 83       	std	Y+5, r24	; 0x05
    1428:	0f c0       	rjmp	.+30     	; 0x1448 <LCD_voidInit+0xc6>
    142a:	89 e1       	ldi	r24, 0x19	; 25
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	9c 83       	std	Y+4, r25	; 0x04
    1430:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	9c 81       	ldd	r25, Y+4	; 0x04
    1436:	01 97       	sbiw	r24, 0x01	; 1
    1438:	f1 f7       	brne	.-4      	; 0x1436 <LCD_voidInit+0xb4>
    143a:	9c 83       	std	Y+4, r25	; 0x04
    143c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    143e:	8d 81       	ldd	r24, Y+5	; 0x05
    1440:	9e 81       	ldd	r25, Y+6	; 0x06
    1442:	01 97       	sbiw	r24, 0x01	; 1
    1444:	9e 83       	std	Y+6, r25	; 0x06
    1446:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1448:	8d 81       	ldd	r24, Y+5	; 0x05
    144a:	9e 81       	ldd	r25, Y+6	; 0x06
    144c:	00 97       	sbiw	r24, 0x00	; 0
    144e:	69 f7       	brne	.-38     	; 0x142a <LCD_voidInit+0xa8>
    1450:	14 c0       	rjmp	.+40     	; 0x147a <LCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1452:	6f 81       	ldd	r22, Y+7	; 0x07
    1454:	78 85       	ldd	r23, Y+8	; 0x08
    1456:	89 85       	ldd	r24, Y+9	; 0x09
    1458:	9a 85       	ldd	r25, Y+10	; 0x0a
    145a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	9e 83       	std	Y+6, r25	; 0x06
    1464:	8d 83       	std	Y+5, r24	; 0x05
    1466:	8d 81       	ldd	r24, Y+5	; 0x05
    1468:	9e 81       	ldd	r25, Y+6	; 0x06
    146a:	9a 83       	std	Y+2, r25	; 0x02
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	9a 81       	ldd	r25, Y+2	; 0x02
    1472:	01 97       	sbiw	r24, 0x01	; 1
    1474:	f1 f7       	brne	.-4      	; 0x1472 <LCD_voidInit+0xf0>
    1476:	9a 83       	std	Y+2, r25	; 0x02
    1478:	89 83       	std	Y+1, r24	; 0x01
	/* Delay 30ms to ensure the initialization of the LCD driver */
	_delay_ms(30);

	/* Set Control pins as output */
	DIO_voidSetPinDirection(RS_PORT,RS_PIN,PIN_OUTPUT);
    147a:	82 e0       	ldi	r24, 0x02	; 2
    147c:	66 e0       	ldi	r22, 0x06	; 6
    147e:	41 e0       	ldi	r20, 0x01	; 1
    1480:	0e 94 25 06 	call	0xc4a	; 0xc4a <DIO_voidSetPinDirection>
	// DIO_voidSetPinDirection(RW_PORT,RW_PIN,PIN_OUTPUT);
	DIO_voidSetPinDirection(EN_PORT, EN_PIN,PIN_OUTPUT);
    1484:	82 e0       	ldi	r24, 0x02	; 2
    1486:	67 e0       	ldi	r22, 0x07	; 7
    1488:	41 e0       	ldi	r20, 0x01	; 1
    148a:	0e 94 25 06 	call	0xc4a	; 0xc4a <DIO_voidSetPinDirection>

	/* Set Data Port Direction as output */
	DIO_voidSetPinDirection(D4_PORT,D4_PIN,PIN_OUTPUT);
    148e:	82 e0       	ldi	r24, 0x02	; 2
    1490:	62 e0       	ldi	r22, 0x02	; 2
    1492:	41 e0       	ldi	r20, 0x01	; 1
    1494:	0e 94 25 06 	call	0xc4a	; 0xc4a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D5_PORT,D5_PIN,PIN_OUTPUT);
    1498:	82 e0       	ldi	r24, 0x02	; 2
    149a:	63 e0       	ldi	r22, 0x03	; 3
    149c:	41 e0       	ldi	r20, 0x01	; 1
    149e:	0e 94 25 06 	call	0xc4a	; 0xc4a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D6_PORT,D6_PIN,PIN_OUTPUT);
    14a2:	82 e0       	ldi	r24, 0x02	; 2
    14a4:	64 e0       	ldi	r22, 0x04	; 4
    14a6:	41 e0       	ldi	r20, 0x01	; 1
    14a8:	0e 94 25 06 	call	0xc4a	; 0xc4a <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(D7_PORT,D7_PIN,PIN_OUTPUT);
    14ac:	82 e0       	ldi	r24, 0x02	; 2
    14ae:	65 e0       	ldi	r22, 0x05	; 5
    14b0:	41 e0       	ldi	r20, 0x01	; 1
    14b2:	0e 94 25 06 	call	0xc4a	; 0xc4a <DIO_voidSetPinDirection>

	/* Return Home */
	LCD_voidWriteCommand(RETURN_HOME );
    14b6:	82 e0       	ldi	r24, 0x02	; 2
    14b8:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <LCD_voidWriteCommand>

	/* Configure as 4-bit data mode*/
	LCD_voidWriteCommand(FUNCTION_SET_4BIT_2LINES_5X7_DOTS);
    14bc:	88 e2       	ldi	r24, 0x28	; 40
    14be:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <LCD_voidWriteCommand>

	/*Display ON OFF Control */
	LCD_voidWriteCommand(DISPLAY_ON_CURSOR_OFF);
    14c2:	8c e0       	ldi	r24, 0x0C	; 12
    14c4:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <LCD_voidWriteCommand>

	/* Clear Display */
	LCD_voidWriteCommand(DISPLAY_CLEAR);
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <LCD_voidWriteCommand>

	/*ENTRY MODE*/
	LCD_voidWriteCommand(ENTRY_MODE_SET);
    14ce:	86 e0       	ldi	r24, 0x06	; 6
    14d0:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <LCD_voidWriteCommand>

}
    14d4:	2e 96       	adiw	r28, 0x0e	; 14
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	f8 94       	cli
    14da:	de bf       	out	0x3e, r29	; 62
    14dc:	0f be       	out	0x3f, r0	; 63
    14de:	cd bf       	out	0x3d, r28	; 61
    14e0:	cf 91       	pop	r28
    14e2:	df 91       	pop	r29
    14e4:	08 95       	ret

000014e6 <LCD_voidWriteBitsToSend>:
/***********************************************************************************/

static void LCD_voidWriteBitsToSend(u8 copy_u8Byte)
{
    14e6:	df 93       	push	r29
    14e8:	cf 93       	push	r28
    14ea:	cd b7       	in	r28, 0x3d	; 61
    14ec:	de b7       	in	r29, 0x3e	; 62
    14ee:	6d 97       	sbiw	r28, 0x1d	; 29
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	f8 94       	cli
    14f4:	de bf       	out	0x3e, r29	; 62
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	cd bf       	out	0x3d, r28	; 61
    14fa:	8d 8f       	std	Y+29, r24	; 0x1d



	/*prepare 4 bits MSB to send */
	DIO_voidSetPinValue(D7_PORT,D7_PIN, GET_BIT(copy_u8Byte,PIN_7) );
    14fc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14fe:	98 2f       	mov	r25, r24
    1500:	99 1f       	adc	r25, r25
    1502:	99 27       	eor	r25, r25
    1504:	99 1f       	adc	r25, r25
    1506:	82 e0       	ldi	r24, 0x02	; 2
    1508:	65 e0       	ldi	r22, 0x05	; 5
    150a:	49 2f       	mov	r20, r25
    150c:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D6_PORT,D6_PIN, GET_BIT(copy_u8Byte,PIN_6) );
    1510:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1512:	82 95       	swap	r24
    1514:	86 95       	lsr	r24
    1516:	86 95       	lsr	r24
    1518:	83 70       	andi	r24, 0x03	; 3
    151a:	98 2f       	mov	r25, r24
    151c:	91 70       	andi	r25, 0x01	; 1
    151e:	82 e0       	ldi	r24, 0x02	; 2
    1520:	64 e0       	ldi	r22, 0x04	; 4
    1522:	49 2f       	mov	r20, r25
    1524:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D5_PORT,D5_PIN, GET_BIT(copy_u8Byte,PIN_5) );
    1528:	8d 8d       	ldd	r24, Y+29	; 0x1d
    152a:	82 95       	swap	r24
    152c:	86 95       	lsr	r24
    152e:	87 70       	andi	r24, 0x07	; 7
    1530:	98 2f       	mov	r25, r24
    1532:	91 70       	andi	r25, 0x01	; 1
    1534:	82 e0       	ldi	r24, 0x02	; 2
    1536:	63 e0       	ldi	r22, 0x03	; 3
    1538:	49 2f       	mov	r20, r25
    153a:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D4_PORT,D4_PIN, GET_BIT(copy_u8Byte,PIN_4) );
    153e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1540:	82 95       	swap	r24
    1542:	8f 70       	andi	r24, 0x0F	; 15
    1544:	98 2f       	mov	r25, r24
    1546:	91 70       	andi	r25, 0x01	; 1
    1548:	82 e0       	ldi	r24, 0x02	; 2
    154a:	62 e0       	ldi	r22, 0x02	; 2
    154c:	49 2f       	mov	r20, r25
    154e:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_voidSetPinValue>

	/* open EN--> make it high --- then after 2m close EN -->make it low*/
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_HIGH);
    1552:	82 e0       	ldi	r24, 0x02	; 2
    1554:	67 e0       	ldi	r22, 0x07	; 7
    1556:	41 e0       	ldi	r20, 0x01	; 1
    1558:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_voidSetPinValue>
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	a0 e0       	ldi	r26, 0x00	; 0
    1562:	b0 e4       	ldi	r27, 0x40	; 64
    1564:	89 8f       	std	Y+25, r24	; 0x19
    1566:	9a 8f       	std	Y+26, r25	; 0x1a
    1568:	ab 8f       	std	Y+27, r26	; 0x1b
    156a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    156c:	69 8d       	ldd	r22, Y+25	; 0x19
    156e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1570:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1572:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	4a e7       	ldi	r20, 0x7A	; 122
    157a:	53 e4       	ldi	r21, 0x43	; 67
    157c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	8d 8b       	std	Y+21, r24	; 0x15
    1586:	9e 8b       	std	Y+22, r25	; 0x16
    1588:	af 8b       	std	Y+23, r26	; 0x17
    158a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    158c:	6d 89       	ldd	r22, Y+21	; 0x15
    158e:	7e 89       	ldd	r23, Y+22	; 0x16
    1590:	8f 89       	ldd	r24, Y+23	; 0x17
    1592:	98 8d       	ldd	r25, Y+24	; 0x18
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	40 e8       	ldi	r20, 0x80	; 128
    159a:	5f e3       	ldi	r21, 0x3F	; 63
    159c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15a0:	88 23       	and	r24, r24
    15a2:	2c f4       	brge	.+10     	; 0x15ae <LCD_voidWriteBitsToSend+0xc8>
		__ticks = 1;
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	9c 8b       	std	Y+20, r25	; 0x14
    15aa:	8b 8b       	std	Y+19, r24	; 0x13
    15ac:	3f c0       	rjmp	.+126    	; 0x162c <LCD_voidWriteBitsToSend+0x146>
	else if (__tmp > 65535)
    15ae:	6d 89       	ldd	r22, Y+21	; 0x15
    15b0:	7e 89       	ldd	r23, Y+22	; 0x16
    15b2:	8f 89       	ldd	r24, Y+23	; 0x17
    15b4:	98 8d       	ldd	r25, Y+24	; 0x18
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	3f ef       	ldi	r19, 0xFF	; 255
    15ba:	4f e7       	ldi	r20, 0x7F	; 127
    15bc:	57 e4       	ldi	r21, 0x47	; 71
    15be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15c2:	18 16       	cp	r1, r24
    15c4:	4c f5       	brge	.+82     	; 0x1618 <LCD_voidWriteBitsToSend+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c6:	69 8d       	ldd	r22, Y+25	; 0x19
    15c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	40 e2       	ldi	r20, 0x20	; 32
    15d4:	51 e4       	ldi	r21, 0x41	; 65
    15d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	bc 01       	movw	r22, r24
    15e0:	cd 01       	movw	r24, r26
    15e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e6:	dc 01       	movw	r26, r24
    15e8:	cb 01       	movw	r24, r22
    15ea:	9c 8b       	std	Y+20, r25	; 0x14
    15ec:	8b 8b       	std	Y+19, r24	; 0x13
    15ee:	0f c0       	rjmp	.+30     	; 0x160e <LCD_voidWriteBitsToSend+0x128>
    15f0:	89 e1       	ldi	r24, 0x19	; 25
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	9a 8b       	std	Y+18, r25	; 0x12
    15f6:	89 8b       	std	Y+17, r24	; 0x11
    15f8:	89 89       	ldd	r24, Y+17	; 0x11
    15fa:	9a 89       	ldd	r25, Y+18	; 0x12
    15fc:	01 97       	sbiw	r24, 0x01	; 1
    15fe:	f1 f7       	brne	.-4      	; 0x15fc <LCD_voidWriteBitsToSend+0x116>
    1600:	9a 8b       	std	Y+18, r25	; 0x12
    1602:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1604:	8b 89       	ldd	r24, Y+19	; 0x13
    1606:	9c 89       	ldd	r25, Y+20	; 0x14
    1608:	01 97       	sbiw	r24, 0x01	; 1
    160a:	9c 8b       	std	Y+20, r25	; 0x14
    160c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    160e:	8b 89       	ldd	r24, Y+19	; 0x13
    1610:	9c 89       	ldd	r25, Y+20	; 0x14
    1612:	00 97       	sbiw	r24, 0x00	; 0
    1614:	69 f7       	brne	.-38     	; 0x15f0 <LCD_voidWriteBitsToSend+0x10a>
    1616:	14 c0       	rjmp	.+40     	; 0x1640 <LCD_voidWriteBitsToSend+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1618:	6d 89       	ldd	r22, Y+21	; 0x15
    161a:	7e 89       	ldd	r23, Y+22	; 0x16
    161c:	8f 89       	ldd	r24, Y+23	; 0x17
    161e:	98 8d       	ldd	r25, Y+24	; 0x18
    1620:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	9c 8b       	std	Y+20, r25	; 0x14
    162a:	8b 8b       	std	Y+19, r24	; 0x13
    162c:	8b 89       	ldd	r24, Y+19	; 0x13
    162e:	9c 89       	ldd	r25, Y+20	; 0x14
    1630:	98 8b       	std	Y+16, r25	; 0x10
    1632:	8f 87       	std	Y+15, r24	; 0x0f
    1634:	8f 85       	ldd	r24, Y+15	; 0x0f
    1636:	98 89       	ldd	r25, Y+16	; 0x10
    1638:	01 97       	sbiw	r24, 0x01	; 1
    163a:	f1 f7       	brne	.-4      	; 0x1638 <LCD_voidWriteBitsToSend+0x152>
    163c:	98 8b       	std	Y+16, r25	; 0x10
    163e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_LOW);
    1640:	82 e0       	ldi	r24, 0x02	; 2
    1642:	67 e0       	ldi	r22, 0x07	; 7
    1644:	40 e0       	ldi	r20, 0x00	; 0
    1646:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_voidSetPinValue>


	/*prepare 4 bits LSB to send */
	DIO_voidSetPinValue(D7_PORT,D7_PIN, GET_BIT(copy_u8Byte,PIN_3) );
    164a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    164c:	86 95       	lsr	r24
    164e:	86 95       	lsr	r24
    1650:	86 95       	lsr	r24
    1652:	98 2f       	mov	r25, r24
    1654:	91 70       	andi	r25, 0x01	; 1
    1656:	82 e0       	ldi	r24, 0x02	; 2
    1658:	65 e0       	ldi	r22, 0x05	; 5
    165a:	49 2f       	mov	r20, r25
    165c:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D6_PORT,D6_PIN, GET_BIT(copy_u8Byte,PIN_2) );
    1660:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1662:	86 95       	lsr	r24
    1664:	86 95       	lsr	r24
    1666:	98 2f       	mov	r25, r24
    1668:	91 70       	andi	r25, 0x01	; 1
    166a:	82 e0       	ldi	r24, 0x02	; 2
    166c:	64 e0       	ldi	r22, 0x04	; 4
    166e:	49 2f       	mov	r20, r25
    1670:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D5_PORT,D5_PIN, GET_BIT(copy_u8Byte,PIN_1) );
    1674:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1676:	86 95       	lsr	r24
    1678:	98 2f       	mov	r25, r24
    167a:	91 70       	andi	r25, 0x01	; 1
    167c:	82 e0       	ldi	r24, 0x02	; 2
    167e:	63 e0       	ldi	r22, 0x03	; 3
    1680:	49 2f       	mov	r20, r25
    1682:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(D4_PORT,D4_PIN, GET_BIT(copy_u8Byte,PIN_0) );
    1686:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1688:	98 2f       	mov	r25, r24
    168a:	91 70       	andi	r25, 0x01	; 1
    168c:	82 e0       	ldi	r24, 0x02	; 2
    168e:	62 e0       	ldi	r22, 0x02	; 2
    1690:	49 2f       	mov	r20, r25
    1692:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_voidSetPinValue>

	/* open EN--> make it high --- then after 2m -- close EN -->make it low*/
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_HIGH);
    1696:	82 e0       	ldi	r24, 0x02	; 2
    1698:	67 e0       	ldi	r22, 0x07	; 7
    169a:	41 e0       	ldi	r20, 0x01	; 1
    169c:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_voidSetPinValue>
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	a0 e0       	ldi	r26, 0x00	; 0
    16a6:	b0 e4       	ldi	r27, 0x40	; 64
    16a8:	8b 87       	std	Y+11, r24	; 0x0b
    16aa:	9c 87       	std	Y+12, r25	; 0x0c
    16ac:	ad 87       	std	Y+13, r26	; 0x0d
    16ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    16b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    16b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    16b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	4a e7       	ldi	r20, 0x7A	; 122
    16be:	53 e4       	ldi	r21, 0x43	; 67
    16c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c4:	dc 01       	movw	r26, r24
    16c6:	cb 01       	movw	r24, r22
    16c8:	8f 83       	std	Y+7, r24	; 0x07
    16ca:	98 87       	std	Y+8, r25	; 0x08
    16cc:	a9 87       	std	Y+9, r26	; 0x09
    16ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16d0:	6f 81       	ldd	r22, Y+7	; 0x07
    16d2:	78 85       	ldd	r23, Y+8	; 0x08
    16d4:	89 85       	ldd	r24, Y+9	; 0x09
    16d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	40 e8       	ldi	r20, 0x80	; 128
    16de:	5f e3       	ldi	r21, 0x3F	; 63
    16e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16e4:	88 23       	and	r24, r24
    16e6:	2c f4       	brge	.+10     	; 0x16f2 <LCD_voidWriteBitsToSend+0x20c>
		__ticks = 1;
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	9e 83       	std	Y+6, r25	; 0x06
    16ee:	8d 83       	std	Y+5, r24	; 0x05
    16f0:	3f c0       	rjmp	.+126    	; 0x1770 <LCD_voidWriteBitsToSend+0x28a>
	else if (__tmp > 65535)
    16f2:	6f 81       	ldd	r22, Y+7	; 0x07
    16f4:	78 85       	ldd	r23, Y+8	; 0x08
    16f6:	89 85       	ldd	r24, Y+9	; 0x09
    16f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    16fa:	20 e0       	ldi	r18, 0x00	; 0
    16fc:	3f ef       	ldi	r19, 0xFF	; 255
    16fe:	4f e7       	ldi	r20, 0x7F	; 127
    1700:	57 e4       	ldi	r21, 0x47	; 71
    1702:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1706:	18 16       	cp	r1, r24
    1708:	4c f5       	brge	.+82     	; 0x175c <LCD_voidWriteBitsToSend+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    170a:	6b 85       	ldd	r22, Y+11	; 0x0b
    170c:	7c 85       	ldd	r23, Y+12	; 0x0c
    170e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1710:	9e 85       	ldd	r25, Y+14	; 0x0e
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	40 e2       	ldi	r20, 0x20	; 32
    1718:	51 e4       	ldi	r21, 0x41	; 65
    171a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	bc 01       	movw	r22, r24
    1724:	cd 01       	movw	r24, r26
    1726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	9e 83       	std	Y+6, r25	; 0x06
    1730:	8d 83       	std	Y+5, r24	; 0x05
    1732:	0f c0       	rjmp	.+30     	; 0x1752 <LCD_voidWriteBitsToSend+0x26c>
    1734:	89 e1       	ldi	r24, 0x19	; 25
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	9c 83       	std	Y+4, r25	; 0x04
    173a:	8b 83       	std	Y+3, r24	; 0x03
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	9c 81       	ldd	r25, Y+4	; 0x04
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	f1 f7       	brne	.-4      	; 0x1740 <LCD_voidWriteBitsToSend+0x25a>
    1744:	9c 83       	std	Y+4, r25	; 0x04
    1746:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1748:	8d 81       	ldd	r24, Y+5	; 0x05
    174a:	9e 81       	ldd	r25, Y+6	; 0x06
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	9e 83       	std	Y+6, r25	; 0x06
    1750:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1752:	8d 81       	ldd	r24, Y+5	; 0x05
    1754:	9e 81       	ldd	r25, Y+6	; 0x06
    1756:	00 97       	sbiw	r24, 0x00	; 0
    1758:	69 f7       	brne	.-38     	; 0x1734 <LCD_voidWriteBitsToSend+0x24e>
    175a:	14 c0       	rjmp	.+40     	; 0x1784 <LCD_voidWriteBitsToSend+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    175c:	6f 81       	ldd	r22, Y+7	; 0x07
    175e:	78 85       	ldd	r23, Y+8	; 0x08
    1760:	89 85       	ldd	r24, Y+9	; 0x09
    1762:	9a 85       	ldd	r25, Y+10	; 0x0a
    1764:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1768:	dc 01       	movw	r26, r24
    176a:	cb 01       	movw	r24, r22
    176c:	9e 83       	std	Y+6, r25	; 0x06
    176e:	8d 83       	std	Y+5, r24	; 0x05
    1770:	8d 81       	ldd	r24, Y+5	; 0x05
    1772:	9e 81       	ldd	r25, Y+6	; 0x06
    1774:	9a 83       	std	Y+2, r25	; 0x02
    1776:	89 83       	std	Y+1, r24	; 0x01
    1778:	89 81       	ldd	r24, Y+1	; 0x01
    177a:	9a 81       	ldd	r25, Y+2	; 0x02
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	f1 f7       	brne	.-4      	; 0x177c <LCD_voidWriteBitsToSend+0x296>
    1780:	9a 83       	std	Y+2, r25	; 0x02
    1782:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_voidSetPinValue(EN_PORT,EN_PIN, PIN_LOW);
    1784:	82 e0       	ldi	r24, 0x02	; 2
    1786:	67 e0       	ldi	r22, 0x07	; 7
    1788:	40 e0       	ldi	r20, 0x00	; 0
    178a:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_voidSetPinValue>




}
    178e:	6d 96       	adiw	r28, 0x1d	; 29
    1790:	0f b6       	in	r0, 0x3f	; 63
    1792:	f8 94       	cli
    1794:	de bf       	out	0x3e, r29	; 62
    1796:	0f be       	out	0x3f, r0	; 63
    1798:	cd bf       	out	0x3d, r28	; 61
    179a:	cf 91       	pop	r28
    179c:	df 91       	pop	r29
    179e:	08 95       	ret

000017a0 <LCD_voidWriteData>:



/***********************************************************************************/
void LCD_voidWriteData(u8 copy_u8data)
{
    17a0:	df 93       	push	r29
    17a2:	cf 93       	push	r28
    17a4:	0f 92       	push	r0
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
    17aa:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS to HIGH */
	DIO_voidSetPinValue(RS_PORT,RS_PIN,PIN_HIGH);
    17ac:	82 e0       	ldi	r24, 0x02	; 2
    17ae:	66 e0       	ldi	r22, 0x06	; 6
    17b0:	41 e0       	ldi	r20, 0x01	; 1
    17b2:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_voidSetPinValue>

	LCD_voidWriteBitsToSend(copy_u8data);
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
    17b8:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidWriteBitsToSend>
}
    17bc:	0f 90       	pop	r0
    17be:	cf 91       	pop	r28
    17c0:	df 91       	pop	r29
    17c2:	08 95       	ret

000017c4 <LCD_voidWriteCommand>:


/***********************************************************************************/

void LCD_voidWriteCommand(u8 copy_u8Command)
{
    17c4:	df 93       	push	r29
    17c6:	cf 93       	push	r28
    17c8:	0f 92       	push	r0
    17ca:	cd b7       	in	r28, 0x3d	; 61
    17cc:	de b7       	in	r29, 0x3e	; 62
    17ce:	89 83       	std	Y+1, r24	; 0x01
	/*Set RS to low */
	DIO_voidSetPinValue(RS_PORT,RS_PIN,PIN_LOW);
    17d0:	82 e0       	ldi	r24, 0x02	; 2
    17d2:	66 e0       	ldi	r22, 0x06	; 6
    17d4:	40 e0       	ldi	r20, 0x00	; 0
    17d6:	0e 94 29 07 	call	0xe52	; 0xe52 <DIO_voidSetPinValue>


	LCD_voidWriteBitsToSend(copy_u8Command);
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <LCD_voidWriteBitsToSend>
}
    17e0:	0f 90       	pop	r0
    17e2:	cf 91       	pop	r28
    17e4:	df 91       	pop	r29
    17e6:	08 95       	ret

000017e8 <LCD_voidWriteString>:
/***********************************************************************************/



void LCD_voidWriteString(u8 * copy_str)
{
    17e8:	df 93       	push	r29
    17ea:	cf 93       	push	r28
    17ec:	00 d0       	rcall	.+0      	; 0x17ee <LCD_voidWriteString+0x6>
    17ee:	00 d0       	rcall	.+0      	; 0x17f0 <LCD_voidWriteString+0x8>
    17f0:	cd b7       	in	r28, 0x3d	; 61
    17f2:	de b7       	in	r29, 0x3e	; 62
    17f4:	9c 83       	std	Y+4, r25	; 0x04
    17f6:	8b 83       	std	Y+3, r24	; 0x03

	u16 i= ZERO;
    17f8:	1a 82       	std	Y+2, r1	; 0x02
    17fa:	19 82       	std	Y+1, r1	; 0x01
    17fc:	0f c0       	rjmp	.+30     	; 0x181c <LCD_voidWriteString+0x34>
	while(copy_str[i] != '\0')
	{
		LCD_voidWriteData(copy_str[i]);
    17fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1800:	3c 81       	ldd	r19, Y+4	; 0x04
    1802:	89 81       	ldd	r24, Y+1	; 0x01
    1804:	9a 81       	ldd	r25, Y+2	; 0x02
    1806:	f9 01       	movw	r30, r18
    1808:	e8 0f       	add	r30, r24
    180a:	f9 1f       	adc	r31, r25
    180c:	80 81       	ld	r24, Z
    180e:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <LCD_voidWriteData>
		i++;
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	9a 81       	ldd	r25, Y+2	; 0x02
    1816:	01 96       	adiw	r24, 0x01	; 1
    1818:	9a 83       	std	Y+2, r25	; 0x02
    181a:	89 83       	std	Y+1, r24	; 0x01

void LCD_voidWriteString(u8 * copy_str)
{

	u16 i= ZERO;
	while(copy_str[i] != '\0')
    181c:	2b 81       	ldd	r18, Y+3	; 0x03
    181e:	3c 81       	ldd	r19, Y+4	; 0x04
    1820:	89 81       	ldd	r24, Y+1	; 0x01
    1822:	9a 81       	ldd	r25, Y+2	; 0x02
    1824:	f9 01       	movw	r30, r18
    1826:	e8 0f       	add	r30, r24
    1828:	f9 1f       	adc	r31, r25
    182a:	80 81       	ld	r24, Z
    182c:	88 23       	and	r24, r24
    182e:	39 f7       	brne	.-50     	; 0x17fe <LCD_voidWriteString+0x16>
	{
		LCD_voidWriteData(copy_str[i]);
		i++;
	}
}
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	0f 90       	pop	r0
    1838:	cf 91       	pop	r28
    183a:	df 91       	pop	r29
    183c:	08 95       	ret

0000183e <LCD_voidGoToXY>:


/***********************************************************************************/
void LCD_voidGoToXY(u8 copy_u8row,u8 copy_u8col)
{
    183e:	df 93       	push	r29
    1840:	cf 93       	push	r28
    1842:	cd b7       	in	r28, 0x3d	; 61
    1844:	de b7       	in	r29, 0x3e	; 62
    1846:	27 97       	sbiw	r28, 0x07	; 7
    1848:	0f b6       	in	r0, 0x3f	; 63
    184a:	f8 94       	cli
    184c:	de bf       	out	0x3e, r29	; 62
    184e:	0f be       	out	0x3f, r0	; 63
    1850:	cd bf       	out	0x3d, r28	; 61
    1852:	8e 83       	std	Y+6, r24	; 0x06
    1854:	6f 83       	std	Y+7, r22	; 0x07
	 * 0x40 --> address row 1
	 * 0x14 --> address row 2
	 * 0x54 --> address row 3
	 * copy_u8col --> col num
	 * */
	u8 rows_address[4]={0x00,0x40,0x14,0x54};
    1856:	1a 82       	std	Y+2, r1	; 0x02
    1858:	80 e4       	ldi	r24, 0x40	; 64
    185a:	8b 83       	std	Y+3, r24	; 0x03
    185c:	84 e1       	ldi	r24, 0x14	; 20
    185e:	8c 83       	std	Y+4, r24	; 0x04
    1860:	84 e5       	ldi	r24, 0x54	; 84
    1862:	8d 83       	std	Y+5, r24	; 0x05

	u8 local_address=( rows_address[copy_u8row]  + copy_u8col ) + SET_DDRAM_ADDRESS ;
    1864:	8e 81       	ldd	r24, Y+6	; 0x06
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	ce 01       	movw	r24, r28
    186c:	02 96       	adiw	r24, 0x02	; 2
    186e:	fc 01       	movw	r30, r24
    1870:	e2 0f       	add	r30, r18
    1872:	f3 1f       	adc	r31, r19
    1874:	90 81       	ld	r25, Z
    1876:	8f 81       	ldd	r24, Y+7	; 0x07
    1878:	89 0f       	add	r24, r25
    187a:	80 58       	subi	r24, 0x80	; 128
    187c:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidWriteCommand(local_address) ;
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <LCD_voidWriteCommand>

}
    1884:	27 96       	adiw	r28, 0x07	; 7
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	f8 94       	cli
    188a:	de bf       	out	0x3e, r29	; 62
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	cd bf       	out	0x3d, r28	; 61
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <LCD_voidClear>:
}
 */
/***********************************************************************************/

void LCD_voidClear(void)
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
	LCD_voidWriteCommand( DISPLAY_CLEAR);
    189e:	81 e0       	ldi	r24, 0x01	; 1
    18a0:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <LCD_voidWriteCommand>

}
    18a4:	cf 91       	pop	r28
    18a6:	df 91       	pop	r29
    18a8:	08 95       	ret

000018aa <LCD_voidWriteNumber>:

/***********************************************************************************/

void LCD_voidWriteNumber( u32 Copy_u8num )

{
    18aa:	0f 93       	push	r16
    18ac:	1f 93       	push	r17
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	cd b7       	in	r28, 0x3d	; 61
    18b4:	de b7       	in	r29, 0x3e	; 62
    18b6:	63 97       	sbiw	r28, 0x13	; 19
    18b8:	0f b6       	in	r0, 0x3f	; 63
    18ba:	f8 94       	cli
    18bc:	de bf       	out	0x3e, r29	; 62
    18be:	0f be       	out	0x3f, r0	; 63
    18c0:	cd bf       	out	0x3d, r28	; 61
    18c2:	68 8b       	std	Y+16, r22	; 0x10
    18c4:	79 8b       	std	Y+17, r23	; 0x11
    18c6:	8a 8b       	std	Y+18, r24	; 0x12
    18c8:	9b 8b       	std	Y+19, r25	; 0x13
	u32 LOCAL_NUMBER=Copy_u8num ;
    18ca:	88 89       	ldd	r24, Y+16	; 0x10
    18cc:	99 89       	ldd	r25, Y+17	; 0x11
    18ce:	aa 89       	ldd	r26, Y+18	; 0x12
    18d0:	bb 89       	ldd	r27, Y+19	; 0x13
    18d2:	8a 83       	std	Y+2, r24	; 0x02
    18d4:	9b 83       	std	Y+3, r25	; 0x03
    18d6:	ac 83       	std	Y+4, r26	; 0x04
    18d8:	bd 83       	std	Y+5, r27	; 0x05
	u8 LOCAL_ARR[10]   ;
	u8 i=ZERO ;
    18da:	19 82       	std	Y+1, r1	; 0x01


	do
	{
		LOCAL_ARR[i]= ( (LOCAL_NUMBER%10)+'0' );
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	08 2f       	mov	r16, r24
    18e0:	10 e0       	ldi	r17, 0x00	; 0
    18e2:	8a 81       	ldd	r24, Y+2	; 0x02
    18e4:	9b 81       	ldd	r25, Y+3	; 0x03
    18e6:	ac 81       	ldd	r26, Y+4	; 0x04
    18e8:	bd 81       	ldd	r27, Y+5	; 0x05
    18ea:	2a e0       	ldi	r18, 0x0A	; 10
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	40 e0       	ldi	r20, 0x00	; 0
    18f0:	50 e0       	ldi	r21, 0x00	; 0
    18f2:	bc 01       	movw	r22, r24
    18f4:	cd 01       	movw	r24, r26
    18f6:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__udivmodsi4>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	28 2f       	mov	r18, r24
    1900:	20 5d       	subi	r18, 0xD0	; 208
    1902:	ce 01       	movw	r24, r28
    1904:	06 96       	adiw	r24, 0x06	; 6
    1906:	fc 01       	movw	r30, r24
    1908:	e0 0f       	add	r30, r16
    190a:	f1 1f       	adc	r31, r17
    190c:	20 83       	st	Z, r18
		LOCAL_NUMBER=LOCAL_NUMBER/10 ;
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	9b 81       	ldd	r25, Y+3	; 0x03
    1912:	ac 81       	ldd	r26, Y+4	; 0x04
    1914:	bd 81       	ldd	r27, Y+5	; 0x05
    1916:	2a e0       	ldi	r18, 0x0A	; 10
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	40 e0       	ldi	r20, 0x00	; 0
    191c:	50 e0       	ldi	r21, 0x00	; 0
    191e:	bc 01       	movw	r22, r24
    1920:	cd 01       	movw	r24, r26
    1922:	0e 94 81 0f 	call	0x1f02	; 0x1f02 <__udivmodsi4>
    1926:	da 01       	movw	r26, r20
    1928:	c9 01       	movw	r24, r18
    192a:	8a 83       	std	Y+2, r24	; 0x02
    192c:	9b 83       	std	Y+3, r25	; 0x03
    192e:	ac 83       	std	Y+4, r26	; 0x04
    1930:	bd 83       	std	Y+5, r27	; 0x05
		i++ ;
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	8f 5f       	subi	r24, 0xFF	; 255
    1936:	89 83       	std	Y+1, r24	; 0x01
	}
	while(LOCAL_NUMBER!=ZERO);
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	9b 81       	ldd	r25, Y+3	; 0x03
    193c:	ac 81       	ldd	r26, Y+4	; 0x04
    193e:	bd 81       	ldd	r27, Y+5	; 0x05
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	a1 05       	cpc	r26, r1
    1944:	b1 05       	cpc	r27, r1
    1946:	51 f6       	brne	.-108    	; 0x18dc <LCD_voidWriteNumber+0x32>
    1948:	11 c0       	rjmp	.+34     	; 0x196c <LCD_voidWriteNumber+0xc2>


	for(;i>0;i--)
	{
		LCD_voidWriteData(LOCAL_ARR[i-ONE]);
    194a:	89 81       	ldd	r24, Y+1	; 0x01
    194c:	88 2f       	mov	r24, r24
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	9c 01       	movw	r18, r24
    1952:	21 50       	subi	r18, 0x01	; 1
    1954:	30 40       	sbci	r19, 0x00	; 0
    1956:	ce 01       	movw	r24, r28
    1958:	06 96       	adiw	r24, 0x06	; 6
    195a:	fc 01       	movw	r30, r24
    195c:	e2 0f       	add	r30, r18
    195e:	f3 1f       	adc	r31, r19
    1960:	80 81       	ld	r24, Z
    1962:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <LCD_voidWriteData>
		i++ ;
	}
	while(LOCAL_NUMBER!=ZERO);


	for(;i>0;i--)
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	81 50       	subi	r24, 0x01	; 1
    196a:	89 83       	std	Y+1, r24	; 0x01
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	88 23       	and	r24, r24
    1970:	61 f7       	brne	.-40     	; 0x194a <LCD_voidWriteNumber+0xa0>
		LCD_voidWriteData(LOCAL_ARR[i-ONE]);
	}



}
    1972:	63 96       	adiw	r28, 0x13	; 19
    1974:	0f b6       	in	r0, 0x3f	; 63
    1976:	f8 94       	cli
    1978:	de bf       	out	0x3e, r29	; 62
    197a:	0f be       	out	0x3f, r0	; 63
    197c:	cd bf       	out	0x3d, r28	; 61
    197e:	cf 91       	pop	r28
    1980:	df 91       	pop	r29
    1982:	1f 91       	pop	r17
    1984:	0f 91       	pop	r16
    1986:	08 95       	ret

00001988 <LCD_voidWriteSpecialCharToCGRAM>:

/***********************************************************************************/

void LCD_voidWriteSpecialCharToCGRAM(u8 *copy_u8data , u8 copy_u8ByteNum )

{
    1988:	df 93       	push	r29
    198a:	cf 93       	push	r28
    198c:	00 d0       	rcall	.+0      	; 0x198e <LCD_voidWriteSpecialCharToCGRAM+0x6>
    198e:	00 d0       	rcall	.+0      	; 0x1990 <LCD_voidWriteSpecialCharToCGRAM+0x8>
    1990:	0f 92       	push	r0
    1992:	cd b7       	in	r28, 0x3d	; 61
    1994:	de b7       	in	r29, 0x3e	; 62
    1996:	9c 83       	std	Y+4, r25	; 0x04
    1998:	8b 83       	std	Y+3, r24	; 0x03
    199a:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8CGramAddrss ;
	u8 counter=ZERO ;
    199c:	19 82       	std	Y+1, r1	; 0x01

	Local_u8CGramAddrss = ( (copy_u8ByteNum * EIGHT)+SET_CGRAM_ADDRESS ) ;
    199e:	8d 81       	ldd	r24, Y+5	; 0x05
    19a0:	88 2f       	mov	r24, r24
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	08 96       	adiw	r24, 0x08	; 8
    19a6:	88 0f       	add	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	88 0f       	add	r24, r24
    19ac:	99 1f       	adc	r25, r25
    19ae:	88 0f       	add	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	8a 83       	std	Y+2, r24	; 0x02

	LCD_voidWriteCommand( Local_u8CGramAddrss  ) ;
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <LCD_voidWriteCommand>


	for(counter=ZERO;counter<EIGHT;counter++)
    19ba:	19 82       	std	Y+1, r1	; 0x01
    19bc:	0e c0       	rjmp	.+28     	; 0x19da <LCD_voidWriteSpecialCharToCGRAM+0x52>
	{
		LCD_voidWriteData(copy_u8data[counter]);
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	8b 81       	ldd	r24, Y+3	; 0x03
    19c6:	9c 81       	ldd	r25, Y+4	; 0x04
    19c8:	fc 01       	movw	r30, r24
    19ca:	e2 0f       	add	r30, r18
    19cc:	f3 1f       	adc	r31, r19
    19ce:	80 81       	ld	r24, Z
    19d0:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <LCD_voidWriteData>
	Local_u8CGramAddrss = ( (copy_u8ByteNum * EIGHT)+SET_CGRAM_ADDRESS ) ;

	LCD_voidWriteCommand( Local_u8CGramAddrss  ) ;


	for(counter=ZERO;counter<EIGHT;counter++)
    19d4:	89 81       	ldd	r24, Y+1	; 0x01
    19d6:	8f 5f       	subi	r24, 0xFF	; 255
    19d8:	89 83       	std	Y+1, r24	; 0x01
    19da:	89 81       	ldd	r24, Y+1	; 0x01
    19dc:	88 30       	cpi	r24, 0x08	; 8
    19de:	78 f3       	brcs	.-34     	; 0x19be <LCD_voidWriteSpecialCharToCGRAM+0x36>
	{
		LCD_voidWriteData(copy_u8data[counter]);
	}

}
    19e0:	0f 90       	pop	r0
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	cf 91       	pop	r28
    19ec:	df 91       	pop	r29
    19ee:	08 95       	ret

000019f0 <LCD_voidDisplaySpecialChar>:

/***********************************************************************************/

void LCD_voidDisplaySpecialChar(u8 copy_u8ByteNum )
{
    19f0:	df 93       	push	r29
    19f2:	cf 93       	push	r28
    19f4:	0f 92       	push	r0
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidWriteData(copy_u8ByteNum);
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <LCD_voidWriteData>

}
    1a02:	0f 90       	pop	r0
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	08 95       	ret

00001a0a <LED_TOGGLE>:
#include "TWI_Config.h"
#include "GIE_Interface.h"
#include "TMR0_Interface.h"

void LED_TOGGLE()
{
    1a0a:	df 93       	push	r29
    1a0c:	cf 93       	push	r28
    1a0e:	cd b7       	in	r28, 0x3d	; 61
    1a10:	de b7       	in	r29, 0x3e	; 62
    static u16 counter = 0;
        counter++;
    1a12:	80 91 68 00 	lds	r24, 0x0068
    1a16:	90 91 69 00 	lds	r25, 0x0069
    1a1a:	01 96       	adiw	r24, 0x01	; 1
    1a1c:	90 93 69 00 	sts	0x0069, r25
    1a20:	80 93 68 00 	sts	0x0068, r24

        if (counter >= 1000)
    1a24:	80 91 68 00 	lds	r24, 0x0068
    1a28:	90 91 69 00 	lds	r25, 0x0069
    1a2c:	23 e0       	ldi	r18, 0x03	; 3
    1a2e:	88 3e       	cpi	r24, 0xE8	; 232
    1a30:	92 07       	cpc	r25, r18
    1a32:	58 f0       	brcs	.+22     	; 0x1a4a <LED_TOGGLE+0x40>
        {
            DIO_voidToggelPin(PORTA_ID, PIN_0);
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	60 e0       	ldi	r22, 0x00	; 0
    1a38:	0e 94 24 09 	call	0x1248	; 0x1248 <DIO_voidToggelPin>
            counter = 0;
    1a3c:	10 92 69 00 	sts	0x0069, r1
    1a40:	10 92 68 00 	sts	0x0068, r1
            TIMER0_VoidSetPreload(192);
    1a44:	80 ec       	ldi	r24, 0xC0	; 192
    1a46:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <TIMER0_VoidSetPreload>
        }

}
    1a4a:	cf 91       	pop	r28
    1a4c:	df 91       	pop	r29
    1a4e:	08 95       	ret

00001a50 <main>:
int main(void)
{
    1a50:	df 93       	push	r29
    1a52:	cf 93       	push	r28
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(PORTA_ID,PIN_0,PIN_OUTPUT);
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	60 e0       	ldi	r22, 0x00	; 0
    1a5c:	41 e0       	ldi	r20, 0x01	; 1
    1a5e:	0e 94 25 06 	call	0xc4a	; 0xc4a <DIO_voidSetPinDirection>
	M_TWI_void_Init();
    1a62:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <M_TWI_void_Init>

	TIMER0_VoidInit();
    1a66:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <TIMER0_VoidInit>
	TIMER_voidSetCallBack(LED_TOGGLE);
    1a6a:	85 e0       	ldi	r24, 0x05	; 5
    1a6c:	9d e0       	ldi	r25, 0x0D	; 13
    1a6e:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <TIMER_voidSetCallBack>
	TIMER0_VoidSetPreload(192);
    1a72:	80 ec       	ldi	r24, 0xC0	; 192
    1a74:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <TIMER0_VoidSetPreload>
	GIE_Enable();
    1a78:	0e 94 a5 09 	call	0x134a	; 0x134a <GIE_Enable>
	TIMER0_VoidStop();
    1a7c:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <TIMER0_VoidStop>

	while(1)
	{
		M_TWI_u8_StartCondition();
    1a80:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <M_TWI_u8_StartCondition>
		M_TWI_u8_SendSlaveAddressWrite(SLAVE_ADDRESS);
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <M_TWI_u8_SendSlaveAddressWrite>
		M_TWI_u8_SendByte('2');
    1a8a:	82 e3       	ldi	r24, 0x32	; 50
    1a8c:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <M_TWI_u8_SendByte>
		 M_TWI_u8_RepeatedStart();
    1a90:	0e 94 79 0e 	call	0x1cf2	; 0x1cf2 <M_TWI_u8_RepeatedStart>
		 M_TWI_u8_SendSlaveAddressRead(SLAVE_ADDRESS);
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <M_TWI_u8_SendSlaveAddressRead>
		M_TWI_void_StopCondition();
    1a9a:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <M_TWI_void_StopCondition>
		TIMER0_VoidStart();
    1a9e:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <TIMER0_VoidStart>
    1aa2:	ee cf       	rjmp	.-36     	; 0x1a80 <main+0x30>

00001aa4 <TIMER_voidSetCallBack>:
//global pointer to fun
static void (*TIMER0_callBack)(void);

//call back fun
void TIMER_voidSetCallBack(  void (*ptr_timer)(void) )
{
    1aa4:	df 93       	push	r29
    1aa6:	cf 93       	push	r28
    1aa8:	00 d0       	rcall	.+0      	; 0x1aaa <TIMER_voidSetCallBack+0x6>
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    1aae:	9a 83       	std	Y+2, r25	; 0x02
    1ab0:	89 83       	std	Y+1, r24	; 0x01

	if(ptr_timer!=NULL)
    1ab2:	89 81       	ldd	r24, Y+1	; 0x01
    1ab4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	31 f0       	breq	.+12     	; 0x1ac6 <TIMER_voidSetCallBack+0x22>
	{
		TIMER0_callBack=ptr_timer ;
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	9a 81       	ldd	r25, Y+2	; 0x02
    1abe:	90 93 6b 00 	sts	0x006B, r25
    1ac2:	80 93 6a 00 	sts	0x006A, r24

	}
}
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	cf 91       	pop	r28
    1acc:	df 91       	pop	r29
    1ace:	08 95       	ret

00001ad0 <__vector_11>:


#if MOOD== NORMAL_MOOD
void __vector_11 () __attribute__  ((signal));
void __vector_11 ()
{
    1ad0:	1f 92       	push	r1
    1ad2:	0f 92       	push	r0
    1ad4:	0f b6       	in	r0, 0x3f	; 63
    1ad6:	0f 92       	push	r0
    1ad8:	11 24       	eor	r1, r1
    1ada:	2f 93       	push	r18
    1adc:	3f 93       	push	r19
    1ade:	4f 93       	push	r20
    1ae0:	5f 93       	push	r21
    1ae2:	6f 93       	push	r22
    1ae4:	7f 93       	push	r23
    1ae6:	8f 93       	push	r24
    1ae8:	9f 93       	push	r25
    1aea:	af 93       	push	r26
    1aec:	bf 93       	push	r27
    1aee:	ef 93       	push	r30
    1af0:	ff 93       	push	r31
    1af2:	df 93       	push	r29
    1af4:	cf 93       	push	r28
    1af6:	cd b7       	in	r28, 0x3d	; 61
    1af8:	de b7       	in	r29, 0x3e	; 62

	TIMER0_callBack();
    1afa:	e0 91 6a 00 	lds	r30, 0x006A
    1afe:	f0 91 6b 00 	lds	r31, 0x006B
    1b02:	09 95       	icall

}
    1b04:	cf 91       	pop	r28
    1b06:	df 91       	pop	r29
    1b08:	ff 91       	pop	r31
    1b0a:	ef 91       	pop	r30
    1b0c:	bf 91       	pop	r27
    1b0e:	af 91       	pop	r26
    1b10:	9f 91       	pop	r25
    1b12:	8f 91       	pop	r24
    1b14:	7f 91       	pop	r23
    1b16:	6f 91       	pop	r22
    1b18:	5f 91       	pop	r21
    1b1a:	4f 91       	pop	r20
    1b1c:	3f 91       	pop	r19
    1b1e:	2f 91       	pop	r18
    1b20:	0f 90       	pop	r0
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	0f 90       	pop	r0
    1b26:	1f 90       	pop	r1
    1b28:	18 95       	reti

00001b2a <TIMER0_VoidInit>:


/**********************************************************************************
 *********************************************************************************/
void TIMER0_VoidInit(void)
{
    1b2a:	df 93       	push	r29
    1b2c:	cf 93       	push	r28
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62

/**************************************/
#if MOOD==NORMAL_MOOD
/**************************************/
	TCCR0_REG->TCCR0_WGM00 = ZERO;
    1b32:	e3 e5       	ldi	r30, 0x53	; 83
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	8f 7b       	andi	r24, 0xBF	; 191
    1b3a:	80 83       	st	Z, r24
	TCCR0_REG->TCCR0_WGM01 = ZERO;
    1b3c:	e3 e5       	ldi	r30, 0x53	; 83
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	80 81       	ld	r24, Z
    1b42:	87 7f       	andi	r24, 0xF7	; 247
    1b44:	80 83       	st	Z, r24
	TCNT0_REG=PRELOAD;
    1b46:	e2 e5       	ldi	r30, 0x52	; 82
    1b48:	f0 e0       	ldi	r31, 0x00	; 0
    1b4a:	10 82       	st	Z, r1
	/*------------------------------------*/
#if ISR == ISR_EN
	/*enabel  NORMAL_MOOD interrupt*/
	TIMSK_REG->TIMSK_TOIE0 = ONE ;
    1b4c:	e9 e5       	ldi	r30, 0x59	; 89
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	81 60       	ori	r24, 0x01	; 1
    1b54:	80 83       	st	Z, r24
#endif /*Related to (#if MOOD==NORMAL_MOOD) and (#elif MOOD==CTC_MOOD) and (#elif MOOD==PWM_MOOD) */
	/**************************************/



}
    1b56:	cf 91       	pop	r28
    1b58:	df 91       	pop	r29
    1b5a:	08 95       	ret

00001b5c <TIMER0_VoidStop>:

/*****************************************************************************/
void TIMER0_VoidStop(void)
{
    1b5c:	df 93       	push	r29
    1b5e:	cf 93       	push	r28
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG->TCCR0_CS0=No_FREQ;
    1b64:	e3 e5       	ldi	r30, 0x53	; 83
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	88 7f       	andi	r24, 0xF8	; 248
    1b6c:	80 83       	st	Z, r24

}
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	08 95       	ret

00001b74 <TIMER0_VoidStart>:


/*****************************************************************************/
void TIMER0_VoidStart(void)
{
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62

	TCCR0_REG->TCCR0_CS0=PRESCALER;
    1b7c:	e3 e5       	ldi	r30, 0x53	; 83
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	88 7f       	andi	r24, 0xF8	; 248
    1b84:	82 60       	ori	r24, 0x02	; 2
    1b86:	80 83       	st	Z, r24

}
    1b88:	cf 91       	pop	r28
    1b8a:	df 91       	pop	r29
    1b8c:	08 95       	ret

00001b8e <TIMER0_VoidSetPreload>:

/*****************************************************************************/
void TIMER0_VoidSetPreload(u8 copy_u8PRELOAD )
{
    1b8e:	df 93       	push	r29
    1b90:	cf 93       	push	r28
    1b92:	0f 92       	push	r0
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	89 83       	std	Y+1, r24	; 0x01

	TCNT0_REG=copy_u8PRELOAD;
    1b9a:	e2 e5       	ldi	r30, 0x52	; 82
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ba0:	80 83       	st	Z, r24
}
    1ba2:	0f 90       	pop	r0
    1ba4:	cf 91       	pop	r28
    1ba6:	df 91       	pop	r29
    1ba8:	08 95       	ret

00001baa <TIMER0_VoidVal>:

/*****************************************************************************/

u8 TIMER0_VoidVal(void )
{
    1baa:	df 93       	push	r29
    1bac:	cf 93       	push	r28
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62

	return  TCNT0_REG ;
    1bb2:	e2 e5       	ldi	r30, 0x52	; 82
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
}
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <TIMER0_VoidSetPWMCompareMatch>:

/*****************************************************************************/
void TIMER0_VoidSetPWMCompareMatch(u8 copy_u8Val )
{
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	0f 92       	push	r0
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    1bc8:	89 83       	std	Y+1, r24	; 0x01

#elif PWM_COMPARE_MATCH == SET_ON_COMPARE_MATCH_CLR_ON_TOP
	//OCR0_REG = (255) - ( ( (f32)copy_u8Val / 100 ) * (255) ) ;
	  OCR0_REG = (255) - ( ( (u32)copy_u8Val * 255 ) / (100) ) ;
#endif
}
    1bca:	0f 90       	pop	r0
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	08 95       	ret

00001bd2 <WDT_VoidEnabel>:

/*
 * watch dog timer IN TIMER_1
 */
void WDT_VoidEnabel(void )
{
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	cd b7       	in	r28, 0x3d	; 61
    1bd8:	de b7       	in	r29, 0x3e	; 62

	//SET_BIT(WDTCR_,3);
	WDTCR_REG->WDTCR_WDE=1;
    1bda:	e1 e4       	ldi	r30, 0x41	; 65
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	88 60       	ori	r24, 0x08	; 8
    1be2:	80 83       	st	Z, r24
}
    1be4:	cf 91       	pop	r28
    1be6:	df 91       	pop	r29
    1be8:	08 95       	ret

00001bea <WDT_VoidDisEnabel>:

void WDT_VoidDisEnabel(void )
{
    1bea:	df 93       	push	r29
    1bec:	cf 93       	push	r28
    1bee:	cd b7       	in	r28, 0x3d	; 61
    1bf0:	de b7       	in	r29, 0x3e	; 62
//	WDTCR_==(1<<4)|(1<<3);
//	WDTCR_=0 ;

WDTCR_REG->WDTCR_Data=(1<<4)|(1<<3);
    1bf2:	e1 e4       	ldi	r30, 0x41	; 65
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	88 e1       	ldi	r24, 0x18	; 24
    1bf8:	80 83       	st	Z, r24
WDTCR_REG->WDTCR_WDE=0;
    1bfa:	e1 e4       	ldi	r30, 0x41	; 65
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	87 7f       	andi	r24, 0xF7	; 247
    1c02:	80 83       	st	Z, r24
}
    1c04:	cf 91       	pop	r28
    1c06:	df 91       	pop	r29
    1c08:	08 95       	ret

00001c0a <WDT_VoidSleep>:
void WDT_VoidSleep(u8 sleep_time )
{
    1c0a:	df 93       	push	r29
    1c0c:	cf 93       	push	r28
    1c0e:	0f 92       	push	r0
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	89 83       	std	Y+1, r24	; 0x01

	//WDTCR_=(WDTCR_&0xF8) |sleep_time ;

	WDTCR_REG->WDTCR_WDP=sleep_time;
    1c16:	e1 e4       	ldi	r30, 0x41	; 65
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	87 70       	andi	r24, 0x07	; 7
    1c1e:	98 2f       	mov	r25, r24
    1c20:	97 70       	andi	r25, 0x07	; 7
    1c22:	80 81       	ld	r24, Z
    1c24:	88 7f       	andi	r24, 0xF8	; 248
    1c26:	89 2b       	or	r24, r25
    1c28:	80 83       	st	Z, r24

}
    1c2a:	0f 90       	pop	r0
    1c2c:	cf 91       	pop	r28
    1c2e:	df 91       	pop	r29
    1c30:	08 95       	ret

00001c32 <M_TWI_void_Init>:


/*------------------------------------------------------------------------*/

void M_TWI_void_Init(void)
{
    1c32:	df 93       	push	r29
    1c34:	cf 93       	push	r28
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
#if   TWI_MODE   ==   TWI_MASTER_MODE
	TWBR_REG = (  ( ((u32)F_OSC * 1000000) / F_SCL) - 16) / 2;
    1c3a:	e0 e2       	ldi	r30, 0x20	; 32
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 e2       	ldi	r24, 0x20	; 32
    1c40:	80 83       	st	Z, r24
	CLR_BIT(TWSR_REG,TWSR_TWPS0);
    1c42:	a1 e2       	ldi	r26, 0x21	; 33
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	e1 e2       	ldi	r30, 0x21	; 33
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	8e 7f       	andi	r24, 0xFE	; 254
    1c4e:	8c 93       	st	X, r24
	CLR_BIT(TWSR_REG,TWSR_TWPS1);
    1c50:	a1 e2       	ldi	r26, 0x21	; 33
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	e1 e2       	ldi	r30, 0x21	; 33
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	8d 7f       	andi	r24, 0xFD	; 253
    1c5c:	8c 93       	st	X, r24

	/*EN ACK*/
	//SET_BIT(TWCR_REG,TWCR_TWEA);

	/*EN TWI */
	SET_BIT(TWCR_REG,TWCR_TWEN);
    1c5e:	a6 e5       	ldi	r26, 0x56	; 86
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	e6 e5       	ldi	r30, 0x56	; 86
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	80 81       	ld	r24, Z
    1c68:	84 60       	ori	r24, 0x04	; 4
    1c6a:	8c 93       	st	X, r24
}
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	08 95       	ret

00001c72 <M_TWI_u8_StartCondition>:
/*------------------------------------------------------------------------*/



TWI_ERROR_STATUS M_TWI_u8_StartCondition(void)
{
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	0f 92       	push	r0
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
	TWI_ERROR_STATUS local_error =NO_ERROR ;
    1c7c:	81 e0       	ldi	r24, 0x01	; 1
    1c7e:	89 83       	std	Y+1, r24	; 0x01


	/* Start Condition */

	SET_BIT(TWCR_REG,TWCR_TWSTA);
    1c80:	a6 e5       	ldi	r26, 0x56	; 86
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e6 e5       	ldi	r30, 0x56	; 86
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	80 62       	ori	r24, 0x20	; 32
    1c8c:	8c 93       	st	X, r24

	/* to clear the flag */
	SET_BIT(TWCR_REG,TWCR_TWINT);
    1c8e:	a6 e5       	ldi	r26, 0x56	; 86
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	e6 e5       	ldi	r30, 0x56	; 86
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	80 68       	ori	r24, 0x80	; 128
    1c9a:	8c 93       	st	X, r24


	while(GET_BIT(TWCR_REG,TWCR_TWINT) == 0);
    1c9c:	e6 e5       	ldi	r30, 0x56	; 86
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	88 23       	and	r24, r24
    1ca4:	dc f7       	brge	.-10     	; 0x1c9c <M_TWI_u8_StartCondition+0x2a>

	if((TWSR_REG & 0xF8) != TWI_START_COND_ACK)
    1ca6:	e1 e2       	ldi	r30, 0x21	; 33
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	88 2f       	mov	r24, r24
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	88 7f       	andi	r24, 0xF8	; 248
    1cb2:	90 70       	andi	r25, 0x00	; 0
    1cb4:	88 30       	cpi	r24, 0x08	; 8
    1cb6:	91 05       	cpc	r25, r1
    1cb8:	11 f0       	breq	.+4      	; 0x1cbe <M_TWI_u8_StartCondition+0x4c>
	{
		local_error=START_ERROR;
    1cba:	82 e0       	ldi	r24, 0x02	; 2
    1cbc:	89 83       	std	Y+1, r24	; 0x01
	{

	}


	return  local_error ;
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cc0:	0f 90       	pop	r0
    1cc2:	cf 91       	pop	r28
    1cc4:	df 91       	pop	r29
    1cc6:	08 95       	ret

00001cc8 <M_TWI_void_StopCondition>:

/***************************************************************************/

void M_TWI_void_StopCondition(void)

{
    1cc8:	df 93       	push	r29
    1cca:	cf 93       	push	r28
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62

	/* Stop Condition */
	SET_BIT(TWCR_REG,TWCR_TWSTO);
    1cd0:	a6 e5       	ldi	r26, 0x56	; 86
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	e6 e5       	ldi	r30, 0x56	; 86
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	80 61       	ori	r24, 0x10	; 16
    1cdc:	8c 93       	st	X, r24

	/* to clear the flag */
	SET_BIT(TWCR_REG,TWCR_TWINT);
    1cde:	a6 e5       	ldi	r26, 0x56	; 86
    1ce0:	b0 e0       	ldi	r27, 0x00	; 0
    1ce2:	e6 e5       	ldi	r30, 0x56	; 86
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	80 81       	ld	r24, Z
    1ce8:	80 68       	ori	r24, 0x80	; 128
    1cea:	8c 93       	st	X, r24

}
    1cec:	cf 91       	pop	r28
    1cee:	df 91       	pop	r29
    1cf0:	08 95       	ret

00001cf2 <M_TWI_u8_RepeatedStart>:

/***************************************************************************/

TWI_ERROR_STATUS M_TWI_u8_RepeatedStart(void)
{
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	0f 92       	push	r0
    1cf8:	cd b7       	in	r28, 0x3d	; 61
    1cfa:	de b7       	in	r29, 0x3e	; 62
	TWI_ERROR_STATUS local_error =NO_ERROR ;
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	89 83       	std	Y+1, r24	; 0x01


	/* Start Condition */
	SET_BIT(TWCR_REG,TWCR_TWSTA);
    1d00:	a6 e5       	ldi	r26, 0x56	; 86
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e6 e5       	ldi	r30, 0x56	; 86
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	80 62       	ori	r24, 0x20	; 32
    1d0c:	8c 93       	st	X, r24


	/* to clear the flag */
	SET_BIT(TWCR_REG,TWCR_TWINT);
    1d0e:	a6 e5       	ldi	r26, 0x56	; 86
    1d10:	b0 e0       	ldi	r27, 0x00	; 0
    1d12:	e6 e5       	ldi	r30, 0x56	; 86
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	80 81       	ld	r24, Z
    1d18:	80 68       	ori	r24, 0x80	; 128
    1d1a:	8c 93       	st	X, r24


	while(GET_BIT(TWCR_REG,TWCR_TWINT) == 0);
    1d1c:	e6 e5       	ldi	r30, 0x56	; 86
    1d1e:	f0 e0       	ldi	r31, 0x00	; 0
    1d20:	80 81       	ld	r24, Z
    1d22:	88 23       	and	r24, r24
    1d24:	dc f7       	brge	.-10     	; 0x1d1c <M_TWI_u8_RepeatedStart+0x2a>


	if((TWSR_REG & 0xF8) != TWI_REPEATED_START_COND_ACK)
    1d26:	e1 e2       	ldi	r30, 0x21	; 33
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	88 2f       	mov	r24, r24
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	88 7f       	andi	r24, 0xF8	; 248
    1d32:	90 70       	andi	r25, 0x00	; 0
    1d34:	80 31       	cpi	r24, 0x10	; 16
    1d36:	91 05       	cpc	r25, r1
    1d38:	11 f0       	breq	.+4      	; 0x1d3e <M_TWI_u8_RepeatedStart+0x4c>
	{
		local_error=REPEATED_STSRT_ERROR;
    1d3a:	83 e0       	ldi	r24, 0x03	; 3
    1d3c:	89 83       	std	Y+1, r24	; 0x01
	{

	}


	return  local_error ;
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d40:	0f 90       	pop	r0
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	08 95       	ret

00001d48 <M_TWI_u8_SendSlaveAddressWrite>:
/***************************************************************************/



TWI_ERROR_STATUS M_TWI_u8_SendSlaveAddressWrite(u8 Copy_u8Address)
{
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	00 d0       	rcall	.+0      	; 0x1d4e <M_TWI_u8_SendSlaveAddressWrite+0x6>
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
    1d52:	8a 83       	std	Y+2, r24	; 0x02

	TWI_ERROR_STATUS local_error = NO_ERROR ;
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	89 83       	std	Y+1, r24	; 0x01


	TWDR_REG = (Copy_u8Address << 1);
    1d58:	e3 e2       	ldi	r30, 0x23	; 35
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	88 0f       	add	r24, r24
    1d60:	80 83       	st	Z, r24
	CLR_BIT(TWDR_REG,0);
    1d62:	a3 e2       	ldi	r26, 0x23	; 35
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	e3 e2       	ldi	r30, 0x23	; 35
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	8e 7f       	andi	r24, 0xFE	; 254
    1d6e:	8c 93       	st	X, r24



	/* Clear Start condition */
	CLR_BIT(TWCR_REG,TWCR_TWSTA);
    1d70:	a6 e5       	ldi	r26, 0x56	; 86
    1d72:	b0 e0       	ldi	r27, 0x00	; 0
    1d74:	e6 e5       	ldi	r30, 0x56	; 86
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	8f 7d       	andi	r24, 0xDF	; 223
    1d7c:	8c 93       	st	X, r24

	/* to clear the flag */
	SET_BIT(TWCR_REG,TWCR_TWINT);
    1d7e:	a6 e5       	ldi	r26, 0x56	; 86
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e6 e5       	ldi	r30, 0x56	; 86
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	80 68       	ori	r24, 0x80	; 128
    1d8a:	8c 93       	st	X, r24

	while(GET_BIT(TWCR_REG,TWCR_TWINT) == 0);
    1d8c:	e6 e5       	ldi	r30, 0x56	; 86
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	88 23       	and	r24, r24
    1d94:	dc f7       	brge	.-10     	; 0x1d8c <M_TWI_u8_SendSlaveAddressWrite+0x44>


	if((TWSR_REG & 0xF8) != TWI_SEND_SLAVE_ADD_WRITE_ACK)
    1d96:	e1 e2       	ldi	r30, 0x21	; 33
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	88 2f       	mov	r24, r24
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	88 7f       	andi	r24, 0xF8	; 248
    1da2:	90 70       	andi	r25, 0x00	; 0
    1da4:	88 31       	cpi	r24, 0x18	; 24
    1da6:	91 05       	cpc	r25, r1
    1da8:	11 f0       	breq	.+4      	; 0x1dae <M_TWI_u8_SendSlaveAddressWrite+0x66>
	{
		local_error=SLAVE_ADDRESS_WRITE_ERROR;
    1daa:	84 e0       	ldi	r24, 0x04	; 4
    1dac:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	return  local_error ;
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
}
    1db0:	0f 90       	pop	r0
    1db2:	0f 90       	pop	r0
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	08 95       	ret

00001dba <M_TWI_u8_SendSlaveAddressRead>:

/***************************************************************************/

TWI_ERROR_STATUS M_TWI_u8_SendSlaveAddressRead(u8 Copy_u8Address)
{
    1dba:	df 93       	push	r29
    1dbc:	cf 93       	push	r28
    1dbe:	00 d0       	rcall	.+0      	; 0x1dc0 <M_TWI_u8_SendSlaveAddressRead+0x6>
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
    1dc4:	8a 83       	std	Y+2, r24	; 0x02

	TWI_ERROR_STATUS local_error =NO_ERROR ;
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	89 83       	std	Y+1, r24	; 0x01


	TWDR_REG = ( (Copy_u8Address << 1) | 1);
    1dca:	e3 e2       	ldi	r30, 0x23	; 35
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	88 2f       	mov	r24, r24
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	88 0f       	add	r24, r24
    1dd6:	99 1f       	adc	r25, r25
    1dd8:	81 60       	ori	r24, 0x01	; 1
    1dda:	80 83       	st	Z, r24

	/* Clear Start condition */
	CLR_BIT(TWCR_REG,TWCR_TWSTA);
    1ddc:	a6 e5       	ldi	r26, 0x56	; 86
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	e6 e5       	ldi	r30, 0x56	; 86
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	8f 7d       	andi	r24, 0xDF	; 223
    1de8:	8c 93       	st	X, r24


	SET_BIT(TWCR_REG,TWCR_TWINT);   /* to clear the flag */
    1dea:	a6 e5       	ldi	r26, 0x56	; 86
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	e6 e5       	ldi	r30, 0x56	; 86
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	80 68       	ori	r24, 0x80	; 128
    1df6:	8c 93       	st	X, r24


	while(GET_BIT(TWCR_REG,TWCR_TWINT) == 0);
    1df8:	e6 e5       	ldi	r30, 0x56	; 86
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	88 23       	and	r24, r24
    1e00:	dc f7       	brge	.-10     	; 0x1df8 <M_TWI_u8_SendSlaveAddressRead+0x3e>

	if((TWSR_REG & 0xF8) != TWI_SEND_SLAVE_ADD_READ_ACK)
    1e02:	e1 e2       	ldi	r30, 0x21	; 33
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	88 2f       	mov	r24, r24
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	88 7f       	andi	r24, 0xF8	; 248
    1e0e:	90 70       	andi	r25, 0x00	; 0
    1e10:	80 34       	cpi	r24, 0x40	; 64
    1e12:	91 05       	cpc	r25, r1
    1e14:	11 f0       	breq	.+4      	; 0x1e1a <M_TWI_u8_SendSlaveAddressRead+0x60>
	{
		local_error=SLAVE_ADDRESS_READ_ERROR;
    1e16:	85 e0       	ldi	r24, 0x05	; 5
    1e18:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	return  local_error ;
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01

}
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <M_TWI_u8_SendByte>:



/***************************************************************************/
TWI_ERROR_STATUS M_TWI_u8_SendByte(u8 Copy_u8Data)
{
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	00 d0       	rcall	.+0      	; 0x1e2c <M_TWI_u8_SendByte+0x6>
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    1e30:	8a 83       	std	Y+2, r24	; 0x02
	TWI_ERROR_STATUS local_error =NO_ERROR ;
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	89 83       	std	Y+1, r24	; 0x01

	TWDR_REG = Copy_u8Data;
    1e36:	e3 e2       	ldi	r30, 0x23	; 35
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	80 83       	st	Z, r24
	/* Clear Start condition */
	CLR_BIT(TWCR_REG,TWCR_TWSTA);
    1e3e:	a6 e5       	ldi	r26, 0x56	; 86
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	e6 e5       	ldi	r30, 0x56	; 86
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	8f 7d       	andi	r24, 0xDF	; 223
    1e4a:	8c 93       	st	X, r24


	SET_BIT(TWCR_REG,TWCR_TWINT);   /* to clear the flag */
    1e4c:	a6 e5       	ldi	r26, 0x56	; 86
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	e6 e5       	ldi	r30, 0x56	; 86
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	80 68       	ori	r24, 0x80	; 128
    1e58:	8c 93       	st	X, r24

	while(GET_BIT(TWCR_REG,TWCR_TWINT) == 0);
    1e5a:	e6 e5       	ldi	r30, 0x56	; 86
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	88 23       	and	r24, r24
    1e62:	dc f7       	brge	.-10     	; 0x1e5a <M_TWI_u8_SendByte+0x34>

	if((TWSR_REG & 0xF8) != TWI_SEND_BYTE_ACK)
    1e64:	e1 e2       	ldi	r30, 0x21	; 33
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	80 81       	ld	r24, Z
    1e6a:	88 2f       	mov	r24, r24
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	88 7f       	andi	r24, 0xF8	; 248
    1e70:	90 70       	andi	r25, 0x00	; 0
    1e72:	88 32       	cpi	r24, 0x28	; 40
    1e74:	91 05       	cpc	r25, r1
    1e76:	11 f0       	breq	.+4      	; 0x1e7c <M_TWI_u8_SendByte+0x56>
	{
		local_error=SEND_BYTE_ERROR;
    1e78:	86 e0       	ldi	r24, 0x06	; 6
    1e7a:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{

	}
	return  local_error ;
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01

}
    1e7e:	0f 90       	pop	r0
    1e80:	0f 90       	pop	r0
    1e82:	cf 91       	pop	r28
    1e84:	df 91       	pop	r29
    1e86:	08 95       	ret

00001e88 <M_TWI_u8_ReadByte>:

/***************************************************************************/

TWI_ERROR_STATUS  M_TWI_u8_ReadByte(u8 *TWI_DATA)
{
    1e88:	df 93       	push	r29
    1e8a:	cf 93       	push	r28
    1e8c:	00 d0       	rcall	.+0      	; 0x1e8e <M_TWI_u8_ReadByte+0x6>
    1e8e:	0f 92       	push	r0
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	9b 83       	std	Y+3, r25	; 0x03
    1e96:	8a 83       	std	Y+2, r24	; 0x02

	TWI_ERROR_STATUS local_error =NO_ERROR ;
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	89 83       	std	Y+1, r24	; 0x01

	SET_BIT(TWCR_REG, TWCR_TWEA);
    1e9c:	a6 e5       	ldi	r26, 0x56	; 86
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	e6 e5       	ldi	r30, 0x56	; 86
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 81       	ld	r24, Z
    1ea6:	80 64       	ori	r24, 0x40	; 64
    1ea8:	8c 93       	st	X, r24

	SET_BIT(TWCR_REG,TWCR_TWINT);   /* to clear the flag */
    1eaa:	a6 e5       	ldi	r26, 0x56	; 86
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	e6 e5       	ldi	r30, 0x56	; 86
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	80 68       	ori	r24, 0x80	; 128
    1eb6:	8c 93       	st	X, r24

	while(GET_BIT(TWCR_REG,TWCR_TWINT) == 0);
    1eb8:	e6 e5       	ldi	r30, 0x56	; 86
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	88 23       	and	r24, r24
    1ec0:	dc f7       	brge	.-10     	; 0x1eb8 <M_TWI_u8_ReadByte+0x30>

	if((TWSR_REG & 0xF8) != TWI_READ_BYTE_ACK)
    1ec2:	e1 e2       	ldi	r30, 0x21	; 33
    1ec4:	f0 e0       	ldi	r31, 0x00	; 0
    1ec6:	80 81       	ld	r24, Z
    1ec8:	88 2f       	mov	r24, r24
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	88 7f       	andi	r24, 0xF8	; 248
    1ece:	90 70       	andi	r25, 0x00	; 0
    1ed0:	80 35       	cpi	r24, 0x50	; 80
    1ed2:	91 05       	cpc	r25, r1
    1ed4:	19 f0       	breq	.+6      	; 0x1edc <M_TWI_u8_ReadByte+0x54>
	{
		local_error=READ_BYTE_ERROR;
    1ed6:	87 e0       	ldi	r24, 0x07	; 7
    1ed8:	89 83       	std	Y+1, r24	; 0x01
    1eda:	06 c0       	rjmp	.+12     	; 0x1ee8 <M_TWI_u8_ReadByte+0x60>
	}
	else
	{
		*TWI_DATA = TWDR_REG;
    1edc:	e3 e2       	ldi	r30, 0x23	; 35
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	80 81       	ld	r24, Z
    1ee2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ee4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ee6:	80 83       	st	Z, r24
	}


	*TWI_DATA = TWDR_REG;
    1ee8:	e3 e2       	ldi	r30, 0x23	; 35
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	ea 81       	ldd	r30, Y+2	; 0x02
    1ef0:	fb 81       	ldd	r31, Y+3	; 0x03
    1ef2:	80 83       	st	Z, r24

	return  local_error ;
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	0f 90       	pop	r0
    1efc:	cf 91       	pop	r28
    1efe:	df 91       	pop	r29
    1f00:	08 95       	ret

00001f02 <__udivmodsi4>:
    1f02:	a1 e2       	ldi	r26, 0x21	; 33
    1f04:	1a 2e       	mov	r1, r26
    1f06:	aa 1b       	sub	r26, r26
    1f08:	bb 1b       	sub	r27, r27
    1f0a:	fd 01       	movw	r30, r26
    1f0c:	0d c0       	rjmp	.+26     	; 0x1f28 <__udivmodsi4_ep>

00001f0e <__udivmodsi4_loop>:
    1f0e:	aa 1f       	adc	r26, r26
    1f10:	bb 1f       	adc	r27, r27
    1f12:	ee 1f       	adc	r30, r30
    1f14:	ff 1f       	adc	r31, r31
    1f16:	a2 17       	cp	r26, r18
    1f18:	b3 07       	cpc	r27, r19
    1f1a:	e4 07       	cpc	r30, r20
    1f1c:	f5 07       	cpc	r31, r21
    1f1e:	20 f0       	brcs	.+8      	; 0x1f28 <__udivmodsi4_ep>
    1f20:	a2 1b       	sub	r26, r18
    1f22:	b3 0b       	sbc	r27, r19
    1f24:	e4 0b       	sbc	r30, r20
    1f26:	f5 0b       	sbc	r31, r21

00001f28 <__udivmodsi4_ep>:
    1f28:	66 1f       	adc	r22, r22
    1f2a:	77 1f       	adc	r23, r23
    1f2c:	88 1f       	adc	r24, r24
    1f2e:	99 1f       	adc	r25, r25
    1f30:	1a 94       	dec	r1
    1f32:	69 f7       	brne	.-38     	; 0x1f0e <__udivmodsi4_loop>
    1f34:	60 95       	com	r22
    1f36:	70 95       	com	r23
    1f38:	80 95       	com	r24
    1f3a:	90 95       	com	r25
    1f3c:	9b 01       	movw	r18, r22
    1f3e:	ac 01       	movw	r20, r24
    1f40:	bd 01       	movw	r22, r26
    1f42:	cf 01       	movw	r24, r30
    1f44:	08 95       	ret

00001f46 <__prologue_saves__>:
    1f46:	2f 92       	push	r2
    1f48:	3f 92       	push	r3
    1f4a:	4f 92       	push	r4
    1f4c:	5f 92       	push	r5
    1f4e:	6f 92       	push	r6
    1f50:	7f 92       	push	r7
    1f52:	8f 92       	push	r8
    1f54:	9f 92       	push	r9
    1f56:	af 92       	push	r10
    1f58:	bf 92       	push	r11
    1f5a:	cf 92       	push	r12
    1f5c:	df 92       	push	r13
    1f5e:	ef 92       	push	r14
    1f60:	ff 92       	push	r15
    1f62:	0f 93       	push	r16
    1f64:	1f 93       	push	r17
    1f66:	cf 93       	push	r28
    1f68:	df 93       	push	r29
    1f6a:	cd b7       	in	r28, 0x3d	; 61
    1f6c:	de b7       	in	r29, 0x3e	; 62
    1f6e:	ca 1b       	sub	r28, r26
    1f70:	db 0b       	sbc	r29, r27
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	f8 94       	cli
    1f76:	de bf       	out	0x3e, r29	; 62
    1f78:	0f be       	out	0x3f, r0	; 63
    1f7a:	cd bf       	out	0x3d, r28	; 61
    1f7c:	09 94       	ijmp

00001f7e <__epilogue_restores__>:
    1f7e:	2a 88       	ldd	r2, Y+18	; 0x12
    1f80:	39 88       	ldd	r3, Y+17	; 0x11
    1f82:	48 88       	ldd	r4, Y+16	; 0x10
    1f84:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f86:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f88:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f8a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f8c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f8e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f90:	b9 84       	ldd	r11, Y+9	; 0x09
    1f92:	c8 84       	ldd	r12, Y+8	; 0x08
    1f94:	df 80       	ldd	r13, Y+7	; 0x07
    1f96:	ee 80       	ldd	r14, Y+6	; 0x06
    1f98:	fd 80       	ldd	r15, Y+5	; 0x05
    1f9a:	0c 81       	ldd	r16, Y+4	; 0x04
    1f9c:	1b 81       	ldd	r17, Y+3	; 0x03
    1f9e:	aa 81       	ldd	r26, Y+2	; 0x02
    1fa0:	b9 81       	ldd	r27, Y+1	; 0x01
    1fa2:	ce 0f       	add	r28, r30
    1fa4:	d1 1d       	adc	r29, r1
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	cd bf       	out	0x3d, r28	; 61
    1fb0:	ed 01       	movw	r28, r26
    1fb2:	08 95       	ret

00001fb4 <_exit>:
    1fb4:	f8 94       	cli

00001fb6 <__stop_program>:
    1fb6:	ff cf       	rjmp	.-2      	; 0x1fb6 <__stop_program>
